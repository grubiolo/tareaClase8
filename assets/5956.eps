%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Veggie bio diet logos flat icon collection.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 6/1/2020
%%BoundingBox: 0 0 3000 2000
%%HiResBoundingBox: 0 0 3000 2000
%%CropBox: 0 0 3000 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Veggie bio diet logos flat icon collection</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Veggie bio logos flat icon collection. Vegetarian, vegan diet and green banners vector illustration set. Healthy fresh products and restaurant concept</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>vegan</rdf:li>
               <rdf:li>veggie</rdf:li>
               <rdf:li>icon</rdf:li>
               <rdf:li>sticker</rdf:li>
               <rdf:li>badge</rdf:li>
               <rdf:li>vegetarian</rdf:li>
               <rdf:li>hundred</rdf:li>
               <rdf:li>bio</rdf:li>
               <rdf:li>label</rdf:li>
               <rdf:li>leaf</rdf:li>
               <rdf:li>tag</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>health</rdf:li>
               <rdf:li>logo</rdf:li>
               <rdf:li>stamp</rdf:li>
               <rdf:li>banner</rdf:li>
               <rdf:li>diet</rdf:li>
               <rdf:li>farm</rdf:li>
               <rdf:li>fresh</rdf:li>
               <rdf:li>healthy</rdf:li>
               <rdf:li>product</rdf:li>
               <rdf:li>restaurant</rdf:li>
               <rdf:li>store</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>set</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>collection</rdf:li>
               <rdf:li>web</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>modern</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>eco</rdf:li>
               <rdf:li>organic</rdf:li>
               <rdf:li>green</rdf:li>
               <rdf:li>emblem</rdf:li>
               <rdf:li>eating</rdf:li>
               <rdf:li>packaging</rdf:li>
               <rdf:li>natural</rdf:li>
               <rdf:li>ecological</rdf:li>
               <rdf:li>gluten</rdf:li>
               <rdf:li>free</rdf:li>
               <rdf:li>quality</rdf:li>
               <rdf:li>market</rdf:li>
               <rdf:li>plant</rdf:li>
               <rdf:li>food</rdf:li>
               <rdf:li>ecology</rdf:li>
               <rdf:li>nature</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-06-01T19:09:06+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-06-01T19:09:07+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-06-01T19:09:07+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FWN+bvOH+HpLNfqwuRc+oXHPgVCcaU2bryzXa7X+AY7XduPnz8FbMBn/M&#xA;HXv0xcX9tL6cUo4pav8AHGqAUXb+Yda+Ptmil2pl8Qzidj0cI6mXFYb0P8wdY01rpp635uTz/euR&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:6E338C2C22A4EA118B95BC66D25DC48D</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:6E338C2C22A4EA118B95BC66D25DC48D</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:c6fb01bb-2249-3e47-854e-3dda1f60353d</stRef:instanceID>
            <stRef:documentID>xmp.did:df142bf9-c01c-bb42-b65d-73b955cd5c12</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b3ddcb28-ed53-ad41-8ef4-480588d20309</stEvt:instanceID>
                  <stEvt:when>2020-04-28T19:06:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:df142bf9-c01c-bb42-b65d-73b955cd5c12</stEvt:instanceID>
                  <stEvt:when>2020-04-28T23:09:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c6fb01bb-2249-3e47-854e-3dda1f60353d</stEvt:instanceID>
                  <stEvt:when>2020-05-08T18:16:53+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge 2019 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6E338C2C22A4EA118B95BC66D25DC48D</stEvt:instanceID>
                  <stEvt:when>2020-06-01T19:09:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
3000 2000 li
3000 0 li
cp
clp
3000 2000 mo
0 2000 li
0 0 li
3000 0 li
3000 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
572.966 196.216 mo
202.429 196.216 li
182.112 196.216 165.642 212.687 165.642 233.004 cv
165.642 368.509 li
165.642 388.827 182.112 405.297 202.429 405.297 cv
326.256 405.297 li
387.698 477.975 li
449.14 405.297 li
572.966 405.297 li
593.283 405.297 609.754 388.827 609.754 368.509 cv
609.754 233.004 li
609.754 212.687 593.283 196.216 572.966 196.216 cv
cp
.454902 .741176 .207843 rgb
f
286.266 250.896 mo
288.136 250.896 288.883 251.893 288.51 253.638 cv
267.444 348.374 li
267.07 349.87 266.197 350.618 264.701 350.618 cv
252.236 350.618 li
250.741 350.618 249.868 349.87 249.494 348.374 cv
228.552 253.638 li
228.178 251.893 228.926 250.896 230.796 250.896 cv
242.638 250.896 li
244.133 250.896 245.006 251.644 245.38 253.14 cv
258.468 319.954 li
271.682 253.14 li
272.055 251.644 272.928 250.896 274.424 250.896 cv
286.266 250.896 li
cp
1 1 1 rgb
f
348.349 265.355 mo
348.349 266.603 347.851 267.475 346.354 267.475 cv
315.191 267.475 li
315.191 292.405 li
338.999 292.405 li
340.246 292.405 340.994 293.153 340.994 294.524 cv
340.994 306.865 li
340.994 308.236 340.246 308.984 338.999 308.984 cv
315.191 308.984 li
315.191 334.163 li
346.354 334.163 li
347.851 334.163 348.349 334.787 348.349 336.158 cv
348.349 348.624 li
348.349 349.87 347.851 350.618 346.354 350.618 cv
300.482 350.618 li
299.36 350.618 298.612 349.87 298.612 348.624 cv
298.612 252.891 li
298.612 251.644 299.36 250.896 300.482 250.896 cv
346.354 250.896 li
347.851 250.896 348.349 251.644 348.349 252.891 cv
348.349 265.355 li
cp
f
358.327 268.846 mo
358.327 257.129 364.56 250.896 376.276 250.896 cv
392.73 250.896 li
404.323 250.896 410.68 257.129 410.68 268.846 cv
410.68 281.81 li
410.68 283.056 409.933 283.804 408.686 283.804 cv
396.22 283.804 li
394.85 283.804 394.227 283.056 394.227 281.81 cv
394.227 272.336 li
394.227 269.095 392.481 267.351 389.241 267.351 cv
380.265 267.351 li
376.899 267.351 375.279 269.095 375.279 272.336 cv
375.279 329.177 li
375.279 332.543 377.024 334.163 380.265 334.163 cv
389.241 334.163 li
392.481 334.163 394.227 332.543 394.227 329.177 cv
394.227 312.474 li
387.745 312.474 li
386.373 312.474 385.75 311.726 385.75 310.48 cv
385.75 298.015 li
385.75 296.643 386.373 296.021 387.745 296.021 cv
408.686 296.021 li
409.933 296.021 410.68 296.643 410.68 298.015 cv
410.68 332.668 li
410.68 344.385 404.323 350.618 392.73 350.618 cv
376.276 350.618 li
364.56 350.618 358.327 344.385 358.327 332.668 cv
358.327 268.846 li
cp
f
452.195 272.71 mo
444.217 316.214 li
460.172 316.214 li
452.195 272.71 li
cp
468.773 350.618 mo
467.651 350.618 467.028 349.994 466.779 348.873 cv
463.289 330.673 li
441.101 330.673 li
437.735 348.873 li
437.485 349.994 436.863 350.618 435.74 350.618 cv
422.402 350.618 li
421.032 350.618 420.408 349.87 420.782 348.498 cv
441.474 252.641 li
441.724 251.395 442.472 250.896 443.593 250.896 cv
460.92 250.896 li
462.042 250.896 462.79 251.395 463.039 252.641 cv
483.731 348.498 li
483.981 349.87 483.482 350.618 481.986 350.618 cv
468.773 350.618 li
cp
f
544.942 250.896 mo
546.189 250.896 546.937 251.644 546.937 252.891 cv
546.937 348.624 li
546.937 349.87 546.189 350.618 544.942 350.618 cv
532.602 350.618 li
531.479 350.618 530.731 350.119 530.358 348.997 cv
511.286 295.771 li
510.663 295.771 li
510.663 348.624 li
510.663 349.87 510.039 350.618 508.668 350.618 cv
495.704 350.618 li
494.458 350.618 493.71 349.87 493.71 348.624 cv
493.71 252.891 li
493.71 251.644 494.458 250.896 495.704 250.896 cv
508.045 250.896 li
509.167 250.896 509.915 251.395 510.289 252.517 cv
529.236 305.493 li
529.983 305.493 li
529.983 252.891 li
529.983 251.644 530.607 250.896 531.979 250.896 cv
544.942 250.896 li
cp
f
1136.02 394.261 mo
928.11 453.013 li
720.204 394.261 li
720.204 196.216 li
1136.02 196.216 li
1136.02 394.261 li
cp
.454902 .741176 .207843 rgb
f
826.678 247.18 mo
828.549 247.18 829.295 248.176 828.922 249.921 cv
807.856 344.657 li
807.482 346.153 806.609 346.901 805.113 346.901 cv
792.648 346.901 li
791.153 346.901 790.28 346.153 789.906 344.657 cv
768.964 249.921 li
768.59 248.176 769.338 247.18 771.208 247.18 cv
783.051 247.18 li
784.545 247.18 785.418 247.927 785.792 249.423 cv
798.88 316.237 li
812.094 249.423 li
812.468 247.927 813.34 247.18 814.836 247.18 cv
826.678 247.18 li
cp
1 1 1 rgb
f
888.761 261.639 mo
888.761 262.886 888.263 263.758 886.767 263.758 cv
855.604 263.758 li
855.604 288.688 li
879.412 288.688 li
880.658 288.688 881.406 289.437 881.406 290.808 cv
881.406 303.148 li
881.406 304.52 880.658 305.268 879.412 305.268 cv
855.604 305.268 li
855.604 330.447 li
886.767 330.447 li
888.263 330.447 888.761 331.07 888.761 332.442 cv
888.761 344.907 li
888.761 346.153 888.263 346.901 886.767 346.901 cv
840.894 346.901 li
839.772 346.901 839.025 346.153 839.025 344.907 cv
839.025 249.174 li
839.025 247.927 839.772 247.18 840.894 247.18 cv
886.767 247.18 li
888.263 247.18 888.761 247.927 888.761 249.174 cv
888.761 261.639 li
cp
f
898.739 265.13 mo
898.739 253.412 904.972 247.18 916.688 247.18 cv
933.143 247.18 li
944.735 247.18 951.092 253.412 951.092 265.13 cv
951.092 278.093 li
951.092 279.339 950.345 280.087 949.098 280.087 cv
936.633 280.087 li
935.262 280.087 934.639 279.339 934.639 278.093 cv
934.639 268.62 li
934.639 265.379 932.894 263.634 929.653 263.634 cv
920.677 263.634 li
917.312 263.634 915.691 265.379 915.691 268.62 cv
915.691 325.461 li
915.691 328.826 917.437 330.447 920.677 330.447 cv
929.653 330.447 li
932.894 330.447 934.639 328.826 934.639 325.461 cv
934.639 308.757 li
928.157 308.757 li
926.785 308.757 926.162 308.009 926.162 306.764 cv
926.162 294.298 li
926.162 292.926 926.785 292.304 928.157 292.304 cv
949.098 292.304 li
950.345 292.304 951.092 292.926 951.092 294.298 cv
951.092 328.952 li
951.092 340.668 944.735 346.901 933.143 346.901 cv
916.688 346.901 li
904.972 346.901 898.739 340.668 898.739 328.952 cv
898.739 265.13 li
cp
f
992.607 268.993 mo
984.629 312.497 li
1000.58 312.497 li
992.607 268.993 li
cp
1009.19 346.901 mo
1008.06 346.901 1007.44 346.278 1007.19 345.156 cv
1003.7 326.957 li
981.513 326.957 li
978.147 345.156 li
977.897 346.278 977.275 346.901 976.152 346.901 cv
962.814 346.901 li
961.444 346.901 960.82 346.153 961.194 344.782 cv
981.886 248.924 li
982.136 247.678 982.884 247.18 984.006 247.18 cv
1001.33 247.18 li
1002.45 247.18 1003.2 247.678 1003.45 248.924 cv
1024.14 344.782 li
1024.39 346.153 1023.89 346.901 1022.4 346.901 cv
1009.19 346.901 li
cp
f
1085.35 247.18 mo
1086.6 247.18 1087.35 247.927 1087.35 249.174 cv
1087.35 344.907 li
1087.35 346.153 1086.6 346.901 1085.35 346.901 cv
1073.01 346.901 li
1071.89 346.901 1071.14 346.402 1070.77 345.281 cv
1051.7 292.054 li
1051.07 292.054 li
1051.07 344.907 li
1051.07 346.153 1050.45 346.901 1049.08 346.901 cv
1036.12 346.901 li
1034.87 346.901 1034.12 346.153 1034.12 344.907 cv
1034.12 249.174 li
1034.12 247.927 1034.87 247.18 1036.12 247.18 cv
1048.46 247.18 li
1049.58 247.18 1050.33 247.678 1050.7 248.8 cv
1069.65 301.777 li
1070.4 301.777 li
1070.4 249.174 li
1070.4 247.927 1071.02 247.18 1072.39 247.18 cv
1085.35 247.18 li
cp
f
2068.9 804.994 mo
1926.83 804.994 li
1926.83 585.254 li
2068.9 585.254 li
2140.3 695.125 li
2068.9 804.994 li
cp
.388235 .631373 .176471 rgb
f
1625.1 648.393 mo
2016.84 648.393 li
2016.84 868.132 li
1625.1 868.132 li
1499.49 758.262 li
1625.1 648.393 li
cp
.454902 .741176 .207843 rgb
f
2016.84 648.393 mo
1926.83 585.254 li
1926.83 648.393 li
2016.84 648.393 li
cp
.270588 .439216 .12549 rgb
f
1696.08 709.051 mo
1697.92 709.051 1698.66 710.035 1698.29 711.757 cv
1677.5 805.259 li
1677.13 806.735 1676.27 807.474 1674.79 807.474 cv
1662.49 807.474 li
1661.02 807.474 1660.15 806.735 1659.79 805.259 cv
1639.12 711.757 li
1638.75 710.035 1639.49 709.051 1641.33 709.051 cv
1653.02 709.051 li
1654.49 709.051 1655.36 709.789 1655.73 711.266 cv
1668.64 777.209 li
1681.68 711.266 li
1682.05 709.789 1682.91 709.051 1684.39 709.051 cv
1696.08 709.051 li
cp
1 1 1 rgb
f
1757.35 723.322 mo
1757.35 724.553 1756.86 725.414 1755.38 725.414 cv
1724.63 725.414 li
1724.63 750.02 li
1748.13 750.02 li
1749.36 750.02 1750.09 750.758 1750.09 752.111 cv
1750.09 764.291 li
1750.09 765.644 1749.36 766.382 1748.13 766.382 cv
1724.63 766.382 li
1724.63 791.234 li
1755.38 791.234 li
1756.86 791.234 1757.35 791.849 1757.35 793.203 cv
1757.35 805.506 li
1757.35 806.735 1756.86 807.474 1755.38 807.474 cv
1710.11 807.474 li
1709 807.474 1708.26 806.735 1708.26 805.506 cv
1708.26 711.02 li
1708.26 709.789 1709 709.051 1710.11 709.051 cv
1755.38 709.051 li
1756.86 709.051 1757.35 709.789 1757.35 711.02 cv
1757.35 723.322 li
cp
f
1767.2 726.768 mo
1767.2 715.202 1773.35 709.051 1784.92 709.051 cv
1801.16 709.051 li
1812.6 709.051 1818.87 715.202 1818.87 726.768 cv
1818.87 739.562 li
1818.87 740.792 1818.13 741.53 1816.9 741.53 cv
1804.6 741.53 li
1803.25 741.53 1802.63 740.792 1802.63 739.562 cv
1802.63 730.212 li
1802.63 727.013 1800.91 725.291 1797.71 725.291 cv
1788.85 725.291 li
1785.53 725.291 1783.93 727.013 1783.93 730.212 cv
1783.93 786.313 li
1783.93 789.634 1785.65 791.234 1788.85 791.234 cv
1797.71 791.234 li
1800.91 791.234 1802.63 789.634 1802.63 786.313 cv
1802.63 769.827 li
1796.24 769.827 li
1794.88 769.827 1794.27 769.088 1794.27 767.859 cv
1794.27 755.556 li
1794.27 754.202 1794.88 753.587 1796.24 753.587 cv
1816.9 753.587 li
1818.13 753.587 1818.87 754.202 1818.87 755.556 cv
1818.87 789.758 li
1818.87 801.322 1812.6 807.474 1801.16 807.474 cv
1784.92 807.474 li
1773.35 807.474 1767.2 801.322 1767.2 789.758 cv
1767.2 726.768 li
cp
f
1859.85 730.581 mo
1851.97 773.518 li
1867.72 773.518 li
1859.85 730.581 li
cp
1876.21 807.474 mo
1875.1 807.474 1874.49 806.858 1874.24 805.751 cv
1870.79 787.789 li
1848.9 787.789 li
1845.58 805.751 li
1845.33 806.858 1844.71 807.474 1843.61 807.474 cv
1830.44 807.474 li
1829.09 807.474 1828.47 806.735 1828.84 805.382 cv
1849.27 710.773 li
1849.51 709.543 1850.25 709.051 1851.36 709.051 cv
1868.46 709.051 li
1869.56 709.051 1870.3 709.543 1870.55 710.773 cv
1890.97 805.382 li
1891.22 806.735 1890.73 807.474 1889.25 807.474 cv
1876.21 807.474 li
cp
f
1951.38 709.051 mo
1952.62 709.051 1953.35 709.789 1953.35 711.02 cv
1953.35 805.506 li
1953.35 806.735 1952.62 807.474 1951.38 807.474 cv
1939.21 807.474 li
1938.1 807.474 1937.36 806.981 1936.99 805.875 cv
1918.17 753.341 li
1917.55 753.341 li
1917.55 805.506 li
1917.55 806.735 1916.94 807.474 1915.58 807.474 cv
1902.79 807.474 li
1901.56 807.474 1900.82 806.735 1900.82 805.506 cv
1900.82 711.02 li
1900.82 709.789 1901.56 709.051 1902.79 709.051 cv
1914.97 709.051 li
1916.08 709.051 1916.81 709.543 1917.18 710.65 cv
1935.88 762.937 li
1936.62 762.937 li
1936.62 711.02 li
1936.62 709.789 1937.24 709.051 1938.59 709.051 cv
1951.38 709.051 li
cp
f
1711.86 1485.62 mo
1782.71 1485.62 li
1782.71 1468.39 1796.68 1454.42 1813.91 1454.42 cv
1621.37 1454.42 li
1604.14 1454.42 1590.17 1468.39 1590.17 1485.62 cv
1590.17 1511.83 li
1711.86 1511.83 li
1711.86 1485.62 li
cp
.270588 .439216 .12549 rgb
f
1843.7 1863.67 mo
1843.7 1485.62 li
1843.7 1468.39 1829.73 1454.42 1812.5 1454.42 cv
1619.96 1454.42 li
1637.19 1454.42 1651.16 1468.39 1651.16 1485.62 cv
1651.16 1863.67 li
1750.56 1901.28 li
1843.7 1863.67 li
cp
.454902 .741176 .207843 rgb
f
1704.19 1777.46 mo
1704.19 1775.75 1705.1 1775.07 1706.7 1775.41 cv
1793.2 1794.65 li
1794.57 1794.99 1795.25 1795.79 1795.25 1797.16 cv
1795.25 1808.54 li
1795.25 1809.9 1794.57 1810.7 1793.2 1811.04 cv
1706.7 1830.16 li
1705.1 1830.51 1704.19 1829.82 1704.19 1828.12 cv
1704.19 1817.3 li
1704.19 1815.94 1704.88 1815.14 1706.24 1814.8 cv
1767.25 1802.85 li
1706.24 1790.78 li
1704.88 1790.44 1704.19 1789.64 1704.19 1788.28 cv
1704.19 1777.46 li
cp
1 1 1 rgb
f
1717.4 1720.77 mo
1718.54 1720.77 1719.33 1721.23 1719.33 1722.59 cv
1719.33 1751.05 li
1742.1 1751.05 li
1742.1 1729.31 li
1742.1 1728.17 1742.78 1727.49 1744.03 1727.49 cv
1755.3 1727.49 li
1756.55 1727.49 1757.24 1728.17 1757.24 1729.31 cv
1757.24 1751.05 li
1780.23 1751.05 li
1780.23 1722.59 li
1780.23 1721.23 1780.8 1720.77 1782.05 1720.77 cv
1793.43 1720.77 li
1794.57 1720.77 1795.25 1721.23 1795.25 1722.59 cv
1795.25 1764.48 li
1795.25 1765.51 1794.57 1766.19 1793.43 1766.19 cv
1706.01 1766.19 li
1704.88 1766.19 1704.19 1765.51 1704.19 1764.48 cv
1704.19 1722.59 li
1704.19 1721.23 1704.88 1720.77 1706.01 1720.77 cv
1717.4 1720.77 li
cp
f
1720.58 1711.66 mo
1709.88 1711.66 1704.19 1705.97 1704.19 1695.27 cv
1704.19 1680.25 li
1704.19 1669.66 1709.88 1663.85 1720.58 1663.85 cv
1732.42 1663.85 li
1733.56 1663.85 1734.24 1664.54 1734.24 1665.67 cv
1734.24 1677.06 li
1734.24 1678.31 1733.56 1678.88 1732.42 1678.88 cv
1723.77 1678.88 li
1720.81 1678.88 1719.22 1680.47 1719.22 1683.43 cv
1719.22 1691.63 li
1719.22 1694.7 1720.81 1696.18 1723.77 1696.18 cv
1775.67 1696.18 li
1778.75 1696.18 1780.23 1694.59 1780.23 1691.63 cv
1780.23 1683.43 li
1780.23 1680.47 1778.75 1678.88 1775.67 1678.88 cv
1760.42 1678.88 li
1760.42 1684.8 li
1760.42 1686.05 1759.74 1686.62 1758.6 1686.62 cv
1747.22 1686.62 li
1745.97 1686.62 1745.4 1686.05 1745.4 1684.8 cv
1745.4 1665.67 li
1745.4 1664.54 1745.97 1663.85 1747.22 1663.85 cv
1778.86 1663.85 li
1789.56 1663.85 1795.25 1669.66 1795.25 1680.25 cv
1795.25 1695.27 li
1795.25 1705.97 1789.56 1711.66 1778.86 1711.66 cv
1720.58 1711.66 li
cp
f
1724.11 1625.95 mo
1763.84 1633.23 li
1763.84 1618.66 li
1724.11 1625.95 li
cp
1795.25 1610.81 mo
1795.25 1611.83 1794.68 1612.4 1793.66 1612.63 cv
1777.04 1615.82 li
1777.04 1636.08 li
1793.66 1639.15 li
1794.68 1639.38 1795.25 1639.95 1795.25 1640.97 cv
1795.25 1653.15 li
1795.25 1654.4 1794.57 1654.97 1793.32 1654.63 cv
1705.79 1635.73 li
1704.65 1635.51 1704.19 1634.82 1704.19 1633.8 cv
1704.19 1617.98 li
1704.19 1616.95 1704.65 1616.27 1705.79 1616.04 cv
1793.32 1597.15 li
1794.57 1596.92 1795.25 1597.38 1795.25 1598.74 cv
1795.25 1610.81 li
cp
f
1704.19 1541.25 mo
1704.19 1540.12 1704.88 1539.43 1706.01 1539.43 cv
1793.43 1539.43 li
1794.57 1539.43 1795.25 1540.12 1795.25 1541.25 cv
1795.25 1552.52 li
1795.25 1553.55 1794.8 1554.23 1793.77 1554.57 cv
1745.17 1571.99 li
1745.17 1572.56 li
1793.43 1572.56 li
1794.57 1572.56 1795.25 1573.13 1795.25 1574.38 cv
1795.25 1586.21 li
1795.25 1587.35 1794.57 1588.04 1793.43 1588.04 cv
1706.01 1588.04 li
1704.88 1588.04 1704.19 1587.35 1704.19 1586.21 cv
1704.19 1574.95 li
1704.19 1573.92 1704.65 1573.24 1705.67 1572.9 cv
1754.05 1555.6 li
1754.05 1554.91 li
1706.01 1554.91 li
1704.88 1554.91 1704.19 1554.34 1704.19 1553.09 cv
1704.19 1541.25 li
cp
f
506.652 1531.2 mo
443.481 1532.67 377.663 1541.2 329.113 1558.63 cv
285.204 1574.39 255.419 1597.43 254.492 1629.14 cv
254.492 1669.42 254.492 1735.13 254.492 1770.47 cv
270.146 1732.44 301.602 1705.74 342.609 1687.51 cv
381.774 1670.1 429.651 1660.42 480.797 1655.98 cv
466.289 1632.18 451.778 1597.89 451.778 1597.89 cv
451.778 1597.89 480 1558.61 506.652 1531.2 cv
cp
.270588 .439216 .12549 rgb
f
812.116 1846.3 mo
812.116 1846.3 749.937 1856.73 667.015 1863.62 cv
510.65 1876.62 280.529 1877.05 254.492 1771.31 cv
254.492 1731.02 254.492 1665.31 254.492 1629.98 cv
267.013 1747.69 481.342 1754.73 660.991 1739.51 cv
710.856 1735.29 758.049 1729.35 797.514 1723.58 cv
823.854 1749.77 853.656 1784.44 853.656 1784.44 cv
812.116 1846.3 li
cp
.454902 .741176 .207843 rgb
f
475.371 1765.23 mo
476.922 1765.29 477.51 1766.14 477.146 1767.58 cv
470.264 1793.52 463.12 1819.38 455.709 1845.17 cv
455.319 1846.39 454.522 1846.97 453.209 1846.91 cv
448.834 1846.68 446.647 1846.56 442.273 1846.3 cv
440.961 1846.22 440.233 1845.55 439.98 1844.3 cv
435.515 1817.84 431.319 1791.35 427.39 1764.81 cv
427.186 1763.34 427.866 1762.56 429.415 1762.68 cv
433.336 1762.96 435.297 1763.09 439.221 1763.35 cv
440.459 1763.43 441.142 1764.09 441.374 1765.35 cv
443.857 1784 446.45 1802.63 449.153 1821.25 cv
453.943 1803.05 458.623 1784.82 463.194 1766.56 cv
463.563 1765.34 464.316 1764.76 465.556 1764.81 cv
469.481 1765 471.445 1765.08 475.371 1765.23 cv
cp
1 1 1 rgb
f
526.819 1778.28 mo
526.816 1779.32 526.397 1780.04 525.145 1780.03 cv
514.707 1780 509.487 1779.93 499.05 1779.7 cv
498.868 1787.96 498.777 1792.08 498.594 1800.34 cv
506.685 1800.52 510.73 1800.58 518.821 1800.65 cv
519.88 1800.65 520.512 1801.28 520.504 1802.41 cv
520.476 1806.5 520.462 1808.55 520.435 1812.63 cv
520.427 1813.77 519.781 1814.39 518.711 1814.38 cv
510.543 1814.31 506.459 1814.25 498.292 1814.07 cv
498.107 1822.41 498.015 1826.58 497.831 1834.92 cv
508.676 1835.16 514.099 1835.23 524.945 1835.27 cv
526.246 1835.27 526.678 1835.79 526.676 1836.93 cv
526.666 1841.06 526.66 1843.12 526.65 1847.25 cv
526.647 1848.28 526.209 1848.9 524.895 1848.9 cv
511.466 1848.85 498.038 1848.62 484.615 1848.21 cv
483.631 1848.17 482.994 1847.53 483.027 1846.5 cv
483.869 1820.08 484.712 1793.67 485.554 1767.25 cv
485.587 1766.22 486.227 1765.62 487.157 1765.65 cv
499.833 1766.04 512.513 1766.25 525.195 1766.3 cv
526.435 1766.31 526.847 1766.93 526.844 1767.96 cv
526.834 1772.09 526.829 1774.15 526.819 1778.28 cv
cp
f
535.174 1781.17 mo
535.141 1771.46 540.292 1766.31 550.006 1766.17 cv
555.463 1766.09 558.192 1766.04 563.648 1765.91 cv
573.257 1765.68 578.703 1770.64 579.037 1780.34 cv
579.185 1784.63 579.259 1786.78 579.407 1791.07 cv
579.442 1792.1 578.833 1792.74 577.779 1792.78 cv
573.566 1792.92 571.459 1792.98 567.246 1793.09 cv
566.088 1793.12 565.546 1792.51 565.52 1791.48 cv
565.443 1788.34 565.404 1786.77 565.327 1783.64 cv
565.26 1780.95 563.764 1779.55 561.051 1779.6 cv
558.046 1779.67 556.543 1779.7 553.538 1779.75 cv
550.72 1779.79 549.383 1781.26 549.419 1783.94 cv
549.631 1799.63 549.842 1815.32 550.054 1831.02 cv
550.092 1833.8 551.628 1835.13 554.447 1835.08 cv
557.57 1835.03 559.132 1835 562.254 1834.93 cv
565.074 1834.87 566.558 1833.49 566.489 1830.7 cv
566.353 1825.17 566.284 1822.4 566.147 1816.87 cv
563.92 1816.93 562.806 1816.95 560.579 1817 cv
559.4 1817.02 558.853 1816.41 558.832 1815.38 cv
558.751 1811.25 558.71 1809.19 558.629 1805.06 cv
558.606 1803.92 559.127 1803.4 560.294 1803.37 cv
567.424 1803.22 570.988 1803.13 578.116 1802.89 cv
579.176 1802.86 579.83 1803.35 579.869 1804.48 cv
580.198 1814.05 580.528 1823.61 580.857 1833.17 cv
581.191 1842.87 575.791 1848.25 565.614 1848.49 cv
559.837 1848.63 556.948 1848.68 551.169 1848.76 cv
540.882 1848.91 535.391 1843.74 535.357 1834.03 cv
535.296 1816.41 535.235 1798.79 535.174 1781.17 cv
cp
f
613.98 1781.91 mo
612.458 1794.04 610.878 1806.16 609.244 1818.27 cv
614.733 1817.97 617.477 1817.81 622.963 1817.46 cv
619.914 1805.62 616.919 1793.77 613.98 1781.91 cv
cp
632.316 1845.4 mo
631.332 1845.46 630.75 1844.99 630.469 1844.07 cv
628.84 1838.14 628.031 1835.17 626.426 1829.24 cv
618.734 1829.74 614.887 1829.97 607.19 1830.37 cv
606.339 1836.45 605.908 1839.5 605.032 1845.58 cv
604.859 1846.52 604.34 1847.06 603.354 1847.11 cv
598.675 1847.34 596.335 1847.44 591.654 1847.64 cv
590.453 1847.69 589.881 1847.09 590.162 1845.94 cv
595.081 1819.28 599.73 1792.57 604.113 1765.81 cv
604.266 1764.77 604.864 1764.32 605.792 1764.27 cv
611.532 1763.96 614.401 1763.79 620.137 1763.43 cv
621.065 1763.37 621.712 1763.74 621.985 1764.75 cv
629.491 1790.81 637.255 1816.78 645.283 1842.68 cv
645.588 1843.8 645.201 1844.45 643.891 1844.55 cv
639.262 1844.91 636.947 1845.08 632.316 1845.4 cv
cp
f
689.567 1757.23 mo
690.596 1757.11 691.284 1757.65 691.403 1758.68 cv
694.438 1784.94 697.473 1811.19 700.508 1837.45 cv
700.626 1838.48 700.044 1839.17 698.955 1839.29 cv
694.644 1839.78 692.488 1840.02 688.174 1840.48 cv
687.194 1840.59 686.496 1840.25 686.073 1839.36 cv
678.981 1825.36 672.065 1811.28 665.274 1797.13 cv
665.063 1797.15 664.957 1797.16 664.745 1797.18 cv
666.109 1811.71 667.473 1826.24 668.837 1840.77 cv
668.934 1841.79 668.446 1842.46 667.247 1842.57 cv
662.71 1842.99 660.441 1843.2 655.902 1843.58 cv
654.811 1843.67 654.105 1843.11 654.019 1842.08 cv
651.813 1815.74 649.606 1789.4 647.4 1763.07 cv
647.314 1762.04 647.88 1761.37 648.911 1761.28 cv
652.991 1760.93 655.031 1760.75 659.109 1760.38 cv
660.036 1760.29 660.692 1760.64 661.089 1761.54 cv
667.695 1775.63 674.425 1789.67 681.33 1803.63 cv
681.585 1803.6 681.713 1803.58 681.968 1803.56 cv
680.445 1789.11 678.922 1774.67 677.399 1760.23 cv
677.292 1759.2 677.741 1758.53 678.872 1758.41 cv
683.151 1757.95 685.291 1757.72 689.567 1757.23 cv
cp
f
2209.19 1901.04 mo
2121.75 1851.59 li
2034.31 1901.04 li
2034.31 1469.78 li
2209.19 1469.78 li
2209.19 1901.04 li
cp
.454902 .741176 .207843 rgb
f
2034.31 1557.58 mo
1978.88 1557.58 li
2034.31 1469.78 li
2034.31 1557.58 li
cp
.270588 .439216 .12549 rgb
f
2209.19 1557.58 mo
2264.62 1557.58 li
2209.19 1469.78 li
2209.19 1557.58 li
cp
f
2079.05 1752.47 mo
2079.05 1750.87 2079.9 1750.23 2081.39 1750.55 cv
2162.54 1768.59 li
2163.82 1768.91 2164.46 1769.66 2164.46 1770.94 cv
2164.46 1781.62 li
2164.46 1782.9 2163.82 1783.64 2162.54 1783.96 cv
2081.39 1801.9 li
2079.9 1802.22 2079.05 1801.58 2079.05 1799.98 cv
2079.05 1789.84 li
2079.05 1788.56 2079.69 1787.81 2080.97 1787.49 cv
2138.2 1776.28 li
2080.97 1764.96 li
2079.69 1764.64 2079.05 1763.89 2079.05 1762.61 cv
2079.05 1752.47 li
cp
1 1 1 rgb
f
2091.43 1699.29 mo
2092.5 1699.29 2093.25 1699.72 2093.25 1701 cv
2093.25 1727.69 li
2114.6 1727.69 li
2114.6 1707.3 li
2114.6 1706.23 2115.24 1705.59 2116.42 1705.59 cv
2126.99 1705.59 li
2128.16 1705.59 2128.8 1706.23 2128.8 1707.3 cv
2128.8 1727.69 li
2150.37 1727.69 li
2150.37 1701 li
2150.37 1699.72 2150.9 1699.29 2152.08 1699.29 cv
2162.75 1699.29 li
2163.82 1699.29 2164.46 1699.72 2164.46 1701 cv
2164.46 1740.29 li
2164.46 1741.25 2163.82 1741.89 2162.75 1741.89 cv
2080.75 1741.89 li
2079.69 1741.89 2079.05 1741.25 2079.05 1740.29 cv
2079.05 1701 li
2079.05 1699.72 2079.69 1699.29 2080.75 1699.29 cv
2091.43 1699.29 li
cp
f
2094.42 1690.75 mo
2084.38 1690.75 2079.05 1685.41 2079.05 1675.37 cv
2079.05 1661.28 li
2079.05 1651.35 2084.38 1645.9 2094.42 1645.9 cv
2105.53 1645.9 li
2106.59 1645.9 2107.23 1646.54 2107.23 1647.61 cv
2107.23 1658.29 li
2107.23 1659.46 2106.59 1660 2105.53 1660 cv
2097.41 1660 li
2094.63 1660 2093.14 1661.49 2093.14 1664.27 cv
2093.14 1671.96 li
2093.14 1674.84 2094.63 1676.23 2097.41 1676.23 cv
2146.1 1676.23 li
2148.98 1676.23 2150.37 1674.73 2150.37 1671.96 cv
2150.37 1664.27 li
2150.37 1661.49 2148.98 1660 2146.1 1660 cv
2131.79 1660 li
2131.79 1665.55 li
2131.79 1666.72 2131.15 1667.26 2130.08 1667.26 cv
2119.4 1667.26 li
2118.23 1667.26 2117.7 1666.72 2117.7 1665.55 cv
2117.7 1647.61 li
2117.7 1646.54 2118.23 1645.9 2119.4 1645.9 cv
2149.09 1645.9 li
2159.12 1645.9 2164.46 1651.35 2164.46 1661.28 cv
2164.46 1675.37 li
2164.46 1685.41 2159.12 1690.75 2149.09 1690.75 cv
2094.42 1690.75 li
cp
f
2097.73 1610.35 mo
2134.99 1617.18 li
2134.99 1603.51 li
2097.73 1610.35 li
cp
2164.46 1596.14 mo
2164.46 1597.11 2163.93 1597.64 2162.97 1597.85 cv
2147.38 1600.84 li
2147.38 1619.85 li
2162.97 1622.73 li
2163.93 1622.95 2164.46 1623.48 2164.46 1624.44 cv
2164.46 1635.86 li
2164.46 1637.04 2163.82 1637.57 2162.65 1637.25 cv
2080.54 1619.53 li
2079.47 1619.31 2079.05 1618.67 2079.05 1617.71 cv
2079.05 1602.87 li
2079.05 1601.91 2079.47 1601.27 2080.54 1601.06 cv
2162.65 1583.33 li
2163.82 1583.12 2164.46 1583.55 2164.46 1584.83 cv
2164.46 1596.14 li
cp
f
2079.05 1530.9 mo
2079.05 1529.84 2079.69 1529.2 2080.75 1529.2 cv
2162.75 1529.2 li
2163.82 1529.2 2164.46 1529.84 2164.46 1530.9 cv
2164.46 1541.47 li
2164.46 1542.44 2164.03 1543.08 2163.07 1543.4 cv
2117.48 1559.73 li
2117.48 1560.27 li
2162.75 1560.27 li
2163.82 1560.27 2164.46 1560.8 2164.46 1561.97 cv
2164.46 1573.08 li
2164.46 1574.15 2163.82 1574.79 2162.75 1574.79 cv
2080.75 1574.79 li
2079.69 1574.79 2079.05 1574.15 2079.05 1573.08 cv
2079.05 1562.51 li
2079.05 1561.55 2079.47 1560.91 2080.43 1560.59 cv
2125.81 1544.36 li
2125.81 1543.72 li
2080.75 1543.72 li
2079.69 1543.72 2079.05 1543.18 2079.05 1542.01 cv
2079.05 1530.9 li
cp
f
2416.32 854.043 mo
2332.09 866.937 li
2260.88 674.895 li
2342.89 684.349 li
2416.32 854.043 li
cp
.388235 .631373 .176471 rgb
f
2610.42 857.776 mo
2693.99 881.338 li
2814.5 626.454 li
2695.05 653.927 li
2610.42 857.776 li
cp
f
2786.97 577.577 mo
2658.84 838.98 li
2610.42 857.776 li
2703.95 627.589 li
2786.97 577.577 li
cp
.270588 .439216 .12549 rgb
f
2293.72 626.454 mo
2342.89 684.349 li
2416.32 854.043 li
2354.12 811.023 li
2293.72 626.454 li
cp
f
2283.75 596.015 mo
2354.12 811.023 li
2658.84 838.98 li
2786.97 577.577 li
2283.75 596.015 li
cp
.454902 .741176 .207843 rgb
f
2421.66 656.224 mo
2423.39 656.153 2424.05 657.034 2423.66 658.636 cv
2402.65 743.992 li
2402.29 745.312 2401.51 745.941 2400.2 745.876 cv
2389.23 745.333 li
2387.91 745.268 2387.15 744.572 2386.84 743.242 cv
2368.39 660.746 li
2368.05 659.256 2368.74 658.37 2370.46 658.299 cv
2381.39 657.856 li
2382.77 657.8 2383.57 658.422 2383.91 659.718 cv
2395.11 718.44 li
2408.16 658.781 li
2408.53 657.426 2409.35 656.723 2410.73 656.667 cv
2421.66 656.224 li
cp
1 1 1 rgb
f
2478.22 667.765 mo
2478.15 668.961 2477.65 669.81 2476.28 669.845 cv
2447.74 670.592 li
2446.81 693.826 li
2468.36 693.737 li
2469.48 693.732 2470.13 694.442 2470.06 695.75 cv
2469.46 707.508 li
2469.39 708.815 2468.68 709.521 2467.56 709.508 cv
2446.19 709.276 li
2445.24 732.742 li
2472.89 733.683 li
2474.21 733.729 2474.62 734.341 2474.55 735.656 cv
2473.91 747.609 li
2473.84 748.804 2473.37 749.5 2472.05 749.435 cv
2431.68 747.436 li
2430.7 747.387 2430.06 746.667 2430.1 745.522 cv
2433 657.594 li
2433.04 656.449 2433.75 655.733 2434.79 655.691 cv
2477.13 653.975 li
2478.51 653.919 2478.93 654.618 2478.86 655.813 cv
2478.22 667.765 li
cp
f
2487.17 670.885 mo
2487.83 659.554 2493.93 653.293 2504.75 652.855 cv
2519.93 652.239 li
2530.63 651.806 2536.01 657.86 2535.09 669.688 cv
2534.07 682.775 li
2533.97 684.033 2533.23 684.796 2532.1 684.81 cv
2520.77 684.943 li
2519.52 684.958 2519.01 684.219 2519.1 682.978 cv
2519.78 673.541 li
2520.01 670.313 2518.54 668.616 2515.57 668.694 cv
2507.35 668.91 li
2504.27 668.991 2502.67 670.742 2502.47 673.92 cv
2498.86 729.667 li
2498.65 732.968 2500.09 734.61 2502.97 734.708 cv
2510.93 734.979 li
2513.8 735.077 2515.47 733.516 2515.71 730.163 cv
2516.91 713.524 li
2511.09 713.442 li
2509.87 713.425 2509.36 712.677 2509.44 711.444 cv
2510.29 699.113 li
2510.38 697.756 2510.99 697.14 2512.23 697.139 cv
2531.15 697.123 li
2532.27 697.122 2532.9 697.75 2532.79 699.134 cv
2530.07 734.118 li
2529.14 745.945 2523.06 751.96 2512.86 751.456 cv
2498.38 750.738 li
2488.07 750.228 2482.93 743.929 2483.59 732.6 cv
2487.17 670.885 li
cp
f
2572.71 672.771 mo
2561.37 718.031 li
2575.65 718.28 li
2572.71 672.771 li
cp
2579.77 754.769 mo
2578.78 754.72 2578.3 754.035 2578.2 752.841 cv
2576.97 733.544 li
2557.25 732.937 li
2552.62 751.617 li
2552.29 752.763 2551.69 753.378 2550.7 753.33 cv
2538.97 752.749 li
2537.76 752.688 2537.27 751.9 2537.72 750.521 cv
2564.76 652.22 li
2565.11 650.922 2565.85 650.378 2566.88 650.336 cv
2582.87 649.688 li
2583.91 649.646 2584.55 650.142 2584.65 651.444 cv
2593.17 753.156 li
2593.24 754.632 2592.71 755.41 2591.4 755.345 cv
2579.77 754.769 li
cp
f
2660.43 646.543 mo
2661.58 646.497 2662.17 647.306 2662 648.703 cv
2648.83 755.941 li
2648.66 757.337 2647.89 758.143 2646.8 758.088 cv
2635.94 757.551 li
2634.95 757.502 2634.36 756.917 2634.17 755.66 cv
2623.88 696.771 li
2623.32 696.771 li
2616.88 754.42 li
2616.72 755.779 2616.08 756.567 2614.88 756.508 cv
2603.47 755.943 li
2602.37 755.888 2601.8 755.05 2601.94 753.708 cv
2612.91 650.609 li
2613.06 649.266 2613.83 648.433 2614.98 648.386 cv
2626.37 647.924 li
2627.41 647.882 2628.04 648.398 2628.25 649.607 cv
2638.84 707.505 li
2639.51 707.51 li
2646.36 649.31 li
2646.53 647.93 2647.2 647.08 2648.46 647.028 cv
2660.43 646.543 li
cp
f
1542.04 535.056 mo
1497.74 504.955 li
1455.25 537.555 li
1425.84 492.792 li
1374.1 506.65 li
1364.06 454.041 li
1310.96 447.045 li
1321.82 394.598 li
1275.44 367.814 li
1305.54 323.515 li
1272.94 281.021 li
1317.71 251.613 li
1303.85 199.878 li
1356.46 189.838 li
1363.45 136.739 li
1415.9 147.596 li
1442.68 101.215 li
1486.98 131.317 li
1529.48 98.7158 li
1558.88 143.479 li
1610.62 129.621 li
1620.66 182.231 li
1673.76 189.226 li
1662.9 241.673 li
1709.28 268.457 li
1679.18 312.756 li
1711.78 355.25 li
1667.02 384.658 li
1680.88 436.393 li
1628.27 446.433 li
1621.27 499.533 li
1568.82 488.675 li
1542.04 535.056 li
cp
.454902 .741176 .207843 rgb
f
1410.17 341.988 mo
1411.59 342.116 1412.09 342.918 1411.69 344.212 cv
1404.15 367.638 1396.27 390.926 1388.03 414.116 cv
1387.6 415.212 1386.82 415.699 1385.59 415.564 cv
1381.48 415.114 1379.43 414.877 1375.32 414.381 cv
1374.09 414.233 1373.44 413.581 1373.27 412.417 cv
1370.56 387.963 1368.2 363.496 1366.21 338.974 cv
1366.11 337.623 1366.78 336.956 1368.19 337.154 cv
1371.77 337.655 1373.56 337.896 1377.14 338.36 cv
1378.27 338.506 1378.86 339.153 1379 340.314 cv
1380.23 357.516 1381.6 374.697 1383.12 391.875 cv
1388.53 375.496 1393.81 359.08 1398.94 342.611 cv
1399.34 341.512 1400.06 341.016 1401.2 341.13 cv
1404.79 341.492 1406.58 341.664 1410.17 341.988 cv
cp
1 1 1 rgb
f
1456.94 355.9 mo
1456.9 356.846 1456.5 357.494 1455.34 357.452 cv
1445.73 357.099 1440.92 356.856 1431.32 356.238 cv
1430.83 363.788 1430.59 367.563 1430.1 375.113 cv
1437.6 375.596 1441.35 375.798 1448.85 376.123 cv
1449.83 376.165 1450.4 376.756 1450.36 377.796 cv
1450.2 381.538 1450.12 383.408 1449.97 387.15 cv
1449.93 388.19 1449.31 388.732 1448.31 388.689 cv
1440.7 388.36 1436.89 388.156 1429.29 387.666 cv
1428.8 395.292 1428.55 399.104 1428.06 406.73 cv
1438.23 407.385 1443.31 407.642 1453.49 408.015 cv
1454.71 408.06 1455.1 408.546 1455.06 409.586 cv
1454.93 413.367 1454.86 415.257 1454.73 419.038 cv
1454.7 419.982 1454.27 420.536 1453.03 420.491 cv
1440.39 420.054 1427.72 419.331 1415.11 418.326 cv
1414.18 418.254 1413.61 417.639 1413.68 416.696 cv
1415.59 392.561 1417.51 368.426 1419.42 344.29 cv
1419.49 343.347 1420.11 342.827 1420.96 342.893 cv
1432.54 343.816 1444.19 344.481 1455.8 344.882 cv
1456.94 344.924 1457.3 345.503 1457.27 346.449 cv
1457.13 350.229 1457.07 352.12 1456.94 355.9 cv
cp
f
1464.55 358.782 mo
1464.78 349.895 1469.64 345.324 1478.56 345.415 cv
1483.56 345.465 1486.07 345.472 1491.07 345.45 cv
1499.89 345.411 1504.82 350.008 1505 358.896 cv
1505.08 362.83 1505.12 364.797 1505.2 368.73 cv
1505.22 369.675 1504.65 370.255 1503.67 370.273 cv
1499.77 370.346 1497.82 370.371 1493.92 370.401 cv
1492.84 370.409 1492.35 369.844 1492.35 368.898 cv
1492.33 366.023 1492.32 364.586 1492.3 361.711 cv
1492.29 359.252 1490.94 357.938 1488.43 357.942 cv
1485.66 357.946 1484.28 357.942 1481.51 357.924 cv
1478.91 357.907 1477.65 359.214 1477.62 361.672 cv
1477.46 376.047 1477.3 390.421 1477.14 404.795 cv
1477.12 407.349 1478.53 408.597 1481.17 408.614 cv
1484.11 408.633 1485.57 408.637 1488.5 408.633 cv
1491.15 408.629 1492.57 407.389 1492.55 404.836 cv
1492.52 399.767 1492.51 397.232 1492.48 392.163 cv
1490.4 392.175 1489.36 392.178 1487.28 392.178 cv
1486.18 392.178 1485.68 391.609 1485.68 390.664 cv
1485.69 386.881 1485.69 384.989 1485.7 381.207 cv
1485.7 380.166 1486.2 379.695 1487.28 379.695 cv
1493.91 379.694 1497.22 379.664 1503.84 379.54 cv
1504.83 379.522 1505.43 379.982 1505.45 381.022 cv
1505.67 391.537 1505.77 396.794 1505.99 407.309 cv
1506.17 416.196 1501 421.066 1491.41 421.109 cv
1485.96 421.133 1483.24 421.125 1477.79 421.07 cv
1468.09 420.972 1463.06 416.074 1463.29 407.188 cv
1463.71 391.052 1464.13 374.917 1464.55 358.782 cv
cp
f
1537.23 360.579 mo
1535.51 373.901 1534.61 380.561 1532.7 393.876 cv
1537.83 393.618 1540.4 393.472 1545.52 393.142 cv
1542.11 380.131 1540.45 373.618 1537.23 360.579 cv
cp
1554.31 418.705 mo
1553.38 418.771 1552.83 418.336 1552.57 417.501 cv
1551.03 412.073 1550.27 409.357 1548.76 403.922 cv
1541.55 404.407 1537.94 404.614 1530.72 404.956 cv
1529.88 410.525 1529.46 413.309 1528.59 418.876 cv
1528.42 419.735 1527.93 420.231 1527 420.271 cv
1522.59 420.459 1520.38 420.54 1515.97 420.676 cv
1514.83 420.711 1514.3 420.158 1514.58 419.109 cv
1519.48 394.734 1524.01 370.313 1528.2 345.806 cv
1528.34 344.852 1528.89 344.447 1529.75 344.405 cv
1535.01 344.143 1537.64 343.992 1542.91 343.65 cv
1543.76 343.595 1544.35 343.934 1544.61 344.865 cv
1551.57 368.733 1558.87 392.475 1566.52 416.13 cv
1566.82 417.149 1566.46 417.75 1565.22 417.854 cv
1560.86 418.22 1558.67 418.39 1554.31 418.705 cv
cp
f
1606.55 337.117 mo
1607.5 336.985 1608.14 337.466 1608.27 338.403 cv
1611.69 362.372 1615.1 386.342 1618.51 410.312 cv
1618.64 411.247 1618.11 411.897 1617.08 412.041 cv
1613.03 412.611 1611 412.884 1606.94 413.41 cv
1606.01 413.529 1605.35 413.232 1604.93 412.427 cv
1598.03 399.775 1591.33 387.014 1584.83 374.148 cv
1584.64 374.169 1584.54 374.18 1584.34 374.202 cv
1585.8 387.489 1587.25 400.776 1588.71 414.063 cv
1588.81 415.003 1588.36 415.624 1587.23 415.746 cv
1582.96 416.206 1580.82 416.424 1576.54 416.835 cv
1575.51 416.934 1574.84 416.427 1574.75 415.486 cv
1572.48 391.382 1570.21 367.278 1567.93 343.174 cv
1567.84 342.232 1568.36 341.614 1569.3 341.523 cv
1573.04 341.164 1574.91 340.974 1578.65 340.573 cv
1579.5 340.481 1580.11 340.796 1580.48 341.611 cv
1586.75 354.441 1593.21 367.172 1599.88 379.797 cv
1600.11 379.768 1600.23 379.752 1600.47 379.722 cv
1598.79 366.525 1597.12 353.328 1595.44 340.13 cv
1595.32 339.192 1595.72 338.569 1596.76 338.436 cv
1600.68 337.931 1602.64 337.667 1606.55 337.117 cv
cp
f
1397.27 225.754 mo
1398.38 225.627 1399.12 226.153 1399.23 227.156 cv
1402.12 252.805 1405 278.454 1407.89 304.103 cv
1408 305.104 1407.47 305.773 1406.46 305.889 cv
1402.27 306.369 1400.18 306.623 1396.01 307.161 cv
1394.9 307.304 1394.32 306.77 1394.19 305.771 cv
1391.43 284.71 1388.67 263.65 1385.91 242.589 cv
1383.25 243.264 1381.92 243.606 1379.26 244.303 cv
1377.87 244.7 1376.9 244.125 1376.72 242.828 cv
1376.17 238.995 1375.9 237.079 1375.36 233.246 cv
1375.17 231.948 1375.73 231.154 1377.16 230.853 cv
1385.17 228.716 1389.19 227.696 1397.27 225.754 cv
cp
f
1441.57 289.655 mo
1444.24 289.478 1445.6 288.085 1445.43 285.368 cv
1444.48 269.87 1443.54 254.372 1442.59 238.873 cv
1442.43 236.257 1440.8 234.938 1437.95 235.128 cv
1435.4 235.298 1434.12 235.388 1431.57 235.577 cv
1428.71 235.789 1427.29 237.322 1427.5 239.935 cv
1428.73 255.413 1429.96 270.892 1431.2 286.37 cv
1431.41 289.083 1432.95 290.272 1435.62 290.074 cv
1438 289.897 1439.19 289.813 1441.57 289.655 cv
cp
1412.72 238.715 mo
1411.8 229.282 1416.88 223.673 1427.37 222.854 cv
1432.37 222.462 1434.87 222.286 1439.88 221.97 cv
1450.38 221.308 1456.19 226.146 1456.6 235.615 cv
1457.36 252.806 1458.11 269.997 1458.86 287.188 cv
1459.27 296.655 1454.44 301.87 1444.96 302.469 cv
1440.44 302.754 1438.18 302.914 1433.66 303.267 cv
1424.18 304.008 1418.66 299.525 1417.73 290.093 cv
1416.06 272.967 1414.39 255.841 1412.72 238.715 cv
cp
f
1492.95 287.962 mo
1495.63 287.964 1497.07 286.665 1497.09 283.943 cv
1497.18 268.416 1497.27 252.889 1497.36 237.362 cv
1497.38 234.741 1495.85 233.317 1492.98 233.316 cv
1490.43 233.314 1489.15 233.318 1486.6 233.337 cv
1483.73 233.358 1482.21 234.792 1482.24 237.413 cv
1482.44 252.939 1482.63 268.465 1482.83 283.991 cv
1482.86 286.713 1484.32 288.002 1486.99 287.982 cv
1489.38 287.965 1490.57 287.961 1492.95 287.962 cv
cp
1467.59 235.208 mo
1467.31 225.734 1472.74 220.478 1483.26 220.361 cv
1488.27 220.305 1490.78 220.296 1495.79 220.315 cv
1506.3 220.356 1511.78 225.573 1511.56 235.048 cv
1511.16 252.251 1510.76 269.454 1510.37 286.656 cv
1510.15 296.13 1504.98 301.011 1495.48 300.974 cv
1490.95 300.957 1488.68 300.965 1484.16 301.015 cv
1474.65 301.121 1469.45 296.278 1469.16 286.806 cv
1468.64 269.606 1468.12 252.407 1467.59 235.208 cv
cp
f
1578.27 289.028 mo
1577.92 292.115 1580.34 295.077 1583.7 295.479 cv
1586.73 295.842 1589.89 293.546 1590.28 290.465 cv
1590.7 287.17 1588.18 284.148 1585.1 283.78 cv
1581.69 283.372 1578.64 285.728 1578.27 289.028 cv
cp
1601.4 291.965 mo
1600.1 301.085 1591.58 307.427 1582.4 306.328 cv
1572.89 305.189 1566.12 297.024 1567.01 287.855 cv
1567.92 278.472 1576.49 271.529 1586.42 272.719 cv
1596.02 273.868 1602.73 282.632 1601.4 291.965 cv
cp
1537.72 238.694 mo
1537.55 241.795 1540.29 244.626 1543.87 244.852 cv
1547.1 245.056 1550.29 242.599 1550.51 239.5 cv
1550.74 236.188 1547.89 233.3 1544.61 233.093 cv
1540.98 232.863 1537.91 235.378 1537.72 238.694 cv
cp
1602.45 227.991 mo
1604.22 228.226 1605.26 229.343 1604 230.686 cv
1583.11 252.755 1563.41 275.532 1544.63 299.437 cv
1543.8 300.56 1543.33 301.065 1542.05 300.98 cv
1538.01 300.716 1535.99 300.597 1531.94 300.387 cv
1530.33 300.303 1529.3 299.288 1530.35 297.838 cv
1548.71 273.586 1568.02 250.446 1588.55 227.993 cv
1589.51 226.917 1590.05 226.44 1591.46 226.609 cv
1595.86 227.133 1598.06 227.409 1602.45 227.991 cv
cp
1562.35 240.427 mo
1561.57 249.605 1552.97 256.375 1543.18 255.756 cv
1533.04 255.116 1525.37 247.325 1525.74 238.121 cv
1526.12 228.702 1534.75 221.307 1545.31 221.975 cv
1555.52 222.62 1563.16 231.035 1562.35 240.427 cv
cp
f
2173.21 400.632 mo
1852.85 400.632 li
1852.85 313.34 li
1852.85 244.491 1908.67 188.678 1977.52 188.678 cv
2297.87 188.678 li
2297.87 275.97 li
2297.87 344.819 2242.06 400.632 2173.21 400.632 cv
cp
.454902 .741176 .207843 rgb
f
1979.12 248.348 mo
1980.86 248.348 1981.55 249.274 1981.2 250.895 cv
1961.64 338.877 li
1961.29 340.267 1960.48 340.961 1959.09 340.961 cv
1947.52 340.961 li
1946.13 340.961 1945.32 340.267 1944.97 338.877 cv
1925.52 250.895 li
1925.17 249.274 1925.87 248.348 1927.6 248.348 cv
1938.6 248.348 li
1939.99 248.348 1940.8 249.043 1941.15 250.432 cv
1953.3 312.483 li
1965.57 250.432 li
1965.92 249.043 1966.73 248.348 1968.12 248.348 cv
1979.12 248.348 li
cp
1 1 1 rgb
f
2036.78 261.777 mo
2036.78 262.935 2036.31 263.746 2034.92 263.746 cv
2005.98 263.746 li
2005.98 286.898 li
2028.09 286.898 li
2029.25 286.898 2029.95 287.593 2029.95 288.867 cv
2029.95 300.327 li
2029.95 301.601 2029.25 302.295 2028.09 302.295 cv
2005.98 302.295 li
2005.98 325.68 li
2034.92 325.68 li
2036.31 325.68 2036.78 326.259 2036.78 327.533 cv
2036.78 339.109 li
2036.78 340.267 2036.31 340.961 2034.92 340.961 cv
1992.32 340.961 li
1991.28 340.961 1990.59 340.267 1990.59 339.109 cv
1990.59 250.201 li
1990.59 249.043 1991.28 248.348 1992.32 248.348 cv
2034.92 248.348 li
2036.31 248.348 2036.78 249.043 2036.78 250.201 cv
2036.78 261.777 li
cp
f
2046.04 265.019 mo
2046.04 254.137 2051.83 248.348 2062.71 248.348 cv
2077.99 248.348 li
2088.76 248.348 2094.66 254.137 2094.66 265.019 cv
2094.66 277.059 li
2094.66 278.216 2093.97 278.91 2092.81 278.91 cv
2081.24 278.91 li
2079.96 278.91 2079.38 278.216 2079.38 277.059 cv
2079.38 268.26 li
2079.38 265.25 2077.76 263.63 2074.75 263.63 cv
2066.42 263.63 li
2063.29 263.63 2061.79 265.25 2061.79 268.26 cv
2061.79 321.049 li
2061.79 324.175 2063.41 325.68 2066.42 325.68 cv
2074.75 325.68 li
2077.76 325.68 2079.38 324.175 2079.38 321.049 cv
2079.38 305.537 li
2073.36 305.537 li
2072.09 305.537 2071.51 304.842 2071.51 303.685 cv
2071.51 292.108 li
2071.51 290.834 2072.09 290.256 2073.36 290.256 cv
2092.81 290.256 li
2093.97 290.256 2094.66 290.834 2094.66 292.108 cv
2094.66 324.292 li
2094.66 335.173 2088.76 340.961 2077.99 340.961 cv
2062.71 340.961 li
2051.83 340.961 2046.04 335.173 2046.04 324.292 cv
2046.04 265.019 li
cp
f
2133.22 268.607 mo
2125.81 309.01 li
2140.63 309.01 li
2133.22 268.607 li
cp
2148.62 340.961 mo
2147.57 340.961 2147 340.382 2146.76 339.341 cv
2143.52 322.439 li
2122.92 322.439 li
2119.79 339.341 li
2119.56 340.382 2118.98 340.961 2117.94 340.961 cv
2105.55 340.961 li
2104.28 340.961 2103.7 340.267 2104.05 338.993 cv
2123.26 249.969 li
2123.5 248.812 2124.19 248.348 2125.23 248.348 cv
2141.32 248.348 li
2142.37 248.348 2143.06 248.812 2143.29 249.969 cv
2162.51 338.993 li
2162.74 340.267 2162.28 340.961 2160.89 340.961 cv
2148.62 340.961 li
cp
f
2219.36 248.348 mo
2220.51 248.348 2221.21 249.043 2221.21 250.201 cv
2221.21 339.109 li
2221.21 340.267 2220.51 340.961 2219.36 340.961 cv
2207.9 340.961 li
2206.85 340.961 2206.16 340.498 2205.81 339.457 cv
2188.1 290.024 li
2187.52 290.024 li
2187.52 339.109 li
2187.52 340.267 2186.94 340.961 2185.67 340.961 cv
2173.63 340.961 li
2172.47 340.961 2171.78 340.267 2171.78 339.109 cv
2171.78 250.201 li
2171.78 249.043 2172.47 248.348 2173.63 248.348 cv
2185.09 248.348 li
2186.13 248.348 2186.83 248.812 2187.17 249.854 cv
2204.77 299.054 li
2205.46 299.054 li
2205.46 250.201 li
2205.46 249.043 2206.04 248.348 2207.32 248.348 cv
2219.36 248.348 li
cp
f
2814.89 156.581 mo
2798.21 186.471 2774.14 194.364 2741.04 196.296 cv
2503.51 196.296 li
2421.23 196.296 2332.17 274.505 2391.86 433.193 cv
2408.53 403.304 2432.6 395.411 2465.71 393.479 cv
2703.23 393.479 li
2785.52 393.479 2874.57 315.27 2814.89 156.581 cv
cp
.454902 .741176 .207843 rgb
f
2503.78 255.72 mo
2505.54 255.579 2506.32 256.458 2506.1 258.125 cv
2493.46 348.678 li
2493.22 350.111 2492.46 350.88 2491.06 350.993 cv
2479.35 351.933 li
2477.95 352.046 2477.07 351.41 2476.61 350.033 cv
2449.79 262.65 li
2449.31 261.04 2449.94 260.047 2451.69 259.906 cv
2462.81 259.012 li
2464.22 258.899 2465.09 259.536 2465.56 260.913 cv
2482.89 322.667 li
2490.26 258.928 li
2490.49 257.495 2491.26 256.726 2492.66 256.613 cv
2503.78 255.72 li
cp
1 1 1 rgb
f
2563.17 264.613 mo
2563.27 265.784 2562.87 266.641 2561.46 266.753 cv
2532.2 269.105 li
2534.08 292.517 li
2556.44 290.72 li
2557.61 290.625 2558.37 291.271 2558.47 292.56 cv
2559.4 304.148 li
2559.5 305.436 2558.86 306.194 2557.69 306.289 cv
2535.33 308.085 li
2537.23 331.73 li
2566.49 329.378 li
2567.9 329.266 2568.41 329.813 2568.52 331.101 cv
2569.46 342.807 li
2569.55 343.978 2569.14 344.717 2567.74 344.83 cv
2524.66 348.292 li
2523.6 348.377 2522.85 347.731 2522.75 346.561 cv
2515.53 256.661 li
2515.43 255.49 2516.08 254.731 2517.13 254.647 cv
2560.21 251.185 li
2561.61 251.072 2562.14 251.737 2562.23 252.908 cv
2563.17 264.613 li
cp
f
2572.81 267.138 mo
2571.92 256.134 2577.3 249.811 2588.31 248.927 cv
2603.76 247.685 li
2614.65 246.81 2621.09 252.183 2621.97 263.187 cv
2622.95 275.36 li
2623.04 276.531 2622.4 277.29 2621.23 277.383 cv
2609.52 278.324 li
2608.23 278.428 2607.59 277.772 2607.5 276.603 cv
2606.78 267.706 li
2606.54 264.663 2604.77 263.155 2601.72 263.4 cv
2593.29 264.078 li
2590.13 264.332 2588.75 266.092 2588.99 269.136 cv
2593.28 322.514 li
2593.53 325.674 2595.29 327.064 2598.34 326.819 cv
2606.77 326.142 li
2609.81 325.897 2611.33 324.244 2611.07 321.083 cv
2609.81 305.398 li
2603.72 305.887 li
2602.44 305.991 2601.79 305.335 2601.7 304.165 cv
2600.76 292.459 li
2600.66 291.171 2601.2 290.54 2602.48 290.436 cv
2622.15 288.855 li
2623.32 288.762 2624.07 289.29 2624.17 290.578 cv
2626.79 323.12 li
2627.67 334.123 2622.17 340.456 2611.29 341.33 cv
2595.83 342.572 li
2584.83 343.457 2578.51 338.074 2577.62 327.071 cv
2572.81 267.138 li
cp
f
2661.25 263.682 mo
2657.04 305.137 li
2672.02 303.933 li
2661.25 263.682 li
cp
2682.7 335.591 mo
2681.64 335.676 2681.01 335.138 2680.69 334.104 cv
2676.04 317.276 li
2655.2 318.951 li
2653.42 336.295 li
2653.27 337.367 2652.73 338 2651.67 338.084 cv
2639.15 339.091 li
2637.86 339.194 2637.22 338.539 2637.47 337.223 cv
2649.67 245.645 li
2649.81 244.456 2650.47 243.931 2651.52 243.846 cv
2667.79 242.539 li
2668.85 242.454 2669.59 242.866 2669.92 244.018 cv
2696.58 332.472 li
2696.92 333.741 2696.51 334.481 2695.1 334.594 cv
2682.7 335.591 li
cp
f
2746.7 236.198 mo
2747.87 236.104 2748.63 236.75 2748.72 237.92 cv
2755.95 327.82 li
2756.04 328.99 2755.39 329.749 2754.22 329.843 cv
2742.63 330.774 li
2741.58 330.859 2740.84 330.447 2740.4 329.422 cv
2718.48 280.878 li
2717.89 280.925 li
2721.88 330.558 li
2721.97 331.728 2721.45 332.477 2720.16 332.581 cv
2707.98 333.559 li
2706.81 333.653 2706.06 333.007 2705.96 331.837 cv
2698.74 241.938 li
2698.64 240.767 2699.29 240.008 2700.46 239.914 cv
2712.05 238.982 li
2713.1 238.897 2713.84 239.31 2714.28 240.334 cv
2736.07 288.653 li
2736.77 288.597 li
2732.8 239.2 li
2732.71 238.029 2733.23 237.279 2734.52 237.176 cv
2746.7 236.198 li
cp
f
1064.07 585.254 mo
954.299 585.254 li
954.298 585.254 954.296 585.254 954.294 585.254 cv
954.293 585.254 954.292 585.254 954.29 585.254 cv
953.628 585.254 li
953.628 585.263 li
893.256 585.622 844.425 634.667 844.425 695.125 cv
844.425 755.581 893.256 804.626 953.628 804.986 cv
953.628 804.994 li
954.285 804.994 li
954.288 804.994 954.292 804.994 954.294 804.994 cv
954.298 804.994 954.301 804.994 954.304 804.994 cv
1064.07 804.994 li
1064.07 585.254 li
cp
.388235 .631373 .176471 rgb
f
1323.13 648.401 mo
1323.13 648.393 li
1322.51 648.393 li
1322.51 648.393 li
1322.47 648.393 li
1322.46 648.393 1322.46 648.392 1322.46 648.392 cv
1322.46 648.392 1322.46 648.393 1322.46 648.393 cv
974.064 648.393 li
974.064 868.132 li
1255.98 868.132 li
1255.98 868.132 li
1322.46 868.132 li
1322.46 868.132 1322.46 868.132 1322.46 868.132 cv
1322.46 868.132 1322.46 868.132 1322.47 868.132 cv
1323.13 868.132 li
1323.13 868.124 li
1383.5 867.765 1432.33 818.719 1432.33 758.262 cv
1432.33 697.806 1383.5 648.76 1323.13 648.401 cv
cp
.454902 .741176 .207843 rgb
f
974.064 648.393 mo
1064.07 585.254 li
1064.07 648.393 li
974.064 648.393 li
cp
.270588 .439216 .12549 rgb
f
1084.37 709.051 mo
1086.22 709.051 1086.95 710.035 1086.59 711.757 cv
1065.79 805.259 li
1065.42 806.735 1064.56 807.474 1063.09 807.474 cv
1050.78 807.474 li
1049.31 807.474 1048.45 806.735 1048.08 805.259 cv
1027.41 711.757 li
1027.04 710.035 1027.78 709.051 1029.62 709.051 cv
1041.31 709.051 li
1042.79 709.051 1043.65 709.789 1044.02 711.266 cv
1056.94 777.209 li
1069.98 711.266 li
1070.35 709.789 1071.21 709.051 1072.68 709.051 cv
1084.37 709.051 li
cp
1 1 1 rgb
f
1145.64 723.322 mo
1145.64 724.553 1145.15 725.414 1143.68 725.414 cv
1112.92 725.414 li
1112.92 750.02 li
1136.42 750.02 li
1137.65 750.02 1138.39 750.758 1138.39 752.111 cv
1138.39 764.291 li
1138.39 765.644 1137.65 766.382 1136.42 766.382 cv
1112.92 766.382 li
1112.92 791.234 li
1143.68 791.234 li
1145.15 791.234 1145.64 791.849 1145.64 793.203 cv
1145.64 805.506 li
1145.64 806.735 1145.15 807.474 1143.68 807.474 cv
1098.4 807.474 li
1097.29 807.474 1096.56 806.735 1096.56 805.506 cv
1096.56 711.02 li
1096.56 709.789 1097.29 709.051 1098.4 709.051 cv
1143.68 709.051 li
1145.15 709.051 1145.64 709.789 1145.64 711.02 cv
1145.64 723.322 li
cp
f
1155.49 726.768 mo
1155.49 715.202 1161.64 709.051 1173.21 709.051 cv
1189.45 709.051 li
1200.89 709.051 1207.16 715.202 1207.16 726.768 cv
1207.16 739.562 li
1207.16 740.792 1206.43 741.53 1205.2 741.53 cv
1192.89 741.53 li
1191.54 741.53 1190.93 740.792 1190.93 739.562 cv
1190.93 730.212 li
1190.93 727.013 1189.2 725.291 1186 725.291 cv
1177.15 725.291 li
1173.82 725.291 1172.22 727.013 1172.22 730.212 cv
1172.22 786.313 li
1172.22 789.634 1173.95 791.234 1177.15 791.234 cv
1186 791.234 li
1189.2 791.234 1190.93 789.634 1190.93 786.313 cv
1190.93 769.827 li
1184.53 769.827 li
1183.17 769.827 1182.56 769.088 1182.56 767.859 cv
1182.56 755.556 li
1182.56 754.202 1183.17 753.587 1184.53 753.587 cv
1205.2 753.587 li
1206.43 753.587 1207.16 754.202 1207.16 755.556 cv
1207.16 789.758 li
1207.16 801.322 1200.89 807.474 1189.45 807.474 cv
1173.21 807.474 li
1161.64 807.474 1155.49 801.322 1155.49 789.758 cv
1155.49 726.768 li
cp
f
1248.14 730.581 mo
1240.26 773.518 li
1256.01 773.518 li
1248.14 730.581 li
cp
1264.5 807.474 mo
1263.39 807.474 1262.78 806.858 1262.53 805.751 cv
1259.09 787.789 li
1237.19 787.789 li
1233.87 805.751 li
1233.62 806.858 1233.01 807.474 1231.9 807.474 cv
1218.73 807.474 li
1217.38 807.474 1216.77 806.735 1217.13 805.382 cv
1237.56 710.773 li
1237.8 709.543 1238.54 709.051 1239.65 709.051 cv
1256.75 709.051 li
1257.86 709.051 1258.6 709.543 1258.84 710.773 cv
1279.26 805.382 li
1279.51 806.735 1279.02 807.474 1277.54 807.474 cv
1264.5 807.474 li
cp
f
1339.68 709.051 mo
1340.91 709.051 1341.65 709.789 1341.65 711.02 cv
1341.65 805.506 li
1341.65 806.735 1340.91 807.474 1339.68 807.474 cv
1327.5 807.474 li
1326.39 807.474 1325.65 806.981 1325.28 805.875 cv
1306.46 753.341 li
1305.84 753.341 li
1305.84 805.506 li
1305.84 806.735 1305.23 807.474 1303.88 807.474 cv
1291.08 807.474 li
1289.85 807.474 1289.11 806.735 1289.11 805.506 cv
1289.11 711.02 li
1289.11 709.789 1289.85 709.051 1291.08 709.051 cv
1303.26 709.051 li
1304.37 709.051 1305.11 709.543 1305.48 710.65 cv
1324.17 762.937 li
1324.91 762.937 li
1324.91 711.02 li
1324.91 709.789 1325.53 709.051 1326.88 709.051 cv
1339.68 709.051 li
cp
f
1882.12 1349.87 mo
1867.63 1307.22 1851.64 1265.2 1834.17 1223.68 cv
1867.66 1192.07 1902.22 1161.77 1937.89 1132.65 cv
1856.39 1112.05 1773.91 1097.05 1690.37 1087.63 cv
1682.27 1161.94 1674.18 1236.26 1666.08 1310.58 cv
1739.01 1318.85 1810.96 1331.94 1882.12 1349.87 cv
cp
.388235 .631373 .176471 rgb
f
1748.88 1256.61 mo
1720.73 1273.79 1693.15 1291.75 1666.08 1310.58 cv
1668.41 1289.23 1670.74 1267.87 1673.06 1246.52 cv
1698.41 1249.38 1723.66 1252.74 1748.88 1256.61 cv
cp
.270588 .439216 .12549 rgb
f
1116.87 1349.87 mo
1131.36 1307.22 1147.34 1265.2 1164.82 1223.68 cv
1131.32 1192.07 1096.77 1161.77 1061.09 1132.65 cv
1142.6 1112.05 1225.08 1097.05 1308.62 1087.63 cv
1316.71 1161.94 1324.81 1236.26 1332.9 1310.58 cv
1259.98 1318.85 1188.03 1331.94 1116.87 1349.87 cv
cp
.388235 .631373 .176471 rgb
f
1748.88 1256.61 mo
1583.22 1231.25 1415.77 1231.26 1250.11 1256.61 cv
1238.48 1182.76 1226.85 1108.92 1215.22 1035.07 cv
1403.95 1006.08 1595.04 1006.08 1783.77 1035.07 cv
1772.14 1108.92 1760.51 1182.76 1748.88 1256.61 cv
cp
.454902 .741176 .207843 rgb
f
1250.11 1256.61 mo
1278.26 1273.79 1305.84 1291.75 1332.9 1310.58 cv
1330.58 1289.23 1328.25 1267.87 1325.93 1246.52 cv
1300.57 1249.38 1275.33 1252.74 1250.11 1256.61 cv
cp
.270588 .439216 .12549 rgb
f
1366.92 1068.11 mo
1369.37 1067.97 1370.41 1069.14 1370.05 1071.31 cv
1363.24 1110.69 1356.86 1150.14 1350.9 1189.65 cv
1350.57 1191.53 1349.56 1192.52 1347.72 1192.66 cv
1341.57 1193.11 1338.5 1193.34 1332.36 1193.84 cv
1330.52 1193.98 1329.37 1193.15 1328.76 1191.35 cv
1316.9 1153.2 1304.63 1115.18 1291.95 1077.3 cv
1291.26 1075.2 1292.12 1073.88 1294.55 1073.66 cv
1300.73 1073.08 1303.82 1072.8 1309.99 1072.27 cv
1311.94 1072.1 1313.16 1072.93 1313.8 1074.73 cv
1321.76 1101.61 1329.54 1128.54 1337.15 1155.52 cv
1340.61 1127.69 1344.25 1099.88 1348.07 1072.1 cv
1348.43 1070.23 1349.51 1069.23 1351.46 1069.1 cv
1357.65 1068.68 1360.74 1068.48 1366.92 1068.11 cv
cp
1 1 1 rgb
f
1448.46 1082.56 mo
1448.5 1084.1 1447.88 1085.19 1445.94 1085.24 cv
1432.48 1085.57 1419.03 1086.02 1405.58 1086.6 cv
1406.02 1096.84 1406.46 1107.08 1406.9 1117.32 cv
1417.03 1116.88 1427.17 1116.51 1437.3 1116.23 cv
1438.89 1116.18 1439.87 1117.08 1439.92 1118.77 cv
1440.09 1124.86 1440.17 1127.9 1440.34 1133.98 cv
1440.38 1135.67 1439.46 1136.62 1437.89 1136.67 cv
1427.85 1136.95 1417.81 1137.31 1407.78 1137.75 cv
1408.22 1148.09 1408.67 1158.43 1409.11 1168.78 cv
1422.05 1168.22 1435 1167.79 1447.95 1167.47 cv
1449.81 1167.42 1450.45 1168.18 1450.49 1169.87 cv
1450.64 1176.02 1450.71 1179.09 1450.85 1185.24 cv
1450.89 1186.78 1450.29 1187.71 1448.45 1187.76 cv
1429.57 1188.28 1410.7 1188.99 1391.84 1189.91 cv
1390.45 1189.98 1389.48 1189.11 1389.4 1187.58 cv
1387.33 1148.27 1385.25 1108.96 1383.18 1069.66 cv
1383.1 1068.12 1384.03 1067.15 1385.49 1067.08 cv
1405.46 1066.03 1425.45 1065.28 1445.44 1064.79 cv
1447.39 1064.75 1448.07 1065.65 1448.1 1067.19 cv
1448.25 1073.34 1448.32 1076.41 1448.46 1082.56 cv
cp
f
1461.47 1086.6 mo
1461.29 1073.32 1470.8 1063.18 1484.56 1064.18 cv
1493.17 1064.13 1497.47 1064.12 1506.08 1064.14 cv
1518.85 1064.21 1530.59 1072.42 1529.24 1086.48 cv
1529.16 1092.87 1529.11 1096.07 1529.03 1102.46 cv
1529 1104 1528.03 1104.91 1526.43 1104.89 cv
1520.03 1104.81 1516.83 1104.78 1510.43 1104.75 cv
1508.67 1104.74 1507.88 1103.82 1507.88 1102.28 cv
1507.9 1097.61 1507.91 1095.27 1507.93 1090.59 cv
1507.94 1086.6 1505.69 1084.43 1501.49 1084.43 cv
1496.84 1084.42 1494.52 1084.43 1489.86 1084.45 cv
1485.5 1084.47 1483.42 1086.64 1483.45 1090.64 cv
1483.62 1114.01 1483.79 1137.38 1483.96 1160.75 cv
1484 1164.9 1486.19 1166.88 1490.23 1166.86 cv
1494.7 1166.84 1496.94 1166.83 1501.42 1166.84 cv
1505.46 1166.84 1507.64 1164.85 1507.66 1160.7 cv
1507.69 1152.46 1507.71 1148.34 1507.74 1140.1 cv
1504.46 1140.09 1502.83 1140.09 1499.55 1140.08 cv
1497.82 1140.08 1497.03 1139.16 1497.03 1137.63 cv
1497.02 1131.48 1497.02 1128.4 1497.01 1122.25 cv
1497.01 1120.56 1497.81 1119.79 1499.55 1119.79 cv
1510.23 1119.79 1515.57 1119.82 1526.25 1119.96 cv
1527.83 1119.98 1528.78 1120.76 1528.75 1122.45 cv
1528.56 1136.7 1528.37 1150.94 1528.17 1165.19 cv
1529.06 1178.7 1518.32 1187.15 1505.71 1187.14 cv
1497.58 1187.12 1493.52 1187.13 1485.39 1187.18 cv
1471.9 1188.36 1463.1 1178.02 1462.84 1165.31 cv
1462.39 1139.08 1461.93 1112.84 1461.47 1086.6 cv
cp
f
1582.79 1092.63 mo
1578.69 1110.37 1574.66 1128.12 1570.69 1145.89 cv
1578.73 1146.16 1582.75 1146.31 1590.78 1146.66 cv
1588.18 1128.64 1585.52 1110.63 1582.79 1092.63 cv
cp
1599.58 1189.53 mo
1598.19 1189.47 1597.46 1188.66 1597.22 1187.27 cv
1595.91 1178.22 1595.25 1173.69 1593.91 1164.64 cv
1582.83 1164.15 1577.29 1163.94 1566.2 1163.59 cv
1564.24 1172.51 1563.27 1176.97 1561.34 1185.9 cv
1560.99 1187.27 1560.2 1188.02 1558.81 1187.98 cv
1552.22 1187.79 1548.93 1187.71 1542.34 1187.57 cv
1540.65 1187.54 1539.9 1186.6 1540.39 1184.92 cv
1549.75 1145.64 1559.53 1106.47 1569.73 1067.4 cv
1570.11 1065.88 1571.11 1065.29 1572.57 1065.34 cv
1581.63 1065.64 1586.16 1065.81 1595.21 1066.21 cv
1596.68 1066.27 1597.63 1066.93 1597.89 1068.48 cv
1605.08 1108.21 1611.84 1148.01 1618.18 1187.89 cv
1618.39 1189.6 1617.72 1190.48 1615.88 1190.38 cv
1609.36 1190.02 1606.1 1189.85 1599.58 1189.53 cv
cp
f
1704.88 1073.7 mo
1706.5 1073.85 1707.39 1074.86 1707.25 1076.39 cv
1703.54 1115.58 1699.84 1154.76 1696.14 1193.95 cv
1695.99 1195.48 1694.98 1196.31 1693.45 1196.17 cv
1687.37 1195.6 1684.33 1195.33 1678.26 1194.8 cv
1676.88 1194.68 1676.01 1193.99 1675.66 1192.58 cv
1669.62 1170.08 1663.38 1147.64 1656.94 1125.24 cv
1656.62 1125.22 1656.46 1125.21 1656.15 1125.18 cv
1654.57 1146.86 1652.99 1168.53 1651.41 1190.2 cv
1651.3 1191.74 1650.46 1192.6 1648.77 1192.48 cv
1642.38 1192.02 1639.19 1191.8 1632.79 1191.39 cv
1631.25 1191.3 1630.39 1190.32 1630.49 1188.78 cv
1632.96 1149.5 1635.42 1110.22 1637.89 1070.94 cv
1637.99 1069.4 1639.02 1068.54 1640.65 1068.64 cv
1647.09 1069.06 1650.31 1069.28 1656.76 1069.73 cv
1658.22 1069.84 1659.15 1070.52 1659.54 1071.94 cv
1666.14 1094.24 1672.55 1116.58 1678.77 1138.99 cv
1679.15 1139.02 1679.33 1139.04 1679.71 1139.07 cv
1681.53 1117.52 1683.35 1095.97 1685.17 1074.42 cv
1685.3 1072.88 1686.19 1072.03 1687.98 1072.18 cv
1694.74 1072.76 1698.12 1073.07 1704.88 1073.7 cv
cp
f
2710.21 1269.93 mo
2539.34 1243.9 2366.95 1243.9 2196.09 1269.93 cv
2184.1 1193.81 2172.11 1117.69 2160.13 1041.57 cv
2354.78 1011.8 2551.52 1011.8 2746.17 1041.57 cv
2734.18 1117.69 2722.19 1193.81 2710.21 1269.93 cv
cp
.454902 .741176 .207843 rgb
f
2160.13 1041.58 mo
2138.06 1045.43 2121.28 1064.69 2121.28 1087.86 cv
2121.28 1091.21 2121.63 1094.48 2122.3 1097.63 cv
2157.39 1320.4 li
2157.39 1320.4 2157.25 1319.57 2157.25 1316.21 cv
2157.25 1293.04 2174.03 1273.79 2196.1 1269.93 cv
2160.13 1041.58 li
cp
f
2210.28 1359.3 mo
2188.09 1362.43 2166.21 1349.28 2159.07 1327.23 cv
2158.04 1324.04 2157.37 1320.82 2157.03 1317.62 cv
2121.75 1094.45 li
2121.75 1094.45 2121.95 1095.7 2122.98 1098.89 cv
2130.11 1120.94 2152 1134.09 2174.18 1130.96 cv
2210.28 1359.3 li
cp
.270588 .439216 .12549 rgb
f
2746.17 1041.57 mo
2768.24 1045.43 2785.01 1064.68 2785.01 1087.85 cv
2785.01 1091.2 2784.66 1094.47 2783.99 1097.63 cv
2748.9 1320.4 li
2748.9 1320.4 2749.04 1319.56 2749.04 1316.21 cv
2749.04 1293.04 2732.27 1273.79 2710.2 1269.93 cv
2746.17 1041.57 li
cp
.454902 .741176 .207843 rgb
f
2696.02 1359.3 mo
2718.2 1362.43 2740.09 1349.27 2747.23 1327.23 cv
2748.26 1324.04 2748.93 1320.82 2749.27 1317.62 cv
2784.54 1094.45 li
2784.54 1094.45 2784.35 1095.7 2783.32 1098.89 cv
2776.18 1120.93 2754.3 1134.09 2732.11 1130.96 cv
2696.02 1359.3 li
cp
.270588 .439216 .12549 rgb
f
2320.58 1082.44 mo
2323.02 1082.29 2324.07 1083.46 2323.71 1085.64 cv
2316.89 1125.02 2310.51 1164.46 2304.55 1203.98 cv
2304.22 1205.85 2303.21 1206.85 2301.37 1206.98 cv
2295.23 1207.43 2292.16 1207.67 2286.01 1208.16 cv
2284.17 1208.31 2283.02 1207.48 2282.41 1205.67 cv
2270.55 1167.52 2258.29 1129.51 2245.6 1091.62 cv
2244.91 1089.52 2245.77 1088.21 2248.21 1087.98 cv
2254.38 1087.4 2257.47 1087.13 2263.65 1086.59 cv
2265.6 1086.43 2266.81 1087.25 2267.46 1089.05 cv
2275.41 1115.93 2283.2 1142.86 2290.8 1169.84 cv
2294.26 1142.01 2297.9 1114.21 2301.73 1086.42 cv
2302.09 1084.55 2303.16 1083.55 2305.12 1083.42 cv
2311.3 1083 2314.39 1082.81 2320.58 1082.44 cv
cp
1 1 1 rgb
f
2402.11 1096.88 mo
2402.15 1098.42 2401.53 1099.51 2399.59 1099.56 cv
2386.14 1099.89 2372.69 1100.34 2359.24 1100.92 cv
2359.68 1111.16 2360.12 1121.4 2360.56 1131.64 cv
2370.68 1131.2 2380.82 1130.83 2390.95 1130.55 cv
2392.54 1130.5 2393.52 1131.4 2393.57 1133.09 cv
2393.74 1139.18 2393.82 1142.22 2393.99 1148.31 cv
2394.04 1150 2393.12 1150.95 2391.54 1150.99 cv
2381.5 1151.27 2371.47 1151.63 2361.43 1152.07 cv
2361.88 1162.41 2362.32 1172.76 2362.77 1183.1 cv
2375.71 1182.54 2388.65 1182.11 2401.6 1181.79 cv
2403.47 1181.75 2404.11 1182.5 2404.15 1184.19 cv
2404.29 1190.34 2404.36 1193.41 2404.5 1199.56 cv
2404.54 1201.1 2403.95 1202.04 2402.1 1202.08 cv
2383.22 1202.6 2364.36 1203.32 2345.49 1204.23 cv
2344.11 1204.31 2343.13 1203.43 2343.05 1201.9 cv
2340.98 1162.59 2338.91 1123.29 2336.83 1083.98 cv
2336.75 1082.45 2337.68 1081.47 2339.14 1081.4 cv
2359.11 1080.35 2379.1 1079.61 2399.09 1079.12 cv
2401.05 1079.07 2401.72 1079.98 2401.76 1081.51 cv
2401.9 1087.66 2401.97 1090.74 2402.11 1096.88 cv
cp
f
2415.13 1100.93 mo
2414.94 1087.64 2424.45 1077.5 2438.21 1078.51 cv
2446.82 1078.45 2451.12 1078.44 2459.73 1078.46 cv
2472.5 1078.53 2484.25 1086.75 2482.9 1100.8 cv
2482.81 1107.19 2482.77 1110.39 2482.68 1116.79 cv
2482.66 1118.32 2481.69 1119.23 2480.09 1119.21 cv
2473.69 1119.13 2470.49 1119.11 2464.09 1119.07 cv
2462.33 1119.06 2461.53 1118.14 2461.54 1116.6 cv
2461.55 1111.93 2461.56 1109.59 2461.58 1104.92 cv
2461.6 1100.92 2459.35 1098.76 2455.15 1098.75 cv
2450.5 1098.75 2448.17 1098.75 2443.52 1098.77 cv
2439.16 1098.79 2437.07 1100.96 2437.1 1104.96 cv
2437.28 1128.33 2437.45 1151.7 2437.62 1175.07 cv
2437.65 1179.22 2439.84 1181.2 2443.88 1181.18 cv
2448.36 1181.16 2450.59 1181.16 2455.07 1181.16 cv
2459.11 1181.17 2461.29 1179.18 2461.31 1175.03 cv
2461.34 1166.79 2461.36 1162.67 2461.39 1154.42 cv
2458.12 1154.41 2456.48 1154.41 2453.21 1154.41 cv
2451.47 1154.41 2450.69 1153.49 2450.69 1151.95 cv
2450.68 1145.8 2450.67 1142.72 2450.67 1136.58 cv
2450.67 1134.88 2451.46 1134.11 2453.21 1134.11 cv
2463.88 1134.11 2469.22 1134.15 2479.9 1134.28 cv
2481.49 1134.3 2482.43 1135.08 2482.41 1136.77 cv
2482.21 1151.02 2482.02 1165.27 2481.83 1179.51 cv
2482.72 1193.02 2471.98 1201.47 2459.36 1201.46 cv
2451.24 1201.44 2447.17 1201.45 2439.04 1201.5 cv
2425.56 1202.68 2416.75 1192.35 2416.5 1179.63 cv
2416.04 1153.4 2415.58 1127.16 2415.13 1100.93 cv
cp
f
2536.44 1106.95 mo
2532.34 1124.69 2528.31 1142.44 2524.35 1160.21 cv
2532.38 1160.48 2536.4 1160.63 2544.44 1160.98 cv
2541.84 1142.96 2539.17 1124.95 2536.44 1106.95 cv
cp
2553.23 1203.86 mo
2551.85 1203.79 2551.11 1202.99 2550.87 1201.59 cv
2549.57 1192.54 2548.9 1188.02 2547.56 1178.97 cv
2536.48 1178.47 2530.94 1178.26 2519.86 1177.91 cv
2517.89 1186.83 2516.92 1191.29 2514.99 1200.22 cv
2514.64 1201.59 2513.85 1202.34 2512.46 1202.3 cv
2505.88 1202.11 2502.58 1202.03 2496 1201.9 cv
2494.31 1201.86 2493.55 1200.92 2494.05 1199.24 cv
2503.41 1159.96 2513.19 1120.79 2523.39 1081.73 cv
2523.76 1080.2 2524.76 1079.62 2526.23 1079.66 cv
2535.28 1079.96 2539.81 1080.14 2548.87 1080.53 cv
2550.33 1080.59 2551.29 1081.25 2551.54 1082.8 cv
2558.73 1122.54 2565.49 1162.34 2571.83 1202.21 cv
2572.04 1203.92 2571.38 1204.81 2569.53 1204.7 cv
2563.01 1204.34 2559.75 1204.17 2553.23 1203.86 cv
cp
f
2658.53 1088.02 mo
2660.16 1088.17 2661.05 1089.18 2660.9 1090.71 cv
2657.2 1129.9 2653.49 1169.08 2649.79 1208.27 cv
2649.65 1209.8 2648.64 1210.63 2647.1 1210.49 cv
2641.03 1209.92 2637.99 1209.65 2631.91 1209.13 cv
2630.53 1209.01 2629.66 1208.32 2629.32 1206.9 cv
2623.27 1184.4 2617.03 1161.96 2610.6 1139.57 cv
2610.28 1139.54 2610.12 1139.53 2609.8 1139.51 cv
2608.22 1161.18 2606.64 1182.85 2605.06 1204.53 cv
2604.95 1206.06 2604.12 1206.92 2602.43 1206.8 cv
2596.04 1206.34 2592.84 1206.13 2586.45 1205.72 cv
2584.91 1205.62 2584.05 1204.64 2584.14 1203.11 cv
2586.61 1163.82 2589.08 1124.54 2591.54 1085.26 cv
2591.64 1083.72 2592.67 1082.86 2594.3 1082.97 cv
2600.75 1083.38 2603.97 1083.6 2610.41 1084.06 cv
2611.87 1084.16 2612.81 1084.85 2613.2 1086.26 cv
2619.79 1108.56 2626.2 1130.9 2632.42 1153.31 cv
2632.8 1153.34 2632.99 1153.36 2633.37 1153.39 cv
2635.19 1131.84 2637.01 1110.29 2638.83 1088.74 cv
2638.96 1087.21 2639.85 1086.35 2641.63 1086.51 cv
2648.39 1087.09 2651.77 1087.39 2658.53 1088.02 cv
cp
f
784.482 1233.93 mo
830.905 1244.6 869.954 1232.92 893.456 1209.85 cv
830.117 1432.28 li
820.685 1461.59 766.813 1468.2 720.391 1457.53 cv
784.482 1233.93 li
cp
.270588 .439216 .12549 rgb
f
750.728 1353.69 mo
795.711 1369.35 830.805 1397.16 830.117 1432.28 cv
830.117 1432.28 893.437 1266.99 894.84 1208.86 cv
895.635 1175.94 861.223 1146.33 816.239 1130.66 cv
750.728 1353.69 li
cp
.454902 .741176 .207843 rgb
f
401.472 1185.3 mo
353.955 1181.97 320.011 1159.4 304.257 1130.49 cv
299.968 1361.72 li
300.443 1392.5 350.042 1414.54 397.559 1417.88 cv
401.472 1185.3 li
cp
.270588 .439216 .12549 rgb
f
398.829 1309.7 mo
351.231 1311.56 309.553 1327.93 299.968 1361.72 cv
299.968 1361.72 287.61 1185.15 303.224 1129.13 cv
312.065 1097.41 353.618 1079.13 401.215 1077.26 cv
398.829 1309.7 li
cp
.454902 .741176 .207843 rgb
f
801.07 1370.05 mo
670.001 1323.94 534.633 1303.96 395.815 1309.83 cv
397.677 1232.42 398.757 1154.7 400.619 1077.29 cv
545.238 1071.06 718.572 1095.62 816.6 1130.79 cv
829.308 1135.35 821.868 1295.46 801.07 1370.05 cv
cp
f
463.635 1136.02 mo
466.171 1136.05 467.172 1137.27 466.649 1139.37 cv
456.992 1177.29 448.027 1215.36 439.707 1253.6 cv
439.269 1255.41 438.221 1256.32 436.407 1256.34 cv
430.361 1256.41 427.339 1256.47 421.296 1256.63 cv
419.483 1256.68 418.4 1255.81 417.891 1254.02 cv
408.057 1216.06 397.337 1178.39 385.689 1140.95 cv
385.05 1138.87 385.981 1137.61 388.51 1137.48 cv
394.915 1137.15 398.119 1137.01 404.529 1136.77 cv
406.552 1136.69 407.774 1137.55 408.359 1139.34 cv
415.31 1165.96 421.875 1192.66 428.071 1219.47 cv
433.086 1192.47 438.358 1165.54 443.9 1138.65 cv
444.383 1136.84 445.556 1135.93 447.583 1135.93 cv
454.003 1135.92 457.214 1135.94 463.635 1136.02 cv
cp
1 1 1 rgb
f
546.306 1157.47 mo
546.184 1158.97 545.436 1159.96 543.45 1159.8 cv
529.638 1158.75 515.85 1157.87 502.017 1157.15 cv
501.6 1167.17 501.177 1177.19 500.747 1187.21 cv
511.019 1187.66 521.298 1188.27 531.55 1189.05 cv
533.162 1189.17 534.063 1190.14 533.941 1191.79 cv
533.503 1197.73 533.283 1200.7 532.843 1206.64 cv
532.72 1208.29 531.705 1209.12 530.122 1209 cv
520.058 1208.24 509.966 1207.63 499.883 1207.19 cv
499.442 1217.31 498.995 1227.43 498.541 1237.54 cv
511.381 1238.21 524.182 1239.03 537.003 1240.01 cv
538.848 1240.16 539.399 1240.96 539.261 1242.61 cv
538.759 1248.6 538.508 1251.6 538.004 1257.6 cv
537.878 1259.09 537.201 1259.94 535.391 1259.79 cv
516.87 1258.44 498.363 1257.41 479.806 1256.71 cv
478.446 1256.67 477.562 1255.74 477.602 1254.24 cv
478.605 1215.75 479.512 1177.25 480.323 1138.76 cv
480.354 1137.25 481.386 1136.38 482.907 1136.42 cv
503.652 1137.12 524.334 1138.27 545.03 1139.86 cv
547.053 1140.03 547.653 1140.98 547.531 1142.48 cv
547.042 1148.48 546.797 1151.48 546.306 1157.47 cv
cp
f
559.186 1162.86 mo
560.813 1150.38 572.48 1140.54 585.432 1143.87 cv
594.304 1144.91 598.735 1145.47 607.586 1146.67 cv
620.047 1148.7 631.225 1157.93 628.295 1171.59 cv
627.316 1177.77 626.827 1180.86 625.85 1187.04 cv
625.615 1188.52 624.508 1189.26 622.895 1189.01 cv
616.445 1188.01 613.216 1187.54 606.752 1186.63 cv
604.975 1186.39 604.29 1185.38 604.495 1183.89 cv
605.12 1179.36 605.433 1177.1 606.058 1172.57 cv
606.593 1168.7 604.577 1166.29 600.294 1165.72 cv
595.55 1165.1 593.176 1164.8 588.425 1164.22 cv
583.972 1163.68 581.585 1165.53 581.139 1169.42 cv
578.531 1192.13 575.918 1214.84 573.301 1237.55 cv
572.836 1241.58 574.757 1243.76 578.737 1244.25 cv
583.147 1244.78 585.351 1245.06 589.754 1245.64 cv
593.729 1246.17 596.134 1244.53 596.688 1240.51 cv
597.789 1232.52 598.339 1228.53 599.44 1220.54 cv
596.184 1220.09 594.554 1219.88 591.294 1219.45 cv
589.57 1219.23 588.9 1218.23 589.091 1216.74 cv
589.853 1210.77 590.233 1207.79 590.996 1201.82 cv
591.205 1200.18 592.099 1199.54 593.855 1199.77 cv
604.583 1201.16 609.938 1201.92 620.628 1203.58 cv
622.22 1203.82 623.056 1204.71 622.797 1206.35 cv
620.625 1220.12 618.454 1233.88 616.286 1247.65 cv
615.324 1260.43 603.342 1267.59 591.359 1265.89 cv
583.44 1264.81 579.476 1264.31 571.539 1263.38 cv
558.803 1263 550.711 1251.69 551.927 1239.52 cv
554.359 1213.97 556.779 1188.42 559.186 1162.86 cv
cp
f
681.678 1186.02 mo
674.693 1202.44 667.823 1218.9 661.063 1235.41 cv
668.967 1236.96 672.912 1237.78 680.785 1239.48 cv
681.18 1221.66 681.478 1203.84 681.678 1186.02 cv
cp
682.17 1282.29 mo
680.841 1281.99 680.268 1281.09 680.269 1279.71 cv
680.534 1270.77 680.652 1266.29 680.854 1257.35 cv
670.092 1254.98 664.695 1253.87 653.873 1251.78 cv
650.559 1260.09 648.92 1264.25 645.678 1272.57 cv
645.126 1273.84 644.246 1274.44 642.905 1274.19 cv
636.538 1273 633.35 1272.44 626.965 1271.34 cv
625.326 1271.06 624.729 1270.05 625.453 1268.49 cv
640.349 1231.82 655.991 1195.49 672.432 1159.47 cv
673.054 1158.06 674.169 1157.67 675.662 1157.96 cv
684.889 1159.77 689.493 1160.72 698.679 1162.71 cv
700.166 1163.03 701.026 1163.84 701.026 1165.38 cv
701.544 1204.92 701.337 1244.44 700.445 1283.97 cv
700.346 1285.65 699.544 1286.38 697.78 1285.95 cv
691.548 1284.44 688.426 1283.71 682.17 1282.29 cv
cp
f
808.621 1192.19 mo
810.228 1192.71 810.905 1193.88 810.428 1195.3 cv
798.22 1231.83 786.177 1268.41 774.297 1305.04 cv
773.834 1306.47 772.693 1307.05 771.254 1306.59 cv
765.559 1304.77 762.704 1303.87 756.981 1302.13 cv
755.681 1301.73 754.987 1300.89 754.946 1299.47 cv
753.632 1276.68 752.015 1253.93 750.084 1231.19 cv
749.774 1231.1 749.62 1231.06 749.31 1230.97 cv
743.534 1251.43 737.793 1271.9 732.088 1292.38 cv
731.685 1293.82 730.715 1294.49 729.113 1294.05 cv
723.05 1292.38 720.011 1291.57 713.922 1290 cv
712.458 1289.62 711.805 1288.52 712.179 1287.06 cv
721.785 1249.77 731.501 1212.51 741.329 1175.28 cv
741.714 1173.83 742.926 1173.2 744.562 1173.63 cv
751.039 1175.31 754.271 1176.17 760.722 1177.94 cv
762.187 1178.34 763 1179.19 763.116 1180.63 cv
765.354 1203.35 767.273 1226.07 768.885 1248.84 cv
769.251 1248.95 769.434 1249.01 769.8 1249.12 cv
776.015 1228.89 782.27 1208.67 788.564 1188.47 cv
789.013 1187.03 790.091 1186.41 791.867 1186.95 cv
798.585 1189 801.936 1190.04 808.621 1192.19 cv
cp
f
716.3 596.12 mo
571.316 596.12 li
351.966 596.12 li
206.983 596.12 li
230.968 719.762 li
461.641 718.366 li
692.314 719.762 li
716.3 596.12 li
cp
.388235 .631373 .176471 rgb
f
692.316 719.762 mo
230.968 719.762 li
272.454 655.905 li
650.83 655.905 li
692.316 719.762 li
cp
.270588 .439216 .12549 rgb
f
650.83 836.119 mo
461.642 940.19 li
272.454 836.119 li
272.454 655.905 li
650.83 655.905 li
650.83 836.119 li
cp
.454902 .741176 .207843 rgb
f
370.543 715.481 mo
372.223 715.481 372.894 716.376 372.559 717.944 cv
353.639 803.028 li
353.302 804.372 352.519 805.043 351.175 805.043 cv
339.98 805.043 li
338.637 805.043 337.854 804.372 337.517 803.028 cv
318.709 717.944 li
318.373 716.376 319.045 715.481 320.725 715.481 cv
331.36 715.481 li
332.703 715.481 333.486 716.153 333.823 717.497 cv
345.578 777.503 li
357.445 717.497 li
357.78 716.153 358.564 715.481 359.907 715.481 cv
370.543 715.481 li
cp
1 1 1 rgb
f
426.301 728.468 mo
426.301 729.587 425.854 730.371 424.51 730.371 cv
396.521 730.371 li
396.521 752.762 li
417.904 752.762 li
419.024 752.762 419.696 753.433 419.696 754.665 cv
419.696 765.748 li
419.696 766.979 419.024 767.651 417.904 767.651 cv
396.521 767.651 li
396.521 790.265 li
424.51 790.265 li
425.854 790.265 426.301 790.825 426.301 792.057 cv
426.301 803.252 li
426.301 804.372 425.854 805.043 424.51 805.043 cv
383.311 805.043 li
382.304 805.043 381.632 804.372 381.632 803.252 cv
381.632 717.273 li
381.632 716.153 382.304 715.481 383.311 715.481 cv
424.51 715.481 li
425.854 715.481 426.301 716.153 426.301 717.273 cv
426.301 728.468 li
cp
f
435.262 731.603 mo
435.262 721.079 440.86 715.481 451.383 715.481 cv
466.161 715.481 li
476.572 715.481 482.282 721.079 482.282 731.603 cv
482.282 743.246 li
482.282 744.365 481.611 745.037 480.491 745.037 cv
469.295 745.037 li
468.064 745.037 467.504 744.365 467.504 743.246 cv
467.504 734.737 li
467.504 731.827 465.938 730.259 463.027 730.259 cv
454.965 730.259 li
451.943 730.259 450.488 731.827 450.488 734.737 cv
450.488 785.787 li
450.488 788.81 452.055 790.265 454.965 790.265 cv
463.027 790.265 li
465.938 790.265 467.504 788.81 467.504 785.787 cv
467.504 770.786 li
461.683 770.786 li
460.452 770.786 459.892 770.114 459.892 768.995 cv
459.892 757.799 li
459.892 756.567 460.452 756.008 461.683 756.008 cv
480.491 756.008 li
481.611 756.008 482.282 756.567 482.282 757.799 cv
482.282 788.923 li
482.282 799.445 476.572 805.043 466.161 805.043 cv
451.383 805.043 li
440.86 805.043 435.262 799.445 435.262 788.923 cv
435.262 731.603 li
cp
f
519.567 735.073 mo
512.402 774.145 li
526.732 774.145 li
519.567 735.073 li
cp
534.457 805.043 mo
533.448 805.043 532.888 804.483 532.665 803.476 cv
529.53 787.131 li
509.603 787.131 li
506.581 803.476 li
506.355 804.483 505.797 805.043 504.788 805.043 cv
492.809 805.043 li
491.579 805.043 491.019 804.372 491.354 803.14 cv
509.938 717.048 li
510.162 715.929 510.835 715.481 511.842 715.481 cv
527.403 715.481 li
528.41 715.481 529.083 715.929 529.307 717.048 cv
547.891 803.14 li
548.114 804.372 547.667 805.043 546.324 805.043 cv
534.457 805.043 li
cp
f
602.865 715.481 mo
603.984 715.481 604.657 716.153 604.657 717.273 cv
604.657 803.252 li
604.657 804.372 603.984 805.043 602.865 805.043 cv
591.782 805.043 li
590.774 805.043 590.102 804.595 589.767 803.588 cv
572.638 755.784 li
572.078 755.784 li
572.078 803.252 li
572.078 804.372 571.518 805.043 570.287 805.043 cv
558.644 805.043 li
557.524 805.043 556.853 804.372 556.853 803.252 cv
556.853 717.273 li
556.853 716.153 557.524 715.481 558.644 715.481 cv
569.727 715.481 li
570.734 715.481 571.407 715.929 571.743 716.937 cv
588.758 764.516 li
589.431 764.516 li
589.431 717.273 li
589.431 716.153 589.991 715.481 591.222 715.481 cv
602.865 715.481 li
cp
f
2538.09 1547.06 mo
2416.66 1596 li
2416.66 1498.11 li
2606.69 1498.11 li
2538.09 1547.06 li
cp
.270588 .439216 .12549 rgb
f
2766.62 1776.83 mo
2717.67 1898.26 li
2815.57 1898.26 li
2815.57 1708.23 li
2766.62 1776.83 li
cp
f
2815.57 1898.26 mo
2815.57 1532.56 li
2815.57 1513.53 2800.14 1498.11 2781.12 1498.11 cv
2606.69 1498.11 li
2416.66 1498.11 li
2586.24 1667.7 li
2815.57 1898.26 li
cp
.454902 .741176 .207843 rgb
f
2643.46 1576.76 mo
2644.32 1577.63 2644.21 1578.44 2643.23 1579.07 cv
2589.52 1613.24 li
2588.65 1613.76 2587.9 1613.7 2587.21 1613.01 cv
2581.43 1607.23 li
2580.74 1606.53 2580.68 1605.78 2581.2 1604.92 cv
2615.42 1551.27 li
2616.06 1550.29 2616.87 1550.17 2617.73 1551.04 cv
2623.22 1556.53 li
2623.92 1557.22 2623.97 1557.97 2623.46 1558.84 cv
2598.54 1595.9 li
2635.65 1571.04 li
2636.52 1570.52 2637.27 1570.58 2637.96 1571.27 cv
2643.46 1576.76 li
cp
1 1 1 rgb
f
2665.54 1612.26 mo
2664.96 1612.84 2664.33 1613.01 2663.63 1612.32 cv
2649.18 1597.87 li
2637.62 1609.43 li
2648.66 1620.47 li
2649.24 1621.05 2649.24 1621.74 2648.6 1622.38 cv
2642.88 1628.1 li
2642.25 1628.73 2641.55 1628.73 2640.97 1628.16 cv
2629.93 1617.12 li
2618.25 1628.79 li
2632.71 1643.24 li
2633.4 1643.94 2633.34 1644.46 2632.71 1645.09 cv
2626.93 1650.88 li
2626.35 1651.45 2625.77 1651.57 2625.08 1650.88 cv
2603.8 1629.6 li
2603.28 1629.08 2603.28 1628.39 2603.86 1627.81 cv
2648.26 1583.41 li
2648.83 1582.83 2649.53 1582.83 2650.05 1583.36 cv
2671.32 1604.63 li
2672.02 1605.32 2671.9 1605.9 2671.32 1606.48 cv
2665.54 1612.26 li
cp
f
2668.55 1618.5 mo
2673.98 1613.07 2679.77 1613.07 2685.2 1618.5 cv
2692.83 1626.14 li
2698.21 1631.51 2698.26 1637.35 2692.83 1642.78 cv
2686.82 1648.8 li
2686.24 1649.37 2685.55 1649.37 2684.97 1648.8 cv
2679.19 1643.02 li
2678.55 1642.38 2678.61 1641.74 2679.19 1641.17 cv
2683.58 1636.77 li
2685.08 1635.27 2685.08 1633.65 2683.58 1632.15 cv
2679.42 1627.99 li
2677.86 1626.42 2676.3 1626.48 2674.79 1627.99 cv
2648.43 1654.35 li
2646.87 1655.91 2646.93 1657.47 2648.43 1658.97 cv
2652.6 1663.13 li
2654.1 1664.64 2655.66 1664.69 2657.22 1663.13 cv
2664.97 1655.39 li
2661.96 1652.38 li
2661.32 1651.74 2661.38 1651.11 2661.96 1650.53 cv
2667.74 1644.75 li
2668.38 1644.11 2668.96 1644.11 2669.59 1644.75 cv
2679.3 1654.46 li
2679.88 1655.04 2679.94 1655.67 2679.3 1656.31 cv
2663.23 1672.38 li
2657.8 1677.82 2651.96 1677.76 2646.58 1672.38 cv
2638.95 1664.75 li
2633.52 1659.32 2633.52 1653.54 2638.95 1648.1 cv
2668.55 1618.5 li
cp
f
2710.29 1663.83 mo
2686.42 1680.3 li
2693.81 1687.7 li
2710.29 1663.83 li
cp
2681.85 1707.65 mo
2681.33 1707.13 2681.33 1706.55 2681.73 1705.91 cv
2688.55 1695.85 li
2678.26 1685.56 li
2668.26 1692.44 li
2667.63 1692.85 2667.05 1692.85 2666.53 1692.33 cv
2660.34 1686.14 li
2659.71 1685.51 2659.77 1684.87 2660.58 1684.41 cv
2714.63 1649.55 li
2715.32 1649.09 2715.9 1649.2 2716.42 1649.72 cv
2724.45 1657.76 li
2724.97 1658.28 2725.09 1658.86 2724.63 1659.55 cv
2689.77 1713.6 li
2689.25 1714.35 2688.67 1714.47 2687.98 1713.77 cv
2681.85 1707.65 li
cp
f
2763.42 1696.72 mo
2764 1697.3 2764 1698 2763.42 1698.57 cv
2719.02 1742.97 li
2718.44 1743.55 2717.75 1743.55 2717.17 1742.97 cv
2711.45 1737.25 li
2710.93 1736.73 2710.81 1736.15 2711.16 1735.46 cv
2727 1701.93 li
2726.71 1701.64 li
2702.2 1726.15 li
2701.62 1726.73 2700.99 1726.78 2700.35 1726.15 cv
2694.34 1720.14 li
2693.76 1719.56 2693.76 1718.86 2694.34 1718.29 cv
2738.73 1673.89 li
2739.31 1673.31 2740.01 1673.31 2740.58 1673.89 cv
2746.31 1679.61 li
2746.83 1680.13 2746.94 1680.71 2746.6 1681.41 cv
2730.81 1714.76 li
2731.16 1715.11 li
2755.56 1690.71 li
2756.13 1690.13 2756.77 1690.08 2757.41 1690.71 cv
2763.42 1696.72 li
cp
f
2705.75 1533.51 mo
2706.22 1533.97 2706.22 1534.53 2705.75 1535 cv
2669.91 1570.84 li
2669.45 1571.3 2668.88 1571.3 2668.42 1570.84 cv
2663.57 1565.98 li
2663.05 1565.47 2663.1 1564.96 2663.57 1564.49 cv
2693.06 1535 li
2689.79 1532.48 li
2689.09 1531.97 2689.04 1531.27 2689.65 1530.66 cv
2694.13 1526.18 li
2694.74 1525.57 2695.34 1525.53 2696 1526.09 cv
2705.75 1533.51 li
cp
f
2691.1 1581.48 mo
2692.31 1582.69 2693.57 1582.74 2694.83 1581.48 cv
2716.39 1559.92 li
2717.61 1558.71 2717.61 1557.4 2716.39 1556.19 cv
2713.68 1553.48 li
2712.47 1552.27 2711.17 1552.27 2709.95 1553.48 cv
2688.39 1575.04 li
2687.13 1576.3 2687.18 1577.56 2688.39 1578.77 cv
2691.1 1581.48 li
cp
2704.91 1546.11 mo
2709.3 1541.72 2713.96 1541.72 2718.35 1546.11 cv
2723.58 1551.33 li
2727.96 1555.72 2727.96 1560.39 2723.58 1564.77 cv
2699.68 1588.67 li
2695.3 1593.05 2690.63 1593.05 2686.25 1588.67 cv
2681.02 1583.44 li
2676.63 1579.05 2676.63 1574.39 2681.02 1570 cv
2704.91 1546.11 li
cp
f
2714.43 1604.81 mo
2715.65 1606.03 2716.91 1606.07 2718.17 1604.81 cv
2739.73 1583.25 li
2740.94 1582.04 2740.94 1580.73 2739.73 1579.52 cv
2737.02 1576.81 li
2735.81 1575.6 2734.5 1575.6 2733.29 1576.81 cv
2711.73 1598.37 li
2710.47 1599.63 2710.51 1600.89 2711.73 1602.11 cv
2714.43 1604.81 li
cp
2728.25 1569.44 mo
2732.63 1565.05 2737.3 1565.05 2741.69 1569.44 cv
2746.91 1574.67 li
2751.3 1579.05 2751.3 1583.72 2746.91 1588.11 cv
2723.02 1612 li
2718.63 1616.39 2713.97 1616.39 2709.58 1612 cv
2704.35 1606.77 li
2699.97 1602.39 2699.97 1597.72 2704.35 1593.33 cv
2728.25 1569.44 li
cp
f
2754.43 1641.53 mo
2753 1642.95 2753 1645.41 2754.52 1646.93 cv
2755.9 1648.3 2758.4 1648.35 2759.83 1646.93 cv
2761.35 1645.41 2761.3 1642.9 2759.92 1641.53 cv
2758.4 1640.01 2755.95 1640.01 2754.43 1641.53 cv
cp
2764.83 1651.94 mo
2760.61 1656.16 2753.74 1656.16 2749.52 1651.94 cv
2745.15 1647.57 2745.15 1640.69 2749.37 1636.47 cv
2753.69 1632.15 2760.66 1632.05 2765.03 1636.42 cv
2769.25 1640.65 2769.15 1647.62 2764.83 1651.94 cv
cp
2756.54 1600.73 mo
2755.11 1602.16 2755.11 1604.61 2756.63 1606.13 cv
2758.01 1607.51 2760.51 1607.56 2761.94 1606.13 cv
2763.46 1604.61 2763.41 1602.11 2762.04 1600.73 cv
2760.51 1599.21 2758.06 1599.21 2756.54 1600.73 cv
cp
2790.66 1619.54 mo
2791.39 1620.27 2791.44 1621.21 2790.31 1621.45 cv
2733.61 1632.99 li
2732.73 1633.18 2732.29 1633.23 2731.7 1632.64 cv
2727.08 1628.03 li
2726.34 1627.29 2726.29 1626.36 2727.42 1626.11 cv
2784.18 1614.63 li
2785.06 1614.43 2785.5 1614.38 2786.09 1614.97 cv
2790.66 1619.54 li
cp
2766.94 1611.14 mo
2762.72 1615.36 2755.85 1615.36 2751.63 1611.14 cv
2747.26 1606.77 2747.26 1599.9 2751.48 1595.68 cv
2755.8 1591.36 2762.77 1591.26 2767.14 1595.63 cv
2771.36 1599.85 2771.26 1606.82 2766.94 1611.14 cv
cp
f
1278.4 1677.51 mo
1331.48 1853.09 li
1465.65 1872.41 li
1278.4 1677.51 li
cp
.388235 .631373 .176471 rgb
f
1387.07 1469.84 mo
1278.57 1687.48 li
1331.48 1853.09 li
1389.79 1749.54 li
1387.07 1469.84 li
cp
.270588 .439216 .12549 rgb
f
943.398 1540.26 mo
1396.35 1467.25 li
1389.79 1749.54 li
1034.26 1809.35 li
943.398 1540.26 li
cp
.454902 .741176 .207843 rgb
f
1122.78 1668.57 mo
1124.13 1668.34 1124.79 1668.96 1124.74 1670.27 cv
1121.19 1741.08 li
1121.1 1742.2 1120.57 1742.84 1119.49 1743.03 cv
1110.51 1744.56 li
1109.43 1744.74 1108.71 1744.31 1108.26 1743.28 cv
1081.56 1677.62 li
1081.07 1676.41 1081.49 1675.6 1082.84 1675.37 cv
1091.37 1673.92 li
1092.44 1673.74 1093.16 1674.17 1093.62 1675.2 cv
1111.24 1721.71 li
1112.56 1671.97 li
1112.64 1670.85 1113.18 1670.2 1114.26 1670.02 cv
1122.78 1668.57 li
cp
1 1 1 rgb
f
1169.27 1671.37 mo
1169.42 1672.26 1169.17 1672.95 1168.09 1673.14 cv
1145.65 1676.96 li
1148.71 1694.91 li
1165.85 1691.99 li
1166.75 1691.84 1167.38 1692.29 1167.55 1693.27 cv
1169.06 1702.16 li
1169.23 1703.15 1168.79 1703.78 1167.89 1703.93 cv
1150.74 1706.85 li
1153.83 1724.98 li
1176.27 1721.16 li
1177.35 1720.98 1177.79 1721.37 1177.95 1722.35 cv
1179.48 1731.33 li
1179.64 1732.23 1179.37 1732.83 1178.29 1733.01 cv
1145.26 1738.64 li
1144.45 1738.78 1143.82 1738.33 1143.67 1737.43 cv
1131.92 1668.49 li
1131.77 1667.59 1132.21 1666.96 1133.02 1666.82 cv
1166.06 1661.2 li
1167.13 1661.01 1167.59 1661.49 1167.74 1662.39 cv
1169.27 1671.37 li
cp
f
1176.88 1672.65 mo
1175.44 1664.22 1179.17 1658.96 1187.61 1657.53 cv
1199.46 1655.51 li
1207.8 1654.08 1213.15 1657.79 1214.58 1666.23 cv
1216.17 1675.57 li
1216.33 1676.46 1215.88 1677.1 1214.98 1677.25 cv
1206.01 1678.78 li
1205.02 1678.95 1204.48 1678.48 1204.33 1677.59 cv
1203.16 1670.76 li
1202.77 1668.43 1201.29 1667.39 1198.96 1667.79 cv
1192.5 1668.89 li
1190.07 1669.3 1189.12 1670.75 1189.52 1673.09 cv
1196.49 1714.02 li
1196.9 1716.45 1198.36 1717.4 1200.69 1717 cv
1207.16 1715.9 li
1209.49 1715.5 1210.55 1714.12 1210.14 1711.7 cv
1208.09 1699.67 li
1203.42 1700.46 li
1202.43 1700.63 1201.89 1700.17 1201.74 1699.27 cv
1200.21 1690.3 li
1200.04 1689.31 1200.41 1688.78 1201.4 1688.62 cv
1216.48 1686.05 li
1217.38 1685.89 1217.99 1686.25 1218.16 1687.24 cv
1222.41 1712.19 li
1223.85 1720.63 1220.04 1725.9 1211.69 1727.32 cv
1199.84 1729.34 li
1191.4 1730.78 1186.15 1727.05 1184.71 1718.62 cv
1176.88 1672.65 li
cp
f
1244.96 1663.92 mo
1244.55 1696.23 li
1256.04 1694.27 li
1244.96 1663.92 li
cp
1266.45 1717.99 mo
1265.64 1718.13 1265.12 1717.76 1264.8 1716.98 cv
1260.05 1704.3 li
1244.08 1707.03 li
1243.89 1720.54 li
1243.84 1721.38 1243.47 1721.91 1242.66 1722.05 cv
1233.06 1723.68 li
1232.07 1723.85 1231.53 1723.39 1231.63 1722.35 cv
1234.77 1650.78 li
1234.8 1649.86 1235.28 1649.4 1236.08 1649.27 cv
1248.56 1647.14 li
1249.37 1647 1249.97 1647.27 1250.3 1648.14 cv
1276.96 1714.63 li
1277.31 1715.59 1277.04 1716.19 1275.97 1716.37 cv
1266.45 1717.99 li
cp
f
1309.07 1636.83 mo
1309.97 1636.68 1310.6 1637.13 1310.75 1638.03 cv
1322.5 1706.97 li
1322.65 1707.87 1322.2 1708.5 1321.3 1708.65 cv
1312.42 1710.16 li
1311.61 1710.3 1311.01 1710.03 1310.6 1709.27 cv
1290.34 1673.28 li
1289.89 1673.36 li
1296.37 1711.42 li
1296.53 1712.32 1296.17 1712.93 1295.18 1713.1 cv
1285.85 1714.69 li
1284.95 1714.84 1284.32 1714.4 1284.17 1713.5 cv
1272.42 1644.56 li
1272.27 1643.66 1272.71 1643.03 1273.61 1642.87 cv
1282.5 1641.36 li
1283.31 1641.22 1283.91 1641.49 1284.31 1642.25 cv
1304.46 1678.08 li
1305 1677.99 li
1298.54 1640.11 li
1298.39 1639.21 1298.75 1638.59 1299.73 1638.42 cv
1309.07 1636.83 li
cp
f
1085.68 1568.59 mo
1086.76 1568.4 1087.53 1568.94 1087.72 1570.03 cv
1101.97 1653.71 li
1102.16 1654.8 1101.61 1655.57 1100.52 1655.75 cv
1089.19 1657.68 li
1087.99 1657.89 1087.34 1657.33 1087.15 1656.24 cv
1075.42 1587.38 li
1068.81 1589.4 li
1067.44 1589.86 1066.43 1589.24 1066.19 1587.83 cv
1064.41 1577.37 li
1064.17 1575.95 1064.69 1575.08 1066.09 1574.73 cv
1085.68 1568.59 li
cp
f
1137.03 1635.07 mo
1139.86 1634.59 1141.15 1632.91 1140.65 1629.97 cv
1132.07 1579.63 li
1131.59 1576.8 1129.8 1575.53 1126.97 1576.02 cv
1120.65 1577.09 li
1117.82 1577.58 1116.55 1579.36 1117.03 1582.19 cv
1125.61 1632.53 li
1126.11 1635.47 1127.88 1636.63 1130.71 1636.15 cv
1137.03 1635.07 li
cp
1102.08 1581.94 mo
1100.33 1571.7 1104.85 1565.32 1115.1 1563.57 cv
1127.3 1561.5 li
1137.54 1559.75 1143.92 1564.27 1145.66 1574.51 cv
1155.16 1630.3 li
1156.91 1640.54 1152.39 1646.92 1142.15 1648.66 cv
1129.94 1650.74 li
1119.7 1652.49 1113.33 1647.97 1111.58 1637.72 cv
1102.08 1581.94 li
cp
f
1191.51 1625.79 mo
1194.35 1625.31 1195.63 1623.63 1195.13 1620.69 cv
1186.55 1570.35 li
1186.07 1567.52 1184.29 1566.25 1181.45 1566.73 cv
1175.13 1567.81 li
1172.3 1568.29 1171.04 1570.08 1171.52 1572.91 cv
1180.09 1623.25 li
1180.59 1626.19 1182.36 1627.35 1185.19 1626.87 cv
1191.51 1625.79 li
cp
1156.56 1572.66 mo
1154.82 1562.41 1159.34 1556.04 1169.58 1554.29 cv
1181.78 1552.21 li
1192.03 1550.47 1198.4 1554.99 1200.14 1565.23 cv
1209.65 1621.02 li
1211.39 1631.26 1206.87 1637.64 1196.63 1639.38 cv
1184.43 1641.46 li
1174.19 1643.2 1167.81 1638.68 1166.07 1628.44 cv
1156.56 1572.66 li
cp
f
1280.41 1606.71 mo
1280.98 1610.03 1284.33 1612.41 1287.89 1611.8 cv
1291.1 1611.26 1293.59 1607.88 1293.02 1604.56 cv
1292.42 1601.01 1288.95 1598.65 1285.74 1599.2 cv
1282.18 1599.8 1279.81 1603.16 1280.41 1606.71 cv
cp
1304.71 1602.57 mo
1306.39 1612.43 1299.74 1621.82 1289.88 1623.5 cv
1279.68 1625.23 1270.29 1618.58 1268.61 1608.72 cv
1266.89 1598.63 1273.51 1589.01 1283.71 1587.28 cv
1293.57 1585.6 1302.99 1592.48 1304.71 1602.57 cv
cp
1226.72 1564.31 mo
1227.28 1567.63 1230.64 1570.01 1234.19 1569.41 cv
1237.4 1568.86 1239.89 1565.49 1239.33 1562.16 cv
1238.72 1558.61 1235.25 1556.25 1232.04 1556.8 cv
1228.49 1557.4 1226.11 1560.76 1226.72 1564.31 cv
cp
1285.46 1535.9 mo
1287.17 1535.61 1288.5 1536.45 1287.74 1538.23 cv
1248.58 1626.88 li
1247.99 1628.27 1247.63 1628.92 1246.26 1629.16 cv
1235.48 1630.99 li
1233.76 1631.29 1232.44 1630.45 1233.2 1628.67 cv
1272.47 1540 li
1273.06 1538.61 1273.42 1537.96 1274.79 1537.72 cv
1285.46 1535.9 li
cp
1251.02 1560.17 mo
1252.7 1570.03 1246.04 1579.42 1236.18 1581.1 cv
1225.98 1582.84 1216.59 1576.18 1214.91 1566.32 cv
1213.19 1556.24 1219.81 1546.62 1230.01 1544.88 cv
1239.87 1543.2 1249.3 1550.08 1251.02 1560.17 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Veggie bio diet logos flat icon collection.eps)
%%CreationDate: 6/1/2020 7:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6f5`C`Z7)U5*Pm4*BE>ts6]cs[,j56TgBQ"YKP@[&Z.?"%\.Q;ud#16e!Cc2gNa<EW\2rdlB)e!nWdUX:_5m[Q_4Ee0!*rl5
%R?a&?19:-BdaWNoljhcalArHo(%QZ&0#&5#otujIXafa*'tY3D0lNAS)WLiYA?T^I5r),gl;KMQ[q'q"6d#Y\##>NJ,MDNa5:u+`
%dHH.*;Ph`e^=t%,'KmR@MpLkcU0i?Jp[kuMDdJG/Fcqbh_GNPo4n+JX]k'HQTP+$;r>p5;%DYb>P%DH@!DkVG8g,c.$htJ8@sbA?
%m4Q<)"P]c-YBHUPRMlV@]#SKZ#Fj5a_5L/6,bfi#4EcK20)iW.YJLYI2q0hR$b<r:nC/QR\O3W(f]!9,K5U0c=!S?"#@aqTs,'35
%njf&E)7L;OU.NcqYu3D_mJ[E2pB?1W@-B9DW&!e)o^/m+!X-C([hqW;$`Zel_&H8gq*'@cK`:L5J,'j;Jo6c'Quf8lL*VX\U*::*
%,A#jN#q+<E"1]>4_]!ZQ#3uU$Jeh_CicPJ,MBQoR'(^*-J:BlcN%ZB,ogsZ/c='MQ*s"\2cJg^KfIOPfmLJ8c3%_iE5FBN=JaPFm
%3KNqe;=4r]`Z:?C)\`54`saB3ZK+hI!q9FV6H2/ppI,h6c4-6\C&k/aJR?lVDh`e=qG`r6.XaV/5SrGmNstmDrK748FGI*\XaaVs
%c_Bm[r@rP!TW.I[1i-#ns0AJi<1UCH@F:m)HYU%Bcr]_o(AtA*k`5!Vmq9`X=@lBq0*/9V,nLEs"G5RhLmRuYK)bLH^n2bE2[gaZ
%s+UX61\`mAZuCHTL-NaC21k=ONtu3W[+l>e#\P^?I:>ao(A)"[Tko@JIGd3^/I_Ut"s&E6Ma?iN,Q_9^7^t,@-.l]=6Lr%O[K5H0
%pBMNE!@@h_fRWQ_A:m<(Tf+)%V@@'sE'W61VA'K*F45/0rrc[?RJ\i,&@Ob4.JOjVOGKE\a#:e!n4>8;_]53N)Fl!Emo$nb7UhFQ
%h;fZR.4#8."!f`aCbkV.T.e'pL^".b)\Uk_;oF7(+^F]lTMG0lbQ*XGa,`[7)JBCBM$@BQ:Je5SB!*ZR&WtB`URdGb)L<b6+8@D8
%1n\1R>RQ?uOT-on"bRBlL;dk'"OY,f+\-3lb]GBnMX&M`Ck"_0$:G>PI0`e;M[&`Ka=EB)Jn>'t#Aug,$k1(o$QZpA?]>X^c[gO_
%J>gB1kkWV=Ljm+nVMS0JgK6!.I[N5.<'ihs<J15%"e"Eb,cW#.3oe0l=:MW8e6)PM%[Ta>oKC'"$l'h=Yon";K"U)7_Wui1+Ir?L
%'qctD!;W`$b)7<6Y1X!D9Li##[]06OfLEnZmac*(mZJoS#;UG&3s:kZV)n%M,c@Yj9!SR'gOgj[V`fVe%ck/S&eNHG*TpuS9>_%K
%!s;J>5e:3tVPVV^4fmKTJ7$8^^VM.D[`$"kLPt^LE!XhRCpsH4H\26.o'"/(qd[tpJqksD;n?0TZQq43S=j;JV?qC77L/^+1c[rU
%r"`(Ba@[!%+8-MX/&=RlE0p:b(/GZe3c$;cr?1rH^/]sT[QCQc]-/oeRXl%V%@o#/cHgBlm9j>>[p'V''J`9lNk[Sd/];>D$cTnW
%d<\qti_5^\k&P#3=D\b$@A*+*GpoI\n#?;b6bN<?;<]tnE.O"=GU$NPRE1EQqA;1Z%FUa^gfpZ*&3F5+6@Nu<L?$*MK-bu.3-%CC
%GZd!8W@HX+#)#!O$u-#7JN1.g=t`UC\@j&,`9IImk%XC%$s467]VsO;$TY`0b`SYlB&(E]3J<-S_FAIf5,0j%lWpf.-8]7C2Q$BZ
%:J,i0-V>)I+1>>gGJUei)&h"\6r>oP>bn7?6E!M9klt;Kr*GmB_O@0pYEoYT(f:_4j=lnCD]/ebJ'A5Vac\7!dDhGU6$,#fgr>W6
%\8mh2.i7!NE\3^[N_9>7l8%89RDYEBNAJ%Ic5];IA`LsNI(>4i\+/Q<^>-_pK?d9^Hhh\akcBUokOO*)56h^Ueb=16j:AP'm1<"W
%k@X#eb;it_AsWAB7EO.`-FCG]EYTsBCDX$0Q\%rF5M":_CMYjELbZehM.'R0]@F?Z0c!Ou7j9jX-k^N=^emhN-0chijg"BWS8,GK
%Ou6>NCV86%&8l9ob59O"L=pq`<0[$]U[PZ?[-"PU:2H#1[k+,ga;SI+FGjgoeHUS[OJ;P?,g:rHXA6;El`HX:jhYt"3t-iG8<<WN
%SY:cH9+5gERXA[\pj)BAbl'8jL?);>9!>=q_h"gE0kg2,##YA)U,s@3_ID&dH6;!Si4J[*Zn\__mZ9$\7C\l&D\uK'WKqhA@4dJ1
%.K/GScG7S+#6/KYB74q`<_WX'(hu4(A`$_OWlIqQ4ZtnB3;?P.@."2;E!WQ=4QlsC'K?6I5YS;22C.K=gDQ)(cCXT1BuSu>?bW>g
%'8m@;fI4eNLqd]9Fdbki]&[s<OE?tFP[$js#CiFqch[@<UY',QCpJFFdIDX[/>%D]`J,mr0k77*ou($&X.RP!Tr<F/-HSJ,[NiP6
%*g=p0;6s"2c0cE]W<j$#27^sa4LO`aqI\V2,msg1[Fpb_R?%NpO5FPf;Y6miO8-X)h^doFCrFuKMm;^n]REcceuI`8&RKsN?2Y6'
%@Bg0u<df7'lkuqOqHcLR`p[*hCRbS*%1D4$3,@'r3^s2>VRiD?D+1K%0hhL&XmWCQGV<j-GVG4^(WE`C#8HC`\&]irDL'*^lOn0(
%C@r62^4kjRA$FM[81P*ZVNFp&g!mgiQH=6)iK3D-aZd:q"_X06ig"*6=2ENNRi]>d=-fq)Z<_(l-Q48CLZsC-Xej/X&>2+D4l!I7
%FM&CJ+3VSmTAlV+_WW5)[4O4?Bo0@j3XR+/[QZ`e#mUn</fD^ce7U$P<a3;se7#N?_&lcA[dpI?,HA(6Wu_A2n"--!_G&EmFo-U"
%<3ZAm-58ghZtO3)K*Q/"/3GW]P,3,64)0%#cm5p(bqUB1bq?Zl&d'5Tl-a05cb>Y4,iTd^`3iba)Aif\5!oD@9/M+hBi;BH(6V)c
%-h.RS^47,2#oZ`NE@mO>/n(DO-eha8"Q+*"W!oXKNc8Yg`e1N^ZAsP*A;uq0<kg^A$&ml3#17A)la/CnP+"#RZQP"Y!S0@mJ(Ft?
%_80rjkU$sS,oi>mGKN=i6"XE>(Rn*_<Jo+3ERq.nFe"Z!2Q8)eDC^m-nr7PsCj`-c'HCZ77J3a-/dd>I\L+j8=A6.!\L??%GrEB8
%/d`(DRp;1P0$<(FD)SpQ/*?/b,bTP2>SJ`G\FM]G46<3p+L<[9od1Jd_QmL)>SJ_1>PV;!ST7SHOBIoM^W9]LFj-i$R`d-\f.uN0
%]arH,b4+-/`;1KLYs&ik>=YsB&U^YN$WEnr/34I,IDHMiFjsbX&\lR^5>+5Fm+Yg[4QS"J)n@kd>RPK2)?pL+Ec!&Q2KEXdjB@QJ
%^MM-%mq&YaE)JVmD'RU1fhuZsXF2U/D'RRh;XGPXe`8eYmn;<j?8[mROC6pnjgEeBgao5bQVh;"N%df,=[nllUu7Z&f+Pqki8]p%
%@--n"g+LPeqe+^S"@V0jpCFQZh'[Zb0;7NJeTdK/#F+Ym)=)HjbP++Q`.rDE_]#$^@O;UEa+\2[*B(rlClSlX&J#Z7Ol'sEKtq'!
%"oN]M5(ikVJHqKZ<+aJt2T]!DW.1kR@Y'M0K$@cH6s88UTuN&LR4m]9II@hV<m<Jt)dL9,L0_R;?%mF&MoO?qM'!8!Ips>rH>HH[
%HptU6JmR&7,g7"0l>isl%7V$6XIH8qSt)6JSh3kPA-D8M;@6gMM0_,h^UM.(NtJV_l/AVW_7)g6#6P4E<$hbYJ^p=s]tHQ4%`,QX
%+BMks&p0K-$qM.(`NPPES5-&bQ&bc:LG+)a-+T$T&Q@!Bg*?c;.fD:&^RP2Ze_L11_SLl*`ljkMhp)/hB)d(]s/YIgDYAQ]I/b!c
%,B*n?mleOp9K%73bMVpIh""l?qTYW#B$XN`S'@Pn!^)UiT!+a!NF?[J>HKVIAuHk,c\=DA2Y"emR-b^Cmo)Hq;=&M]*>UJN2;eM*
%(`98[=IQjT.iG@S-eU"R0?qYW:eYB1"h\2I[$8g:>kY;27cKd/2c<9#(i:I-@X)Ar+^:,Ns!Dri@d2ZBQu!E_gP![\[!Rkf1eA1<
%JCQq,Fbe4ZRl^DnV>;Ha7$Gk?MC+(hqkT_Vfd;1A\%'fN*'a$`0uD8TTA@>Ne[p!$+ZP.@bMof]#!-9:I)CmIb1\I.9U"k<5XZKY
%*)"ONa`<D2RC@UqP3mhkps'J::%2SfK+H1^C]NdYrb[o&91jQHi&VqN.0?c<YH7B%i^]L8@g($HW=Y;#f`YV>JX9*hAJ9=A"C=!;
%Q_hVC@$lWU]^Sc8'S"d=?8dA$:#KRrGZdAkAU-bbpW<#0R/g-MGBh\"K(RkkC;8RZ'2o';2Bei,8uD8FC]`dMJ5ngM!p?52<Bk:$
%B-&sd9rq5:g?NImDgTjLDnO5&8[^[,9ltO<m2P/s_MVpTQ/h!PVN#V$P#nqdOK5Q]ej_T9:13p)-SS7LYFF"-2Q&2[MbX4+k7goX
%7$IJX\YS@p2N2^G2HBQG[gRXl<W4aRaP)ue@pB`$`42c\2-Lc2iS^B,#8B/qZ0KMBj]=ImC,$tA<s)/T0h'^*XnaK#j$1orQt:HU
%V_bPl1\4m*bMIJWhp+U\"h]3E*82S+15Ef&bL1XL+:^Fs]1oBN3kjFueFu2EHZo3O(fQ0!0eUj]`'XUHFC1d(0#]P'LFq8tRlJD+
%GW;0P`_%/bd;KT:^qjFma&lJ?GMUjJ-B>?fA$"D.CuQ;$36%E*1&`')1A&pq!\<<r]DH4mRV8ons,u[,jI:5ZRF4IhIOQ[&(7`XU
%Z:D_>a+GlrGsAOU_rZlEL")3aZ<ao4(Gf%/"CSiF[uZ64U@kgRo=?Xd\#C#LRA\010fa(.G]'PT93Y:2OfYrNAI/U0mk4=KeNlQ)
%/$DB?!ut!2ZfPVIE>o9YiM^.!H!#I?K:fm"\PG1'BQNO(VUer=Yts9OXJF+G6/VLjT\gLZWK$0=\.>Cf3X5gIVk<22ZMa8N/2q!3
%6FG8WH#3VZk1nqeI]nDX/9EcV?_Y0Er#doCKWTL1(CgeQTBmjA,4BjNs8Sb5&o2*FXkS"#7KUa[&C9CF,(Y"-pPm,/jn8SXFuI(i
%KEg*(Ee!tdfm%QWDf4U[D7mDZFbMa1gu%GB@9AZLh4+:rl!YD6.r>-oeahlWVJP;<D;;[]41B4m2X]A?S[8,YhohS.6>,?(XcPX-
%npLUq%M+EHGNnNEWnF6U*&[NIrAb9ZHB!tqpcb$!r4W7N<Z%BM\HZs=c^!.QO1@8P@L^YK=<_eC7sHWJJ;iRmU\higj6eFYfD@t2
%G@]Z]U..PGbPmB/71'q+=!&e^c*pmmhdKj7^,G9_';'DM7X<("CUo=74""VRjBU4=Z`t"+.+K/Vcsu3bagQ,;?QO^3Aqh4uqn-p]
%"SE_W@^r$NX@gSuIkeIV8;bJ#<55Xgr31+lW\t,61JZ>D=]f*COt^CW75RP?[$8fo%d[G6@,JH*2L5]0#2sJAnFd#>efO?oG;.%j
%4;1pOCLY0uk<b;Zn-q1$05J0NP`Y05_O3O$bC%HUOc<2WgKf"%c@I)];!(dT>$?")h;6ge"tOO.9Qf%Xg/nRs7^djB'L't+.ndbj
%6V.W[c2BAkL?);>9!<&iU5`%B)i^SO9sjD@<;ADaeje%66$^FZpJ[Ih)^B#0m%/?70GIk)BDM:f\G@q]d@OY`"V/9.iIE]pHABBd
%E!WO'%XRpc$64Z@_Z<!i\b]KlTY##Q5[n"tYZBKJ]-Ze:]BhE&eTE#ob&N+MbGm'_*21%1aq88-2Tg$Ym.cQl>R,tgd>dIq)qQfr
%]X_it<K3U-,<OIh5(;fGerh8li>Fi:lh9_j?#T%P,ggg"@Fk)?Si*t0f)/pM!<KdL3&"hoA@TtFjo<a),lV85/c(8J3eW7RYd.;9
%BbeG<N'U(i)G:B9c?!F$elH!KI.'Ed^5LP9q^^Zl\VA]7N!pMWKt$W.A@T@k.2flRb-Vk)Y5Y;EfO_5b2*PP[QK_P)]om<#@Q0#>
%\agpFDC%Q.X*r1?JCco?!9\Cm[5=eZj1;X%6l=I-laD]%hOsjc!rJZ[dePN/`;%BQbqMf?EFsDHU6C$6`hj/2p^T7\W+`kTBp'PK
%)jRfF,N"@"g_#Iro%i!#Y[OkLZ^L:Z$a]J'P=(Fi"&"5]1biNE3&`:f+O<iSQbSB'XL@)u(3VOTFj%1g2k^bafg.'*WIB?WiQTHJ
%RhX''P@F?W7PNpM8:.>!chj:Q2T<k$cu1*&e,(FK]EZ'B1PT04mqK)`*Qk!jrTeKWSjg2&fDRH!H\JWD!<YqOWB+`bdpo7b\KHVp
%S"qW;F;'V\m%K,[RN_P+DOXSgI+'!&of_7%\C&]Km'0dMr."b[b2N7&e9&\81!gl5*Mj8Ar94/e0D\cDcf2tej.<)\[L,e5B>AgU
%+&Y=YkSmck[V*Ad";#@PJ9<IFS"MWCm1)U6;JbF%>erWkRM5V^JUkL7^`RbGjRiU"h&VNo_U/A[i:[!Gi'Y`S$O?LZ*`DJ2+\1hV
%(]8F\5(/%?IKDi</hG>P?;#>I4KQ?;!+7Y":f'>8A6A*m/i<i_rEk'QQf[-)b?t;,?iTfNs7l?gqU^5poq-a4^]4;jf*<NW;.+EU
%dptZ"f0l6A=cu/4\rK!mgN*P2c`f55i<(Pq,Tcr<PZ0j!qU]jWMb:F)FKQM](meD/g'oDJ4oRlSjk+>tJ:H%g?N-kg["PrFhK0`D
%#3.Z'#mJLJP+I#M`mk7r.XG4q25jH%f[^!I(UU2LocW`@AZ<[o!5,Tg_#i'P]mGDS+TK<^$F9d2+L<LR*p[TTcrefFIoeQ:Jtf/8
%pYH?RTtP[)rfDF*6.!i<W>u*[_[!&Y"`ZAXo'>"nC.JfYX[UU>:GmHol&e_S,XPGm8g%7)%cMPZk1R>=/`<$Ha^-0-0G'L.?R/Ro
%:D?03F71-1'O;PH_cdp;1VIm"QsM2ZJ)H4gfQK+h*obii1FtCc!V,ng=Z"D8d-cNI'WaZL:Am9*:";AJm-c"ApKG^5lfSWEpDQSC
%VVc6<+#33X!jC<V+c3o6b'<Y.UJ]*M:gQ>+!?C1)DGs#WOR?%R5&.53#&:%2hV8*3"XP^+1eknY,P\Yj3!"#_VC3[:l4aV"M_`sp
%YNTlY4H,4'1\oJA=:n(dEfkEbp%Q<Kj`g5+c`V>C4@Kbdo7IuIlW1Jj)R`[%L:m=S/-)ln@g.H86+9E$Qr>];_j%H/BMQ;6SUq,R
%;kYqA/c]S5kVb1B_3?US$>5`68Ik#rZ]rR:dhLkY/4:lB=UA?NVT[n59_>qJSoPM!XorY).ZPFPh*Ld2b]&oMopXetU8^%F1/.EI
%*fhf)Y69loSNQ`jN^ap\-[>nH.!J?Y9R*=(C&j2/4In!@^+s;fWKm#JL/!m>HR4Ebb8I[8[o*<<>!H(t*!;?MRKTZm'fjNH@WN&l
%Vo`l@@4b&RCZV!\pIVYnUIKI5^-fcT6D(7kr<bP'pDKZ29Dr`3L,\13.j%-F9_B)CStW,\MC+/o&9a5dQ^adc3>`7HI$TR!r'C9g
%;r&UTBP"6'q]r<5qZJ>#/i2c+^Fff'-d_7as7<GoqWgBGrSRYOO2([d^]*i.s7l?g@0&UjhgbS8nF;#-pOE5;s(6h]S[ZLS!t\<P
%XDA9a-_P[SWX//1L)smN3Z;1Um+80C2_&^4f.\3T@"]Tuj^F&rhXd_3E/@06Cn2d6-GM3^WPsTY)an(bg1gs"_?+U"U=kc%aT3:k
%9MZ+f),[KH*AGG8fcC_^:NP$.o=kJ)T,L\$QM<79ZD>JkAZ64L9@CW.;>6M/q0Ws/M(QCae`]k?f$^Fpn]84WQ_F6Y93UV/&oH,m
%[Z4K[`/(3@9Qr2Y99k?saFHtjSq<8_9Qg5D%9T"t4<eH`KG>>*[gDmEnHerCrhs^Q(-`Yl(qVB(PsdoIg6`ZC`c*=?#jF;@ai@fC
%<^$`:`mP]OiBT4B2AL6F1;rYe_,M_$q%QbQ%;\Cpr]s_&j<(HLfBfe2]dko6]jcbiZ'a\S<7lG+.20VmQtV\LCMG,8MBjpa?HMr8
%Kf0&BJH3"lfnpDr)oV?"A3(pT,/1<]8AK(P<^U!+(TtdE#V`CV.fqb<91p65NS\^S+<)jS.ZhgV3_`1m.>&omAq5D%*dDT>N=$J"
%$p]Y0-\#il=q5Eq&=rY`dNb,h_J$#,q&><BG6Fc_m[3qRVS!AX_b:-2k3jl>fWmtL"KB>K$MYk)#`nm@8]*?RTlMQ3[IfL/9L6[?
%?DE6hD,/Yu>7m8Z,YjY;_lFBsOI.X;12NI.)J!U8(*.;kk"nE?[#XD]jfV8U"K]f&.O?i8'^EYN0K?$OeaHRB6<#;klsRIQhPmGL
%HD!)t&`%+GW7*<TV^P_4Pt(A*)U##,Zn9RFU5$hToS<B/]`H"gP)hO9NCA7"D,oA(cr(d`a]S@+7832;nS\S7!St1%ZJV!A>[@>^
%%5TbPcE@bn8-,\Z%?'d/0>A"n[E4LYO=1&%.PN<];oko7Q5(O/35>UZGDDuJ@;2`3R`QqN2%-dI7anTC.5>AF(1>2p6D$Q3HK4Z#
%e/pVSi5nkDIuo)@3t1:"pBN4:i<F.]'N$]qq8.$Q>@,V+99o).IUA3/GG#?-]<PgU@3Uf6FLJ5\^IYTeFatE&Qa2Re4Oe(LVLU(F
%.T+SshP(5I$j<]s&Z!fTNSGnCX.Y9F3Z^TC_cTa,W9$WJ5@S9R:7m*M!bO7i^S'\07h!"'#EVV3oqK8&&=EQ+fXrjs("Y_.P&N!$
%k/:((Ti^Zn9UE(dT]B+olUVFO?;!E^0240MClpAn_9lT:9/m!!dIO:oHdSX",Sn7m,[:=J&lS;f9#E"O8!Rme_rd1:jh!?Z"pcr@
%_2RWl-_`Hd7#N)14O7IIPLCM.pb8V6F4`?^GuC$.Iur_N2"HO3Mm>d-,?_P#FN%"F@<8*\^qauC&c2t,MM>r>I&TAr!>_n9#qZ%d
%A5&E/i>!/%oI!)Uj@c=XUH`W_5Z$_Q6h;7I.1Le8E^>YWm*tY\-XWiampUBn6C/Tf9E66bWu-WpQ,.V_,2.e4]k,8Y[>N3<^6etL
%'lJY.o%cKdr$dP+2f+$i[_-ju6>.U&pE%+9110sq.=m108S[gf!%^/W0`S5L%*\QW:``dp-DMn2ZJuOA!JX=E=41W7psGp[N=.$k
%=$^%uUZ`39/"l$slF!S[RWkd`FEl!iXe61"9jSKX.u*kc+X`bpM?opZ(DumM5Z;?a]qrci-Ei+NQr0Iig4G-I\<_o.CV^kU6?ss9
%TAWqjT7IGSDc-H[YiKB#)_Hf0!te$iYa51SYY"fC$"(am!h]2tm4ldg>n@H&%:kO3MJ/:_(m)=DUi_2<eEE5F9f./M-7YHT,!880
%T((1rNj=X2hWn$591MO*9JM`@:sT`"7;BfVGtj+*KGo/6ef8sj(:fRh$V)BQ^Fs-sRO6%[7XC;]LBuuN<5d_3CbW4BC!%Z6E]#8V
%8N&FSC@PP,XR`p+-HcP0$5#$JUW<(U5rQ@8JLkX4W`TBf^Ell8Mdabu?5RsChJN[H]2ElYmZX=c;9UZ18,"KZd64Z"(%5j<Fo?>L
%Z^Ts:8#/0+g2O;pcQ*hp9Ilj/5#p>fFemHU=?]CG\iL#&?u%Q=EID<EMed-(0P*<dMK+V08]LM'VO:5o0/B?!n?8ZM7+#<>:^8OP
%Q>#ZJ2Z>k3<8B]h7GGbbXWH+_3s_;=b7%@pAk]BiWWPY9-LGIZTYlj*/W!?<V@BQ_QUHdLE`5g5K!=Vs%9gV1$A!i<4<VVhW-W11
%U+ETPMAaCP=Gn0YW'0@TlS/*#[9@H#=&t,BKjnr7juXgANHD7kQ?aTMDo`qTBs6aXQ6facA"/e\02%T8mMTk88D)0`A%tIhV?%XX
%F3jM`F]@dm?>#Kb^hV5e]%t<cU1S'hd"K*$,h$T@jkcZfLf`khlEF]hW22W$c`eS/e@Y't(u]PGEagA8n'g]U,&413Ud5Fj)mF;M
%fE`YQ<"qN=<;Okg.AGLcDRtB8%s0Y%Z'V>*f`KU46d^AjX$ET9Lu3M;A./UNm5AQG^6)71kO[ss6O/=&]pUeV@=frW)"ei_%)`b0
%W%jfuOJs2(^e0l1TBfkkVQ<RP0Z_'h1dV0K/oh6Xam,8N6o,$:R.,><[HC.!AW$`T-*Ra//h=%W[m-Z=E1:AG.Vk<BdN1L`c=W%S
%1c7%("8-CFkR=e@[-Xju;n11pXqNX%1o3ebdjJ@SdT"ngQ/cH,=K[\$]$1H_h.'D/_.YE["J`5L,[)_!2.YOf^558=)NEqr2&V<L
%[q!F#EKpa8Ar?]R8iomR@ffBi?"cA<9fh;UP&3OOR&/7=RY*#,f9h>$6_Kd#-GB)#%HJ!,#\m!rd#dK'^jIAdW!-Cf/DSSkK(2G)
%d-OQY/>AsMrYW22.2QZB>0U_aS^?='kqm6Q1t?<]X%_3lV:OEo%ClpFPGUSK)FK4jTS1b>d:l13)Fb>E[:"rj+15dBNVta;i=+R%
%0i!7)c=!R`e>tMK2N2m8CW&;o,2\dO&+gJh*/YVTg<L:F`p"fpV*0oE>5XL\PsX3q@e7QJd20Fb=MX5I76QHmm0O[3bDVVJM.ed[
%15-X!?UjIMX<ki/7/%'Vc70e@9qeF\&7^I=;@U"bCh>AB#4TP\<#f[b6q6)YP/nYB-AYF4@b<k$#@Nn>S/&:fi>MD3s+63CEF'P@
%+b0->pu<8Mn[muZ;gLl2"9V08P`K5tIK4sK*Xh3oUiKZh)Y=oWU'epoTZq#Aa""D-baM-.K$mXp$&pOZ`!8#I'9Zg\fA/[4r\[9V
%aN!;d*bGbS:WgNd_I!J8BL;a>64B?2DPET)ANEh9Wsn#[.@PSk-!3pTV1ch,NMZp"]nQP>'UB?K0;BF5YiL-WSoe$>KVYW9;CNO,
%P)sP.;leGp:^s\aHZ&00a[mW@\LPUZo#)StS?B:QG05Y@eS7e]G5k7UYEE^8*)Br?R6>&#[QhV.XB,3genR?1fX=t#BA9(@eC1&<
%s$6<Z8!:S8q7qb+#(E\O,-UAtpoms'J$pSUFHS1o,MDD"#,1,6l^&W>fXIQX\W;q-ph;qn^O"?-:7[,HbNN`I((Lf3f,+':pX(C[
%_68:ZDE8=l3e]OScrU2o=aOo%i@h+mQ[G\'HMhFN.6QnVl8A$R5*:ba"6jLW//>:Jg5bgaN>&Zjp`-9hi_-^[CIN:IENkpQp1muf
%$,Y(3hTcWfT_m776U)FuQ_+/,FDV!D:\F`Q'CZeM(R"6q`KTbppVd"9rg.0^m3q7Cg\Q6C\s%PtFAi'j^'btL?NNW>>!;Aj].Nrj
%r>>c7Shf6EX-*2;kmmK;o)U7**;m8ZBru,(;\kX>-l;2;l=5VG=mS%XE`AsmOO-NepNm>c^-'A>[I-Q'OIXB^J3`Na@-AC@granT
%aL42;6+7l=X#lbS3nc=,#smAfpA,1*lq9cI(L#Fe@F##$V:1QS<T47/!T\TOe0e1pE2VA[CsSr,IuO;)MRLTjnm'lcNqtf+Ii%[u
%AM@M43TrFiN49SnY39G1g\X<=(Y"O]FD,Ch9TPf5mb"0=aen<)9TeG=K8Uf]J4hI!Nr_'+bRLOj:%c+-,@=53+:mDePBE6u/=6IG
%%NpgdTLfMFf.=S#[P1$/aNk>VZnU9i+u-Gi,21Fk_K;IT7PO<TB:f5b@TeF)m2<28"N.pNkkGrO[Yt4W(2@M+\Of*)i&Y]gh4^Z,
%jPI5ak0I`BJAi"Q^]_$K'^Vba>.SATK<XtSm_)u3J:nbZM%23QT7P%c&hq'JMh895B,kG'*`-Oc`3`>mBg>tD1*6/I_4kffjqQqa
%o\?+O,86D>BO.CLpnZmUK9fLQBN-FGhMCRL)3m7"K4qd-+cXl$=74V(Do#*c;MrJ.\Qs.1]Oi-0;REQnL&I:3<^a"\jTR?T9#e+n
%Tde]3:+JYC\nrs.)]#C21p,0]J\8,4Ht<$1%$8#OPNUO05gk`?l%M%W;ft]k!GP%YFP`Ur+n=GQmga@4XT7H/_324OGYfIph7a0r
%d4t_h#MJE#Gq</MPU<<&3^^f0L%D5#rfS]Ritj]&SY:d4[+A,h!qFo[F[[BlWjemNB0oa/]aFr[&B4jERT7+r:e+"D+I:*A?ktQC
%HTX27?O6BpKe8C$cr?QDbJZ'^D"3tD(?e$$WaF,!dBGe8".2r2<_,_MimkR'6u)6BhG!Js2!l$_#_Pe'\296FWEuXIC,H/5(ts2a
%E?,&$;a[tpEA38UM/!fC($C-B#UJn8MXK#RpD.l.X-daKke=#mYg^98=,Au->\^*WYEc,h^"-"J$biBuX__f[B;@*aR@X[&l6c;7
%O^ag.Y*ZutLVcM!MC*cQ77/O4>7I(Fd(<-pC1@H<RkD]!+20\?_H4H6Q+g>6MG6jA';hEMY<unEW;96A&:r:<>&Z5E,<D>SnYkC1
%ec)m"EIW@T6p*HT!rH'%FHS6b3q;pjHBu$$D$QI]iF[8N\&DTs-_@t&S6Q1mj5lV[M^1H'7.NA<7<Hil%.8AR9_L9sG'\@r7rRh5
%AAU?9P0CJo"/A+OALf@>3b-Y+i_;G$#a3_3p\:PHFh81<'<oX(7fY6+c0rUr:B`ZRq3hdW\X]W"<G$a`cZU9UiLOsP)r/,&J+aE@
%!LR]HHWJbbD)W)C7IG&b?W+:jqbA65]NtFmRHWa>PB"T*E+GMdj1MM@C]Q5G?MP+>Z".(BpQ9P^fmegedN(6pM*1SJ'`$D-2LOVi
%AE*7>T'HXjR`W4Mh^Iu.s!q;gQE4e%oQ)rkFmTUJ5s,_'0`VmaZoK&87d.jXklfn)&uiR[^*A'jr,<o;#IjL;3BfR9459!>2&\jn
%Id/t7X`B1!mIPX[#i4>8Lj.b%Rd'h.l%+b9]SoeNlM_Sf^n*YLlN@3TnBp'-1,Wkf$lm;(8"Rf[jgZ7dGaMMS75mh&7ka9D]52$(
%QodRDa8m0h%sXT6DT5%o8bQF0gK[K/h2beO3#j!_Hc\r1Z#cOY`^91cLMZ38]Q4_-:iDB4?1U)EYOB,uISY]F!2YnKi=;BDkO<op
%AdCtNP4%#@/tPAtRUr\kFlst7+VOZtX5f%k@)DEL)sRSa!FWS5m8=LDELc)'r27J]m[S'bETTHphY`H6'&_[QYN+[hkO`C_gW+\3
%pW&,ck3(hFRS@e?TYIOL8,r`qV9d(']LkQ\fo@Se'cBESKrjP*4!HU;3)>1cVsn=D<QfhPZ7XDu(CG#V_tDcRf_++=D<`U7^<X0e
%h65nkCV1+lUk=`9GE/=liT=),h<2:@#9QiFq<[;CH`$ZXp)LIEHgQ3XFm&oa4Sae$.SWM:(p/5rc;Rg+_t/9,hE9u",LDl`!g!T<
%Oo*.<H:N@&.%Q$d7.R:rDPq5^m!'.''ldfL&16Fg[L-;?_$[cr^r!80;ff/0s%&Yl^%n"*!:`A7,E^:R*]\='dT#R-4^Uh@asU8X
%%$#a243SPh$">,,eQKGEH9_!E^.C:R7j!"\leJ'%->H>*qsI[?)i9_%iGg/5k&'u?H_qIZoQ#tt4"p+S=9jm$&iS9F'/F;8XKKB'
%5]4W6Bm4SkjJ['&8O]6KpZd%60)"`JSSo<b/n[>E2(c'SH&a*([>Uma#b.#[2I1duBoNodQ*i,)7Ts3ijSW>6+a>``54!FKIbd62
%B1#IDa%>4lhU*L?#4QB7o!rQbOq,+,mZ?dTqhfSm"?#N@(`fJ<g#aF5+5Tko>3B<1oPs:13uI(Le>5CEmts6*.]ptsGjTW<*HmZ/
%]]c_8>6i,$(baFu6t5TPTdWHR!9*j`(<@lX`t)#'Iq7l]c@+u$YJDXAmADGAkC3'0mn+_e-Kt[>7VY2ZGn]G6D:HfX$9jqQe3?qC
%#ru.=DNTcnT=7#0foEi8--`32$5qR;7bV7#A9FV4oYYZJ@Tl$G2g.N%hmi]VWd^ILpntCH7l!rc\3Z=>4!5'Vqe=s:pcVUtf7MFL
%e/6=bnB2qG2ra_iPfX`Ak:pt&Po3%8kJWDTN."HIcY\:SpsVo`c[F%PpZ_&73!MQ0S:KLQV#3/Y4,r*I@,t#grloLg4!VE6#sR$P
%fA'$slN.3l,HeLQ*je#2J5;e?XpO!1`.JX,#[>D46=:"#FW[pJMf5-YRTY)!gmI$`:bQ2f#RlJ;l4OTMT!!+Kn\$*Y&/b2RRS)S4
%ePOEqSiWN/%\)W[g$<;;<<BP=4U$>,;fZUsppRZ-5fgm'N!LCpT+3K-?J\QmE?Q1\Ch_5a[$.2P#mlRJ=qKm$L<?uT4qU>^TEs.E
%qT:N%@NPl%EY*QLi(ONqJbp^7aZidQKtN!!7Ya,8GiQnLQK':]b9XdJ!sD)O?6$P4(]m-:=Mr.IF@?T^_j[Ks6o6d\i$BG;fS=K,
%ZIR)@r-Y5h$N&kV5+HTX7[c*oe8jW&?#o<50sm5T^G=b`E#m#&'uBb-k6<i3QJA?2K;edb+Xc;,EV?5q\FnM"bf#HR>'P]\U7jFR
%U"dId_C(!L7"iJNi'h>n*i<[rkJM]<J?/c9T]MO+O'$-&ZtI"@s1!<4kH0MWW7JUl4WY=h!7rj-B<o53rQ]7AdsZR=jr1q:I878n
%ClApPXmb]!D%XfOEd+1cVY#,[:pY#*rKOVpY=nR*8a.]%1%.m.m_BU]FN0TDm.pHY>)lMWSP3%<frJZVNNPY/[\"Q7P[GKP[>819
%qsOjC8"NUCok`BTJYRNMau,\H:HIk7]4A(@03rL/ahq@\1:`JIFZ,7O[,J-nQfs^Y]9?G7^jh%JE3,\0>+F8(dD80]]]PqN(R:=$
%*#LN*J1VjhR`B]in6D%U25g%tiOK6VTZF&aL`GS[.m2n%T&d^Uqej!dcbo-VO#NOLcI0eNPt33Dp$E_0jDPDI=7IS`SdlhB#kiT@
%-M`%V^=djEOf@\1/,1;,Ulr>>M#0ubkO*0N1I=WsK8p0^*^9h-@52fS0@s*'\*&;/_(t+s<#UUbcbYb9,TJu^f0LS9&%A0nDZIRD
%m_Rs\afB6O[mu$mG*@I8Ns>C?A.,1"H7\2<$=54Z/aN0cM$%):'N3J1dK*ZmJ,("Jdjoq=ef*T)g"ISUkg^'0":+j#]q%j[`>St+
%IX`/9i7/8JG!d^?mThf&UN5/tM@1^?rJ%e'c[Tbr*f)rINAh)j0:]$uKdRm9k7bBB\(F>!s7UcKPKs]YE-_<S@Y6)L?d;s'F#;;n
%T;?J/PLk9\j5?(BlM,?PF`U^!K.a_(i;POJPF:/!7XF+k[C88=pC#1[8ZP)ab>SRmd@^LWOYcT#RdSr8itqHf#f;_uo]QB<J/N8U
%Q79p:^D`r,l/4Pgof6q.X(!-Ahbp_SF-lZp(Ar2s;k1=_F!g/=ZXWp\mL00EFUoH7B6+@.<@+8e[p(p*f0D)gIiBa'D]JZENhb;3
%g+`5WfNfi)-UJhB=8%S:r89SPP&IG4'<\=EOqk[h/Rs8i[?"92MV4B!jF@rB1g\2-OhbN:]LAickq_'K$9u%lJPhR,b,DniL^(rs
%]s.WM/hH%5YE1d5UF'tfe9VFtJGo#,9q=NFRbV-hT3jL_bsBQ&Yb5hP\FZWTCo4_[.45pC4`PND""r;NIiO?0+8[<ZWoCE6h02qJ
%T[W0;fcgD)#P7LEqO2b\gNs.BDd/E4kr5*1_E&n8!>um6h#kTOQ(SV%kN\Y:Y0sUAo(s<8pq-qe\"Ng;\\At]Q27"d)G('PAFAib
%rXLKF,:InBp0>MoI7XTZYo=emn"ZD$^r$]L,SR)bqq9Djqj\/P4h+ELLY(omV<5k:FgG.oNMLp8-7q/a3!FBiad/OALX6+%TI)p)
%-`U@fO4O#KX82L\rPr^^O=]4KmQ.[e2S0Ed4H^CDk!aX##<3s:IFQuQFu5irJQf003QGR<-.d?[^..SU\)c?tbDMt9@%,j$0O)gi
%V_B-k\Qt)*#?Gd-\WGbH&61??lX"tI>4M$sblt?ES>go0Z$<4$S>'<1!Pf\g;U7!cXmQZDQ]7aj<KeZuc/(g-\+jP3W1.j+:HfmJ
%6bZMWP^b7nfY[gDmSafX'>1]i!8V\CiQRe?n3\@?RCPCZ0aPPg6!Kt48c;Wi1S+H,R>lSq?8nPH4hNckm@S(9K,ZAko5OIas&Da'
%qrNoM+S-9B[U[RjWZP3;]=f-br#NFB%8TT\(*fN`J\61q2+Fj/QH,?'MW`9K8*Q/k/Eb'>YU+!bC^_V31)5(O?=mEH%o;VMAG9(L
%NIB4[2.-g)4f51'eKH3,P%@$3$@R>bL(B#]>*?/5a`0;5`?hcq.T]83@MNEL^1UY/$rkZFeDSAOgrX2,YO-]afrc$5O+!j(bgT4!
%2b>$=-LY[q,+lr^ZJbeo]X+/fhimG<F@<m=:o4GaSDSdOjpU\,FU&^acMgc9OsorU#*+m<Ta:>9f@/-B3*QD+20007n_X<fq:nd&
%[;'2Sk9o5pERnE0\ruU,c^r@$#CgJ:h3m03&_HDOaq(s*dK?-Q'iT(upN4Kc%tWMH:em/4eMpc\A!j@(T$J_L]6h#;,9O\KK<(3_
%,h(Ob"*N1A63br%cN]&/E"CT?2,CY\UObYnD%1#KZ,F;('__+Ko-D$@`b&EhmFL4M(so$p45:g%aCe\S!GNDXrXH4O+u"DfR9o^F
%LX3-T+6n!SKp+Y4fH%4N(V+D<4Y^E\7sS=<Gn1qB(FUjVZ=Mr(3YGqXj<KQ:7"I^p4W:&UmX_WBpe4uhdK/9cTD"G)PL5D<;$tkd
%pserW#jGoj:Z7Ml?nN17S_l\piR7dZ>+qY(jo%&2-+09s%s*`W&:er7m2GUX84BNpGq]bif-r3"ZKZl?e3B#ZojIqlQ+%dKE!1]/
%XmK>tQE5]8q74mW!+Oa?bC\h\)lC:Ie,0Y_XUf?QnOSG@al;MWB^DOfTblk$WUQ;AU[:RfjDZ*24e9\#"Ote6\fXN3,#<jK&.QOJ
%M9+WmMN1<aeOn14Y4>]67FCNtp\U]rQ(K_i1mohskN^pBJ_\!&]*r`k;LO.MHQ"tbZcAQ8:h;QN]_Z@M##oLl%U5WF&=EE$@lsSq
%4<5rCcUB?Q[0?,$XH\i/IFK2%mfW%X1G"qb)HOZXOP`&WRW&PP^sG'PcT/-<*.Wc^/u*S;(LTCtmfLj][h`WW7YH5_9_@q"\UgpO
%XfB,9iEH6'>ioK;8AR8\R&?;s.&#jX=<6.6m#TMG\b'ufiX+Jm'jB_VqjoJQR,NKLo$G[YU'6:*)sON<mEB^>n_F\B,;Qtt!*E=h
%EmQ1@"(Y^^$%:MMQ(i>Yl;2"0!f>g4)kmUs5g"H')O%O3&6"?eO6d<qNu;pIN,j=A@T?fp=7c5u)_cV]>\fe7E>Wu@L_A'-\,\X5
%mfu<SiZ_BF-GeKE%u1KGLduNGnb.;Zl>gf1;_b@_18(7oA3/@Y2T'aJYBSC8Br79^4?'aC$auU"g]ZK>kN@\=ESjpt)RRua`-s=a
%oQglrd`@EclZ[e8JC&f2!B&XNV(2Gj]g<tX%nXe?YampA$NTVP8WU6SX,mI'r=l6EO5V)mTP<OJgCAqH'@-,@2gk1=Qih6SiE&4*
%Dt$FLasp7^$0$f.BajHO>jjb7PEG5`8k&e*H-JaW9e$0<p!N2s98\PFS'=DSmO&LJds[Rd<d8k8(kT;,do-+)CNB5O+6Pjp`uUP`
%EIaQ,f?dY.U</Km\<eKa2J>Q`*nNQBrEEK@=Dp!iS5XP*jrY_J.*L@AoQpi0g:&f0iStsjEAqCl.F2`&WS23b-BTt497E0-nq29X
%QkNBoiu[EcOdAXb':0qH+;N9SI?:C=&%eE&_YJGJ:.:^"f\_,o@Y7^`BIE%A?^MtmoZI7S/)<a%SJU8!C\n]A_QOg*br3o`jRWt'
%:OPPGf9?*ebNE>62u!$m\HT:Zor-:;,CFk2r5f>9ErJM:o=UVWU2l6t4d<[bgUiSVl,J8oG'+Z!#1rtnq#eF_]2(H=A$hd:h?R:@
%(?iImgSnAB3=LD.';rmdK=1gL/)aD.'RMi&L?k]Xmi?%J]8o$/FqZr(mQ]&a"2-l"2jmFHl,o=gR<t2:i:Z!?m,W$HkpW'klR+&+
%,Cq%j*Yr<T(]()(>eQF28RbQuq?\&R`?pIa$c/(*(^e##:HIEN.cW>T*:`R`9FXe"fD,s3WuisOQgC-Jjcp#uFT28_<4XP[_XWE9
%3l$Koo<olO3*pKmH!u4?g4+8GiC+gN&'&m#Z*KZ^Z$/_+_@ZmNcf#"BWQ+!;-UlD4mJ^cXG+3j8NOA5K-On'rKJ@oL>H67gY],iL
%)SIr,DRi(;15rk.cR.0RES5R*//F+YV`k)VhM!L83"f(00.1Zbb:,R%-q&^%9WAeRcOHB']c%#$DG!+MH^\bpLTm:KGe!E"PY<M*
%8NSHLE>&,(3)8r-*j<V(iGtH3fDtj1%jl2R!V+!cp^')C$Co]"1pBRZ^#DfKR"0Y)M>5Th33Ior<dUKaCit"5?sph939_`jp<0A$
%e_02=B-/_7eM3(cXj2i[XOZFGn9[==O#@,*ABibFJrH<&MD1:^"])<c:13$o'_(tW#t<MY:J+Er`HMr,d*VF,EBWD'?(N@gA'@NO
%R(.A'WMeZ[Ndc9EAtSXT[JY%0\D[NjbE)rBfUWL4A@<][BKBgLhS#2UY,EjcFYqlRLfY;iQErX0Rj"iGgZr)2Cq:":ZceI=3\+N4
%YZ_W)F/\]_I-e\:/8RB,BB8hBaH8AT0pgZCrlm2#`fUE9*dSE@'0&b`Km4*="6Jb!EDj%/96><'QmaKrp5^:[lJS!qhqQq9bf]fG
%@NO`7HhILN<A?a(DXasl.Cec+++i*lLmhC#W3<\GA.tZRr)4p"cqU0'lTtKB?bb5t*N5BP\3d_'>#6@M0[Y6>*kK<uCbO>fL76cO
%B+B*aOVUoBr8HM?eTWMs#V&%t1;MbZpGAQG28$774_hsCT`uTG]_Pb-7LL[G_eeL+n\)!k77@SiDdeDNlU!`o.gIa".""\&2#Ltt
%.WQsbLqJ-XfF+qhi6<B%0t$Q-'-?H3_1??-K=+7DO._(n<mO?6dIKD/?Kp(R3oYSb,h2U9kdK1<BL7,geLl!<7Qdg<!J1ZoVuVIL
%"`'B[3uDh5f9*Q#6`9;#K$#('4SlFX_Ut$,$$GS>BsOCc/tCWcDa*<se:bE(Db"t$"94W%<,_d/234CS$*?ZU]X-3/?=`]$'&J63
%j%^P._4*J.D37='<'dD/m#L\%8,(DB;_=TibM_mu#;u8(b:B5L-+r>qb6O^^:-^Co'O%drIaQr3N7@'WT:ZB0W8X:<YF0mhK:;I>
%*59El:a$YcE9SmEr1ktrRS^%T#6A,/k@?I.eUdS`nlFZ8nAG<DFO,m+jn"\lV?uq`@+a%a>4(,7U0*#)_!lj^hRiAV65sZ"Y]lR4
%-B>L-Nm>(UU#*I![TUlkcp[WNH[g@5eV8BiP'_\jH%"4rqKg[BWM"9>Gefr4Tk7U9l:]Y(b4Jun:bP%'K<&*2TF(;)jFS"J(L;?j
%lEKP=ID#78\q;e5W6n8i[PdmGaoSI20*E#i2+^,oh]qSPe9\p5>!2MV13&,Cq@?>;74#*Jn&Jj!"edt)1sc'^(BCf14+".3^rNfc
%/i(rU0b9O4Ff98e!p+@`TV`fZ-)FF[d`h*8'gd$fW*?2k7$:@mQ[it.<C(aI't;(#e5P889*$p"EK5X;*scUh2kE$26JY(fJ>`u%
%@':JS3^lpJ)kU9`dQ$k::\.EC2f9@a[jgmC`p#RJGRpiLN_o7hs,Dn/%9-+FDg[1!]r)laPDuuA$Anfhip=D)lX1e-*LT(ikpI?G
%4Ujo0n&!/6?<$lFf\(]bQD[c9aE8s2UAHe45HK7r5OB###LZO.dD@sos8Gqap[th%Gj<n1>/+emBg(R6(>cUUDUaS*Y=FNJ`Pa@G
%4`)3e`DiDc3k@hRr);Kr>lD$Y<ZR&cdqE]eFU7]=`magu]#UiNoHbG@QC^ham:5T:ZE*m!-[S!+l9=Ukq9q9+:BdI%HMNa`^"3;%
%2b,%IVe?"eab0$1`irc$)\?lD\mKbDe:!cY?.;I%Ve?"XD4^jV;HEh#4g+C&W9DJH*su,jD+CV(NnOq`b!4.\',/Qq=SjKdVR.87
%`I#+A.[\@^:J[UG=7W9)H':7L):r:$=Z-N2)9IAl4)arhOFd#cB6U%rS?]ZN@ZS;friEq#DYRGmlHE9anBX6/Ha-jeWq-]F-Z"$X
%6mXDj;0puHE.%'4Q%O!NXtWUo!cYE:%6.u+3,c*&jgg0W%tLSR0LcZnpd5$n.j4uLnT9iXFs,tVF3l"L.7CWbW[$J@hrm<7n*Jhi
%qTfLQ5QV?On<5J(TTVKe\kp*9en%hhWj$B6$>jIM$_]K?:kR;():[k]\gi?dgu%"OTJASLZ6Ha]!\,CdI-hE8"fR-h!il2r(Fl*I
%Z!Rm=@&bI'6:<c*+u46lhK5DS^?XaiSS*OH><n#tE\2C,6J%s,%5hR:CI.'p2$CF:TM&g+Vs$I$7S6B0Y@L=WO$3k$!0"/+;fc@%
%P\^"O*XkctKm18fEXu4Y@AD:.eD[s!(EI4?oh3FN$XcOVpqo!dL5(4:aH($\B)lA?8O5[9Do,d9VtB._A8BckO8oW+!P4k]m"piU
%g&sJsM%t5!d3)1nL$("K?pkKV%Z!lRC^;E!4oUN6K&Rprj'$sU%0n#"4Q;eX,&9^LVEGqT]-mTWW#Q=37!9lbcU';h3PlkNVo#*F
%YJJh=kjFE@"TiZbJL[sL_g0]-1,>l.ml_'Gm@cb+1[iT.e;KU!`WX*H_g3CH!"Q_^q@??7,q6L%$>q')qd7D.F,BD?</5tuYm2^A
%!i8@!`X8da(ns6lF'+,KY5'pBL_q2u@L-i1>MV;-%QiN(_E"DkN+ts<^+3`79_RU19Rl3LHGe_;,F;pKbfsLKQS2js6XbU?I:+cm
%c+&@);?5(eT72Zgbt'La'XCA08?`95Lu*0pq$kP/,Is-R/Z0cU:NY5(*5%=8OUh3DE[$3[L?$K<\N`4P_uT<Qo00aMb>U%3[?i6J
%rb3SNW*Z(TN(ek/i:O0q@8(Gn2hgjO3:_sP@'U7^]Z=m_50j9D4J1ZLgei-f"MMbZfc\5PW"M!1p3eX1LTJd#3Cc8BpRl3>LH:)S
%@!LCMF_Tn#:l]%:K1(G`d3EK`qc$im0cRd^PRHu"dL78h>-!\l6;G,mM=$)'iG@rWS@:[0r:;II_s^T!YQk`'[bSF]X9ql5s*uP`
%U>M.C6GU6N[7HPVG',#>9/\\Y%9q1!fL_d^BVEOZdkXKJakh=jX>>KCED0,#Z_4Akd(7U:7,"`uM__k5K!$OOBhu\n!upEk2:PUj
%8_0Bi!i/CbA_a:B't-ui/1@@'>"p.oJ:f.RCbRF6oLrmk<u$0D3b)&U3OiM^gNqlO@Ei4s=7$Sn=<#7$JRT+E`eGNnLX98CRE!,:
%?lk>i.r!X?Fgrk!;J6kQVTmNCUTp"=-.,Bp^+"p4:+qQ>Ep5Iid70#CL'Ts$h6JDCH)+8Pdoao7BtVEBSkMdAFKE!4O7r-T:U_.L
%4OXgJ],9rmmh&M=ZAi9%!hK25bI@]')@fFY8O%+]cUjcC7b#ra&m@%I[#N)"\TfeG#m(25KC9!/O2O:)n8j4L(8]PAh+2dSUM)7[
%<6h7+7ut*:0]r>8iYS#lVWC$_];&8K]HVL_Iq@n_=WAE/.RD)#)$a*i&@geT$1\*1&L[K"'-hI]#RN3-#q[<AA.#MCInVr$E<0lQ
%nB10eKOj/6Ah49]dte&_L<@"+5k8</_J<(U@6J;i)\qu0=o+a:\?1":JK_tOC`9X]0DEU'n09$=Y.NU+JlU/(/<!mK.pY6ZJOM5O
%`NIAr*()7?V-NA<h,r!u>jQ+g`NJIF.:Q/#_%a\tg[bUicD3_.Cr\n',&El]E2GJ[on+]N=KW]c#P0(Y.tTRE-ui\\2&c]c:46bb
%V5=a$[&7Uh":Z8'_j>jBPiN7$2PFes#SITli#_KbMD/4Kc'1+ud6X$o!,fQ3eHlNr`ZU@:-n%Cp8i&Ohk4@'_Q8W+TSG8kiR=-]U
%ft-JRK7*3Y4lbKlH;TWDlD_e=l##LsS1RG,,/8$@eZ*U9jQsJ!_7@CG;!/M[oG$XEA*D=N=r5J;P#\I`oqR.oU>YZe0/U?j:o7Oi
%[!>`.ph)@'!HgfTB?\_IAhMm-3fn!-5eOmNG-t7.lN5:\iOEkoje>\PNVGk@]p1UIqVt7ld+b:h['6UQ,ri;cL5Q:HMaPIeWg%a:
%noWD)0&r^5,Yq?4)4@`SNMWT($ZFf=F>V$%LXZ]j$V[Z1FaI'T1?t>K=Sj)BNkoF.>+un!9rkmXK^Dd`3*?Gsa\K$g[!ba&S)6Bj
%:8'9t5KQ8,ZdBqpcDJ.GFCTXj$0fJ%*&9Hf0(U7hBTr?LRi?E)n)8F2l)"sIKAI@jh/4P'2MV;:"5:95bub='a]j:;j&ePa8t345
%A*G=3!V;<eY`"E#1>#HEVJY<^O@O?q.47jOB6/FJZ>Co@%]$Q#_WR$f\W4HMRY[u]hiq?UZY+Br/TiUi">)NBWbYhF)6i,(N5['N
%`.a_IHb$K.D=\,;He^O3`PlpM+7<b5\5dSP-Vp!`22c^0]dTt271aLNNXW6D<5%KB^n?]74muO.'=U+BD\a;Glg!>cia/)LBh%q2
%@-CGQ8+<"kGQeCK+c_!s[O[e,#Lb\e&,2!erjf1rb#+e[E:i0RXols@BO+)Qq3p1:T9+J/jodAZG@[cp1"@3-#h/W/<,8G-\ZLA6
%MjACJiW@Tna-SHSof/Wbq*::?IXIdCFb[Y*PA#d77TVgoD4"I4;JLtFr`gAs4)HZ'Ebaml#P,:pTXDj@Si$F-J!e@ak3#3XSNgMa
%F&O57&.NE[Rld9N2VhQ[>rN3fa4^P>^%:0e"\+"Z%1A@OZko-.9qaDRN8$4`WA8Ai5u6U^q9ol<IOdQUKp*FQ*16^8!ceXG=D'%e
%AV$hoYW)1@+.U"dfG+B"fKD8K07]BFmKd,=>&Rn:3MGn$IK7ub^*ikmR-CYZ$`l)YeN<+r-J<Di=Aj)cTo5VAiuptp<4^,WXfgX-
%4*TbD.i!;]7=7,NE^"J82/E#LP$UO:T5cG)!4/&5^'U`q>!?87c<nk0>g!AW=\(Op\*!<tq#n`JmW(MO>.uT&FE-_h5#%tb/`2jp
%l/F8UI)`RA>J_g6o9StcfCEcM<I",#o,60N+docpE^$n<;C5f;m!DK7c8V`WjOqja0L`/^l1uN@k%DlN3rMYr"NEEX7PQHH0c;9M
%EM=*`NEC=-H,_P58j=FUYp#N8gW$+ddPHiSZ]b/$ZQEd)Pq!n6R8_GZ8`DRZ'":43heM5W*S5/J'kuGu+Y3rt,juMd<E`O3'E/Ff
%1E<s&_GIsr1Ken!%!:_GhL&!<ou>-*K]gBd)X&ppQ>ZYmd"co:*li!WI%+&IE_d]'j;`=jMjn0bS6r!0CRteC@t^=me*!'6BiM9"
%\p!3g]@0B^S?;-qRf!e(2[Yl,bn8VA$fsK?*l/PtdEaJ.Gpu@?eo=Z0\qOU\50lcbQLNk&h"7TC^Wb=N;aM/nl()>O.BNh3o/+E/
%jA^9*`:enr#1>KX`j(&#$inYt?t10$cmAl674!B1MiLaK(%D(eK$&)A\,ud)bV?GM1fZ9!Xt:tN^;-m#*1LZ@Bke"@`q;8PMAV\/
%NSLs>jup_`)2^.kG4`e=PZN0><E5GthG9?$cn$T?Sf2brp)MLYe5P8iS>%qu(F7%l6&aEb=c&0d^f9'hYW"@&"<U>e-G'PX)&KGN
%9/O!()U+#7.c3f^4M$c&<(5X6*F(C%XGVPU@a&DeWV;D<p9qmA1JIZ/D4:sn_uJkOIm14T\NEs,\1iE:>uZQ22,EBIrB]7'bQPmQ
%#AR\r/fGhn,+n9P9(jS]<m54@h2CS2kt1tYCkishcm,NUPGd_nl;PX&>ZY]:8'<+W.%.5_7F],GKHQ9b9Wfe##4%qZECKP9NDu]4
%A8%/>.-!WWK`Kg>:K5oFY%(R>*C#g[<^PFiB^L;8<,5ji:;\:kAh6JaKMU_t_[8<J@e`4Z)oYKAb[G4EacA/'H(qTA.GRnM)rkDB
%i.=L2?AiSU/7nIn4W1pNSEWL]oJfPmH?1uSoL:-CI-8,"M;AAYj6h>s-jN66k%l3_8Y?UK!pUR0f)pXGG5QYGoB6XM#%psI2g=lu
%D10I=Jr?:]6$:Q*6q+ge&e-B/<3AC.6krQjX%HktCTLTO8=uB:`Yo`C>OhkP!iNMfSN/]>FKQAX;'j"cH8RtP?kp#*i?'9j%?QM&
%k!fh`_K%(Z"/E^g2Z6aBKG"Dt<oQ(4Z"KhQPg2'RNiq5<=cF'rnPU&ED<<9Z<ObohL65E`3^7a>i3dAg<aob;Zh`1kN0SZ%rXD=D
%q$`O6qR]T4Xis.?k,j\%YKXndnX-X<:TEq]'^*_G]:r5lVj0>WhU0i`\W`mO=&-6_aug*[\VSBjaW-ha:'@=ID[ZHdPdr:8[-$M7
%4Buu>hNm^dHD,_#mX67mTPadas%qV3mOlVi^@f@5Yd\mV04g%!Nl"E%1b1ZrBG"KZe'#fha@t`$bZ63S3c`M];J/r8&utet.6C^,
%5oE@Wd.OQ>3aWWTBs>lY5CbY/MD[63%TSFL\'n"t"*6W^l2'(;b/:PZ$`[gomF;P1_VQ&n$N2qNMfDKj*>0@4TenRU1CH5.QnMah
%RacuK/0iN"r\@A^GFNf0POrd:3`!cj]]5uSbuNpI$\>HpH;b$TmEWh8(G(,9\D<%eii+]@@)NVGL5%I#l@Y90Me%\3GKn:])2_s]
%mCHn;@3Ps!fX87s:m(+ff-6)_@4r!;P(e$o$Rq6m*R.q:$[\9iP1;YXg:WC2I_lIoUd-'MBpuo7>`ULsp%Vo7#+HgEGFkNk9sqG)
%U-/Cb=_L[hQ?;7PNe9Q3;4\9F(1!/[l[-o[Pdg<=ls\.;PW,"@0k4(PZ,J-G-A'cLqO9:iSUR2.j]kJqXA!!\Vs-.>G'm-'V<Oif
%lj`9N0tk4e78t<$2HNFJ:,KrcaTf@SjuX6TQ4E)2\/f#8;b(-C)5B>;HsOQK*b\Y/\nCfrUq=de731e;4f;%e$9o'b#18X8:8*/-
%]OuGWj'4dVRs`E2:9JY0%ssD[f1mQOkT9Nc;iXVMMW*8l-LG\]125&p]QTu0&sUjOIj/pVLT$G+@0QmS$1"qsATlIjppDRWW@YYC
%C0Y&cj45uaU!DV'_Fj'Xh)uSiq_?k$VFS?s<+U9][!o8%]SW0*KDK"]lrS/FA5Lem]YtnM#ZY/R#B/c@079#9Tl"fD'\\MgmX/nX
%W/egD5d/fn]X.2E*l$nTq`R+^'u19;MZ'JW9ag6PE)0o1lnnBmrCE^#`g[3]W4C+7K%sR/'7"d=3-s2/H8EB6@,:DCd3kOAj'"",
%h=LuRbMZ%H\/bXgQX='?9mL;R%Vo1G_@"SLqe?:MF;eC^T%]*Jc[fRcOdpp7:Dr>Hn9"jnKfiK#e]S"FL3Irl)%R+%9ZiRbbqlr.
%^0XUY0]oe+,-TVIdZFBu[)r.7\>7Qt`1/U/-AuluMSf!B^'el!S+X/"64Bm$Ch@5_du.7gAM]1=k-.Ns="kPVg_Rt+S$Zl`-<7j,
%SomsS9eKq=nnJoY(Q0a/di.5a<lFoiI9KX!8lL-]Kmd.p0u4W-?t#[.<M+*VCJfe6#5b!M/F:h#SVo)dRkNQV?.c(:RqOPKS:u@u
%_h##V;b;O/'_Z6@ok=c&q$R#+]PB5jEH-\\>#g"!0(-R`qfn#r;:R%kp+EMP:TLKk(:..C@@u*ZF5cP@(A@!/Y:dDj:MWWjBP;sN
%I9L\?:UOA&@@pS#T8<S+94=Gn='P]nZ8_Bl52=EB3=G`6>sZJ;(t";%`G(0`;:mf2dH2nEe#M]n\*t/9fV_a"\#"M(i&l^A=rh9U
%XNXo$-R4S[fqM]U14*H%Q<h2s0D10:Eu4Oa<V<?>Gns90V_q,qNlT!DqrA"j<IL7KV_1Cll[K=$nn0Q@dm@bAI=hJuKmh)u)>K"l
%#">gi+&QP:p9TF!k*28Q<AM2+'<`Sg'((t[10aJC.58BQ:WMNuoIYOeG=@nUieL`#a#X]03Oc>X.a&`7)]FJ3)-h*X/<-$?9VP%-
%F+GEN^$4T`]b:_OfVC:1$Im,')%9/&4_)&XTljib1t@b]8seelGK-S5m"+!F88S`.ju21Oc)/&LcTjgh/aWE,_:\t=B$P]Z]_i:)
%at_N0J'tn_])N;Q<(cWM^FAcJB>+4]96H2EpAKKi`T]33s3h=Pi+9AkFnqZ.4Upl[;f=mg?iGh/[b^.pmSI6Jo[^LLdPit[3M'^p
%2b?#+-5QF@I%Kt[JY<*na7d&ZqK11*Voe?r21;g]2/T>89)%JNb!"?K$^oA5=L<Y$NFj\COeek@E!Zi(<J6!+d_p.Zc@NR,#p'7c
%SCNP*@8s`X9_^P&(93cJTMLbd"a\)/IE"pf!kmP<OW3Jj,:U-i6Hj/Ii062qh9k#3^8MiS#9&Cnb`;<O[&1H&EY8%bD@(MX0!s?A
%Wm8LIg(XCsW8e=q<uQ7SZkY<$_$_)5NaPdkYb@O,=Mpr3gtC12.qF2`qr+@6&*j:05J1Bu"D\$l1$W8>[Ea6:Y+bp0Q&Q/,VRbIo
%4M/VcE&P>]:c.ULjt"Bg/YUfP^1dms2"(UcYa;I\*+Qe?Z"IV+b>R?E4&W6%Bl<374!&(/(fX@+>sdK]=?sD<mhW5N<VQKl!lWP&
%Wo;k4-\0TONsiMmO5KKS^\Vl;or*B/h__5,*;BH3I*]p8s(5G('DMKCc#J<m'HX`TW@hNUB+XR&inhF%mKt6<'@BO#;\s?8h"t`Q
%c@]9eHZ,E8Ke:b[^?./!e=6_h>?&$!bLa\?#;][WLOHqM6$*[h4'jJ2BHHg*?9gsrlH$oc&u1)V*R3\QM5#&8CM2epHgVY8_bA/9
%X7,(,kJV\*gXHte>.K8flg\D`67VB,S[($<:"RV-/u0+IWW5urldDZaY_$/[,<qA[_`bmXp4fn9%:Yl#U(&i;^VfY++)l"pN!cQ@
%BjK!,JXN\/p0meaW\%3CX`$%2*;t]Y[AL;J'cFs46Flnjq#kH,]C6S;GPe>Nj!35kpiX',e"<Y:+'"*0/`JNZnH-N1e_Oim*o.8J
%WEd9PmWKe^6^KAO`\a+/K8-dab:ra2&Y+\u"C\&o#Jha?[<KUM>.3V;UciAbfcBXbRQYdmCWFq[,7HaNY.6U2LR3D;IrM]ajV/:6
%#:kTWHr6+2?Ck3Y:_f7@bg,&)[61ak]UCIEH%&^mk&&4TU\%1\l1%:!V[M%EpE&U"+bk2a,8L*V_SoO+NP4PB5AoXS!I^o#SYo[,
%<)+#2=4<H"m^D!&FEW9T\a,?+AKGn(fr*rbh#UO'V;6=kgt/NfZQ!5g8#WI"\R\g)aQJCq*N7qf^#3Jq6a&96h#M1u2lp7ClMLU!
%G+NfK7Z3.%:GpXZ$7_[k+gUY6SNbP.mP_8=g0OL'.=U8L6H=l%*`Y:nBTl-m))"IGhN,R!$DSUe>+B&CP2ZV#56fY`&E8/"L,.!j
%pfI$=bqKef!F8'9j`XN;2`l'gj'&p%j8,d4@#@GP&ap<BVbGmo+&bWbEGeEmcjXf?'f1:;\rL>X&I6<KgsRb(JuTkNiR3BY<KdQp
%/c>0!N5R=7ni2hD:`QVN\ruNNR:Qr!'`__*J;K;A_6>97^nr1e!X!3<Vb$tH)O#>`H'WS?)<?><_pQ&'6RB<a0.2NId?U1_2D)GK
%T^rf9^8"8JS$&iYN*G)N^dj__MN*p_X=%g"&=.dg8P[(fn[,8*]ebJBjVG-$rK]e_Br1$`WJ#AHEOmd3=_pEo=hP_JL<a8>c8_dO
%lCHW\rarp!*-@`YUaJmtViN"emLd7g56LduWdk,4f@V=8p:MY^pa,\mEABp88ui'41Y::\]H.KBBequq6;a(_B$Y2:Y\!r1ZX?sb
%O'><nZcYlVEK4MTYHp#GmM3cA<t%a:8-#D5;%Z\0<:0'*W4#[929B\Kc!6TKIK:;;eX#Qj*M_JMYCSSPfToJ^$[\AU$$oW/-hfde
%lHQE!BI]aEm!qi&1m8s,WR*1$?hB15;8oX&nP45STNpBu:m-W=O/Q<T;jSb)%RRcK;/*%+?'8m*MiAU0`[XQuX[a(r_Q!F"lCpT3
%<%I<u7,3)V@GU.I)K!/Am6uYrg(V4H&[rena-/D08]7`$1u#l'/kJ`W_jSG9I9@_c$)o=up^NQ)RPV<BnJL+oKj/-oAh<)M6=/</
%Ie.-)Wasc>F]kDu-b\`e$E"6cc$igSQMNGJhfDqo;Q]o+b6kWd-sTZ(%I@gd*/mguVRu>:b#>ES^$niNXX7sJeB1IQl,#gJ'M2.g
%c[4WE+`b!pj?T7fkYs(6$P1KX[9CY*LW6eDDG=!s3CasA3`11b$P0YHH0Mb)q&[@W(EU`?VfCJMegpu9e)s-a7A-NlnBgs=_l^K<
%pZ*tiS28`QHf:Z<!?_VZ!>cdqQO.%H_jXqWLgBI0hh?iCAMI&eUWq.A>^.Y3&Sc#D6T].R$P/50;q&LLjhaBu9IfJ=6_$:@X:#Pu
%eK8tg[Fp7h;qt;2G=B76D22=6F_`d=G\Glj7Rl!G(ER>a,"Zh89s5uu4N%f%Mn&9'\2o?ThTp]1TlHBM>hHjKB"mbRJsqSO%ZTX@
%[ael2iM#dYLFR4ZaqX;K>e>I.X?:AToqm?7>Zf+%p2,T69*(Rk%uj;9#rcVM$P,+@ELO2KoG8PepL75s1<kN.`jZs,m1`;sE^:W"
%G0%e4"^H:cI+t@QhopN-iO%]d$`j;nhfaf-e''F,SC:HX^$lU!T#1:V4>ae>&DtGa\aXR\HO=E!n5.erqRAk__O0R@4Oa_P9m6jS
%eqJn!DDqX'L^O`QD`]dsEUc]p%<">`P$R]Bf7f"/*B,kIKnl\f8Ca$Yer7#H',M_8>)PK(KnflGppM:-cKGln4Of4?o8,Lp!mKF9
%*b(ZQ5Q?Fm`aLQtYaOOg6`i+%aViQ*CGT7@B^FRHM9>EsG\HI":Fsgp00I`.)K*FR'GhhMqOVb7G_h]\3;8,^',IA&[R1AFS/36(
%PH/u`Te$4V^'bI2Mfbe$gc7#M1u@bb'5al[&![5qa"qA;CfD2l)Xg@9R2fpoIGpmiD22?N=[VdfGUSMB]1A:G@A!O0(QX<RGgb+W
%>Ro96/^DJ>-\]jal&b*frOl#Nhg]G4%S;X@8ekEIA<B2b-c[I"!9R!9*gTNseiqlR6lW>mM@>D!IAq0fb7%,BR>r#\R5:o(q/Y*Q
%H0@],-EsMn\pJEpEdMXjX/GJM$3o_>),0E\l+b5UD@^TeJc-_iQ1c!JQ`6OZEB7oa+drH$kp*_X4W<MW0<W#=Ts*>5F!TfV2PM#`
%#PYcu[YDqYi((B,]01"30>dIS)L34s]!IO$h><F"R/PgC<F?fX([i^m..YkGr-FEOmEs$apsOJ<H$Z\6YSG$%XliU(547c"#H8Lp
%Noh.CR\&<cWcqLQj"5!<\%h>NM82F*RnoZS^%k^hbZbAA=(qFTAttdX4^9qic<Ig(K^-n8@U3HfEU7]$]*%0I[SVMKl(OL]$JrQ7
%gX4kC<n+`&4dFo7WQ*0gMTk?VRN$M-k4lj'GF2!gca;ni-isrlpLu[mCGj&<@j;K)l^bYcg<&cEp;"5lpBTI5SUT&AK]T=K6Fj+=
%ll60^@7&bg&628);u'U6cauh._/Iqid[D8WQ4ZCM3[9>gKfCoe4_5F[!YM>!N0A5.IN8ogZ2%dE:sF9,`-jN`36tZ9LWOM[&URnQ
%i+qC/^dNhLk\It[FAdcmk<Z\A%5<q=$f=-PK<+n;97Xf`2JVhDH4a7jq=p7<.U-V?@;8&mRFM'2rOX:upJ?O8!:&0a2_6G%E`%@N
%cm(,1TY)>s"u@:V=\_;16LFs7PL"uXc[\9C+nus97"r`J$C+*=l`h+O"Ua[c#%'0(iO-<GTCZDX6)R/T,O=-;hHJc:/<tV.K?h(_
%e8m]t`]o9aK_W>+Io(;F`!7pjK=;+854GMdN&#8?R8<NS+oMR[*%hc`^YRW/6K:_:r'<Es'Haj4-'5k#DUQ]iKtG'n.j';fI(Y+`
%h"i0_!0mgJQK]#'T@X0i#?G=qGoC"U>f'qe+7_2P]'Mm\:a/*u>4MGrRC[;E*Ceq>^H?K6##8raJK\^AIFi=+1[+KoQI%_o0H&a[
%&,#J8NPG\Fd6R>[I'^:;ST+QXh2gtlASqfB#s!^TRc8WlX*j.eh8bBX[nEk&KU@anb?M1"AbbsYSk7c+++7Z\On2GMQ5\UIjUh$]
%T+BiMn+Ppc^V00a'kX6WOSBdId%`Ea*AMZLlkEM%!BA^p!5DOD"TW$ZG4$$KIHNqh!9'u6go'dCTEs)oU]5J,.%sFfh:R5]*OJ2<
%M$pFL"K$ANm+UiY%np=%!'LFTVek-9@Q/AP:I^E7Mo2Lr#e-_KK6C'n-r1uuRsO#b2@iac5,--`$pV;.*[7j2D\!@ro8-`AF/"o/
%n8Q9,]A0$,`R]XUS<.e;qs8l$KKPSf=M),Jh3iom=Z1</*C.@?F3Kb6,EdcpIMrptg"%3C9.!CUJuS>H02N.Pf+;$m2`AUNJc5#n
%I]h)qMFh\"DZOD00jd1B\]uP9U..25h;:saLQUtf1m?WWBnrJ<a[>s]p1^<%Z@.%&KSdk+aaiQ'q_W\'fM89a"Df"15'7U$[Z_dL
%=5,)[#1gW2G""acF$V!FIN:Xn_\ZtWOE[:HYihJe?S9VK5]S\pPD#k_q$pfXlPJ?nJk,5DmBAot!5foB/,8^,\N0J2OL2_Gre<><
%'31DEmdkNB=LXZfe9(iK#7[HDmSWCGb;KU+i:<CBG2aV=i"gj"!""&dZ&=#)b0-QD@g<o,LWqj+&'%W[g9>HiXI_iJMOBN3W[[,c
%PHrdZWh5nu869JA[BDP%.prY+r*N?RSHd#C`l\/f6Z:muM/*8npcm7+m9q%C<Z`\kV9Y!s'e!m:%P`o2`+cl<R22)%["nm^/i-&^
%drm#9H@6Au'uOI)_fm;qrj^ao6so!O<&U?(+e>IbI@@5_>;b;%Gj;Kp@lkjt7ce-lQ"K1OCo;M7D?F7s*Mi.S_0]9\BklV:!tRFO
%^l=^I3:?sOWnlKA4SSL]%qN!7WESHO-!.bIqN>27:C;WoQ3LVATC)O(r$hta]:e$g$Z4NhrcA=33JIoaLWMQf:RtJPmN*..*K`(f
%Q`?(JS]Fm;;U,lmJNNVUh!Q:X&:fUt3SSe>HHj8&eNK'cJd\%-1^*d6T67aZp\B%,eX&BZlW#4#9b@T\l,e2-WcG5OK2[;[j4N@P
%s54E^aM5o9CZk?7::sg41afp"T$;F7*U(tIPPrVMO9FAVo[3JPp*Eok*;<@=Cu>\Rl4=m<iVc"eqarZhq<XWk*k6jAoRYFNk!^YC
%II)KYP<[\EpQGOh*NC?Oc^2jtoD<Y#mbe,;X.H,EoOImV=klSS[1d+:LZ!'YFi.2*U1C@/#?btdDjU^O1Oas2h-'pt*01tOc4TuY
%c0QUcg7N4eSSFjYiW<%d56L24h'R39ILEag0O!*6;RA;3Bl>,ph\am_E+Nc.iF3I^e&FeL%)cngSFj%`kG_q38cqYRXep1=@PX7-
%2Olf(/cGt0al,gbJ+rF6RQPq\*bNnf(b0niD+\bF?t%5bNs5@H<Kh\6mu0#iFRNW4P''8)R&Pc+m)!@\KE2oA;)\kr,D6(7(!_?c
%7_A5!`qs1^B$^V1!/qfT5d7eRY%V0Xg#9f?jKr&9NhM9lA"D(_p?C-(QMa"`"Y(?(kn0il##iO+dr<Dl'uBqZ#0o9rL6"2!WQm?L
%>3fsQ:7KRe6h*!ISH5K+H<5"WVLZMa$sW+c:GJoFiD.6SBrf^T^Z<,_&(?!.lQoW?\i^4/(u.7Z%p[Jk[5or^W`H#\M-;pAY,L[2
%C@CjlXKLO,$[gb<gRiMXU"l?7@*I;R^n(8>++&/cKJ=D^2__F`2sU&k=d\->^:I(Rk-Lc.8#gb)C!2g6_e3@HrdXXuZV.JGfb4;@
%C[iK=\<a2D8Y7Fo,me5l-Tj4T%T"AP1AB)mo)A>Ap5[48niUJ3Q,JVnXdPd"Q+!9J2DR$Cm-,>JR=&RY<Xeu<m)+P7?FfeqA;5TC
%bul.>oa<>:[aFtR\).,L_`'c@IJDgOje),l^E#teGiQE&%diqCSojDI3Vsa[SULCCJ,f5kV4FYO5M5qrNI09<h<QUmb^+i<&1NY`
%<)M%cEX%$K]1ojsN_"H>SN_/3+[A3DRQmQ_mJ-7j'3qRkoFa^@=GkhjGd-'fKhudE)h!1;4UJn%)]n@DcMi(OO88<hqLg]?H:C'V
%l>QBG`%@lLm?u`brm@e,EVo@(#Ks,#p7'Mi^E&kTedae>o),>b*qtKG/`3+bX6*0iEpEQu2ueTH:8cD;q8_*s2<8+/Hgrsu-_Hni
%oCFX.eG6:s]Zg98VjlYpp:o=jJ'WNF<e-P/;m>.Hhm=?8<u&["j@su#fA34f(nCWs[@],Prq=#i0DmC"?iB[)Y1id9s0plEX5!&q
%>ou+9l/mLV$a]Zoj\*orE<Ai1l\U8;J,0uXK+h)8B:"'mooGF^>[Nh?\FJ$H93.jq-bXPmr/`?n+9.k%OQLe7533A@#0h_IT&cE4
%YZL)OBc,%B;;)[<QK&sj-fA^ZSb5:(XAdhOYaFGjZL.qkfB3RV&RYLI?\pK57dRk$1\o4$^\dE=n!sDfHMa6PT7)+KdTblIH.r)k
%(]SdF].8qkGj#&'o>beLo#2]S?%2:\ohSn@bC*AD]l`l9j\'N_]c=2&nQ,JZKZ_0HZk5D>'i#Q*StSX6n$WfJ+`/7?7e"^Z-[O'%
%Z^:<J9@tn23o-]r237@Ml0%3^.rAAd;kNb7?FNE<rfR&a[CH/lK[9PX8^s(SlZuL%p8hR=J%t.>T_I9YqD<CoIG3qP^YaV%lkB<i
%e)_a*pWYLAbIE&YHF3QRq;KoE8Vbf@aC5,?SGDcQhp+BB?U':;b=2"3GZ&RKDXq"5ci3g40>@A1O2k.*nkW>93[K9eGknl7gB3kg
%5>Ub)55"lBitD1IR(5Anp!(rfUJ=#3/"H*#YI,aJYSnd(cKANKS\I@f`pUnSo6<HW9g3m?qHA4MRsaj]V42,(a[].Z'Z<e^a[bgh
%P@t2niYX2B4bHHmSt,N(Rsaj]iLKNcRqrG:7rOq[dRe?e$%Nie+PE+q[CnTGXObbs0n/qF41f\9:RfM9:%q,>grG2jqrci2r:8,3
%m(;fQfGC/MYCH??+qsh/0<W?,?&?8eB7BbUDrBf0NV/Y1K?)S.rH#L%?iA:MCR>4/;f@&1G;a&]\Z/oQ"oianUV3,a?WjEO#_rr)
%?eY9[gTYWE=VgknWLr%4TDn*$gjQXSU>`J+n&Jc_4Pn@#G4!V^LAh,23B.PM2^t-=LL5OZF5M\1M6i/i>cR#SgL$Sd-:7U?/+O34
%#WqtVrr*g*%)+]Ng(*C`GHWc:5cqOIB[dR_CNmMj(di]`s7#EeWmg3DDn\5Ss2&>idsplT\)/htqW[<!?i@Gr*ohSQ(tdL`j3\\1
%nL=*V8lmf4r;P5Ag8n]4?<W(>P2LJ4^G!IY@9A1a?9e+hl34[-n\VRA(t%e>^1#RndWN(lnFJYdinrc?4T>>DGnDqAC7Xg>JYUg?
%]`$OJe$]b<hYLc*W\-L%#?lI;2/Z&o"M6f-?AH#F^E2)XGk]F;o/aPa_p42?q=5B@TP<-HP!0W'-bnCspr@8WLDuk5F;Qb1;u)rD
%h#I6(W]\kH#)q"([4r6S?aarN"'R?lDW$5B&DH[/@,[:AaZ0-!/GIEE`jHW?481QF)9K0CE7",;Z43\ZIZfO=io&UHn=Z>MR7MS5
%rI2S-jGL+kio&4$biJT\[&N'C8#JlJ4NTTJ4jrKl#5Uc-F;lHMSnJ\Xdq8.jgGnV]S/uD9O9RD.eMoJA=NL+'*I6u1n+V,1B4'>.
%!44a>g5/AdoPnT/,]H9n$[EeuRRc1b/(Q_oJ*HRjF0WB)l^sbO88u02`Ok_d^\qU4GK6Md,M)#$"s\NT`BA8FV&bn+cRb<(.$]nB
%NZ,r(N:;ZNZ9`1PR`Ig07l-e_..,5eP]lCZ*:K%Sp!6;2rlj*c%t@inEV>7!T\VQaCpl'^k6VBu_$.kPqRDH'G,3CCOi>%-qWorX
%o113Op*hV.50@dAk8"3LpWmc412m2nI0]/pG>QAoJ*QqZB?i:7#'!'Mak1_o6\3C_U-#8-:I>]PQ(R2@btmg&\>IUPE9D`LohAV6
%/-,57(H!U<"6HE/41IG1+TKZ"qpU%4+n?7c;!;kSKAp5kSq`X.rjMcJ04*#OIeiQo,=[bh(X`Q;'#);72HgGF,&&(O[*7LR2pMm4
%0SHmJ\\#QQ_^`1\K+#jeKU6'CopqeG:Ybkd5FQWN]f44hf\#kD]B=s!(qN2PP8o=`_IELm:.(Y&GkdoO,j>!*3m@E:&FQoY5[FE_
%*&O@]=d7KsQchhP_t+s)lMY"4A,?_Jl9;gF%>DFaed'j7c^]FRfp=uH*hT-Tlg$2YE"p95?a6i`m>-2c@L0@6BARt3[Fn)qp"_\k
%^Rfl:di6'g?2F&C;kG]Y4lm8HhS=@n,Cq/_dC]D%qc@*RnqQkGo%Dk=F":)AV+7/lI-\Hf^8o#_oD.F5DdWM3k,/mTi0O.7s23k=
%hsR2C5DDqV?c6BAQej35T^gW+L]5_7]/XM3?[/:-:QrOaj4Ac?K0Qmf(\fjt(%:0Y@K'3T2D2af2p5RCZR115_3j3M0(a(sS)uq$
%\/e'2Zi>$*G5X%Ps)@5sQgIWIrgu$&OQOr)iQgVi>X%&jr:ou$doS2p)r`Z&5(30Z?MQpc[/@u8buoe22q&:!9<[=)1S8&\Ius\X
%q_]Gb5IgMbIf/"l^IDUNIM&YNo\#M%^\W-Jd^a\db*C-lI8u7K4h@,[>LtN?`g_^L?[r#eKLC9ekol&qdo;IiLe,d3cQl2J]$@&p
%24mU1-MQZ$8Bl5%,Y[e5jr-9);Y(c\C&WU#^@73CRbQhO/mNgPkLP8]*o-bfp:[U"0Dsk<(]JF5SI_7fo%qXg=!$/.ou4'5p#sj&
%)isIE](]n(imrg-52Z=sK:4FK\oIc4XY&"kr4LCp[LLiqLLV*_Q!.&\`MHqqHb[>qda^:Z?2A./p<?<m^GFjI2rO32QPp^J?<>>&
%q;6)i#2d.c;s,3/r#GF79;f4rO$&9gTG0&3IeLC$pUf%dJ%fs<Hl])Rj%915eh40)2rD.EcM9[grn#mH[YJePpL!rHkK<bli`DHg
%r;4+jdW\d,rSks=n%<XmA?\h(E`<VCSBGH.7K5s=W&K@-jf]c>pssZ(]_g\mG92-bs'.=;B+NW9]rI[#33aW"i/%:Oil$R&@G91C
%/l$6('%Y;`(FM+O$+oo'\N$i;9;hpj=bm_SmIfm.!TR(.jN.R`,F^ed`./^7>iT`<0m%?J^@4(>(u!5YmV`jqe67(mmb]R)k\P^(
%cToE.Ft/'7#NO01!p/4J0-6Z7e)b?e^Z0cjl,/rRqp4\3nV_b+rsl6EktJZMm<p!M^%U0,m;dBRbO<_'s4sGW5\]>tlW6=8WIF!:
%6=tcGVm01D1ifI3mAK\QcM?UHjg^8n<@3%h`D9j3RHR$+-DcX-UH2^n'pcU(<VqR`oeueqnXPfR]r<[/:>c);0>><[]YDANA>hf#
%_fR-k]cVH[6M(-`q^UmT),oFbf(/a>r?"3c:%?DtTC2Y?-gWj/d`q21Ii&L+q)1YRkRXlr8Y/Pj7S2OUSM;YA+1p!uJ%^;\gAb7g
%/ms:U)e]$V5<_U.;._0h!OqoM)g1'[\G-!4Ln4<CO/E:d[k&hdnCFH+nCEr(K\q7Tp=\K%OrC<LbWFNQS;WoOb.4C1r3m3E.4Y&N
%mQ3)I#0!e>)(#7!1G>g2]O*gOqsm2qkB:3]lgeFJ4l*g])tq_s?[VIIpU^=qrn.__m)'XC>^9mlhjSGrQnE3^n]a"b^,*6<qt)A;
%QH8jRDP`!/s*efH]_^@V:'As;kHR[K/!:aFEhU\tKn"@B'0+ma+*ND3e"]XPc]b=2boH6!GtM[&[1$P`pr-bK)qb`@VTZ]MkO'@-
%[iA@[LRBd04b)p79QjBA4e5dJgoq(A57#m<,1)k8(Ld'MS+%$Ul`d_/=pJT5q$[)efp@I_G\d'"qkMtFNoslimU!P%AB-m`^3"`k
%i.Y[nD\'-`cNtOd%gr]e1E-<#X9n152U3;l`\AAKN9P!#T!43bJTHSfMsco1QRB[+O.UA&.WSY"jJSBdcI(eo,k.-6\aZtYR#^>J
%E+BpU(_'"p8%!@9b]1u)+c$!.dT'Y]PI9ohR*GHuLU;'V*B?@2Q#q(\)lng3[]sn4*Eg$<a9=IB50cAEBq:kS)L-ffQVZ1e42u#Q
%*0<ljdIY)]O^D;;fu"W`qf$cP]*i8<hn=Cj]_8?'m`JhMrnY-F;;+n=\o;Hi1f2n<)r"/6A1e9i,2JdQlsFum.ae-*Z]43`-aLjE
%AkIE%M>/G?`$V<d#_.9hhN)T&[!PR&Gjo;PWs8KQ$qM3%\;T=lT5Y@Z-1.=j[/A4CA?i_AO4k1q*0KD\QSlIPr?`%9/d(+n>b8$8
%5@j'4n_*m'e_=0>GjF@5QQO:I'`,32o>g=g?MjD&s.LOrU5m]H*d-85O6tPsosq=i,;9(AnT@dmHuePE]gBL0IG=eorlt$trM.*9
%IsC`-Z\\&=[3AD_(Y)hG=\412rlJ>/HtW&Sb<((!oT+CKVRO&-Y<P.^V0R3_Tn!r_)B=3RHV%p5%X$gr4T*+b.s#%O&')>kkJ)+[
%?<_b=^G'<GrUl.Wk'rkTO1&Epi3t]aY%h7uH[@Ek8UEZCPP3./CfYY+4=L6F"lrfLnQF[J(`uPR>^Sd)"c28XGtp$'N(mCDknU?1
%m.e'HjW;8n]4.81d*!g-Y5%XQ$d*;6H$L;,q6D,M3dtUr>X/0N>kmOShn^2E3&ar*2,ESJH]'*BkMFINpN0!E](1)-2eHNiCJ!m9
%`7eadpN@'ant>\_pr=mT2nAKH5P))T=f_!sH2F5C^:<gObr8Dj>eAn'=XWH(FmPZk?<U;qhd24.k1i6OIf0pSQ#"C<lX*sPD>j-G
%-?jn,K/<(rn"&^;Y5d_CC`doTYNse,s3o66#,kG]rr.A39l@;mKDbD3$hjDbhbX2H5;$-*li*MpmCh1/kM?Wb5Q#aUr1jXNJ,\ZX
%=-hP;IQ*lAAb#>`c$[Kk^=ep$]g6sQ2iiEXgjAI+=;S0Orhl5YcJKRa`#nq*mMeoIo[T55BAS$<I'rq47ot0=k`r#*94.Y^@@@,f
%hRNb0-`hHfM:3`^+5QgDg;3fI[=\uu&V\@DG0cd5hn(o&49^1&T[.O>HMe"tP(%`OeuuROm9TU]>7Y'8LYL8W:%COH\$RaMl]t=<
%rfVg"?%:fTVtoX1G@kV$YL]<u]^t(/V;!pMh7eC-g4TFY\k)1WO7p<ci6p2q/cG?<o'=o9:<T$%TB,2+:M4?YrQ/n^Gk_4948>`"
%YC+$+q1&?_s1tH^mGY,#%rYgiF)1*"qcg\)It!=e<^4M@r:IijVQG(3T5X]JdsL6gr:q$(B<k\"J)=K5iXG_HJ+0psae/PWfRIhM
%C$VOrmsg_5DS@7nGkHc?pbY]LgO>=cas#SIrjHHhj.H8G:\-5g3HWM(J^`4g?bCXVer<2OmeqIpesWWJT0IX@qqeM\`:n0Lf<*AK
%]Cs:IM\k9cG44Ra>7Wp3G5%<II:#qEWi_`&G]EK'r>WNOp[*b7_p]^_qladZDVs75D#E;lK6t'KI.9Gb37q;@lbWo$*prjh#PW+#
%\p`tkB907PHuSK0ULSLfp&<uu2ru-g'7ZaM:%m,EFlDVfCBmP'^V+s\k3^2"04&`JlGNWj+7JF%SY5(.ScG3>\FHb@hgG(N$('.)
%dGje4<qW[Vn,qW$[iTpD_VoSlnqYQbrEHa\rU%uG%K"6q+<5TghjeYKI5nFt42.=nHZ8B?_aFEKc-.5mT7MjdUulH0>LUkS[AcUV
%?99m\2L5*cM9_A;J+-C90p'?h^XI35>MH=B*Ui&b?sgX5SQ)II^u/_=Q(;)O);slni_E$%$8ZaP-eGYU6BJI*[^D$sB/nt`PGVrO
%/o[pSeRu6CG8-s^,GRP/o9a+uXh#-U@aPW=>'2Tf0R5<j.6FXWB:O4EjsdH_4KlR,[]ne-n,qmO[Sr>_Af9e4odS"M(3H/Jh?pZE
%R_+qgF8p.EnoBgT55Y,J)bShIkm+YS\[AO9kFBaPe-./Z*#@-Rq8X8@@\aIL_G1THi)il!r(]jei"53LYS@>q_F1b&lYKP_=!s%L
%PCBgTNqn4uWcc,0BIl56\enh`.W,"2_Q!e8P7+OrH4hc',WH_V)_Egr=R%Sk4bKg0@5V-&V@rj;,['u86=(eCREA:GDHJtYR?ELS
%QgsY]G?P+1TpHao6J:Tf#+7hs1:j#%1_%<>4"UVOe&tEiBu@+h(4qONNpR01'qJ1ih'Y2mfl%:J+$$9AEV<&%TP]H2P=(g"agi'>
%md::LGOjgYcsZE+/iI0M-fPC<-HdCjUBT[$XAS2SjoO=C_p.Yk6.-G8Z>@M@2UO@RNt)hmVF4*Y."r*]mN`m6&'T![Z><MlF/p=a
%4$I1j_+q+?Xl<.JQtC"pY8LZm$d;8(WD.SCS.3!3isZIa%BKhHXg'F@XkkB__a=0%NgI/b_#9?'4jAar(t<dM?#)OD<O[5n-i",U
%EBK8FgBhE1_f6YM)\gD4L:n"l2Wq0l"n!'fG;N7j18L&,#DsI\j$9+*k6hUj:.E<ZZ[;0ZfK:I#?ul@VH/\'Hat^N?L4r4?1C/XY
%ln6:l2%hQtd)XCf9P$^RcGi7UOqu6^Q"o%[_Ni,)(9!8u%5)</-Kc^]lN*9_-RDpf-3?KY9qaV!#<1<I/jMpKKJMuDl2Yn-jT:[S
%?@<?cPRtlQ7a)(DCS)Osf:.kFS6IjQf^RB'mQju"T`ARI6@i64-\;^ZL`'^'_FWeS2Sa-/QJP?b\cj`79^^\9:CG_Y`E$V2ppT4e
%0md[Q=(;@DnT#S7lrJmf*n-)4;#:[PCgiq%d)*FD91KB>LU:C<+OWXld;B_HjJpoEb9>k&h,/`tr,MjG&1O:I]Rbpp=DdgRPZrQK
%Em[p6JE=e,\cC:jTZQ49QN>>J)P-,rK00MtS^*i\e3%q15W5._@DKbA>h<U37$02SY139[%30CPQtm0lTAgT@>gE5n_TWg^NX!]s
%[!OK:fjHtZm<G6n"q8d%9aG0e@fb):2fVOQ&<XuFP,U.s.XS19GMXcDYE_[@V^*h.BPeF-Z<J1_rS3!uaXPrUaq.\+l^0sLD,]j9
%krZ;Y.J=Le9ljT3I7:Yq>75i\Gum`&MbTO7#+dr\J)TWPg(bj208^*N@5EUa-=99*.:j)A7M1Z],:oOIpCQ4-,(ZRfH5=<.TlF5a
%QM\Y<6#_$(#\b0Z$9LSMD08M7c'qc;$Mi(A2VpTY'U2YReg:,nOf.N0N.VkCC+!EsHr1"T`L44[;lm^o%<V4=2'#HU6\nl'Hi:C/
%,+@!^P/"I[h!E5AQQ*DDUB%W.[P#8PH*VM[j.bH_9n),!b!O(Q3l")2Ka\0AF-T9e`AXX%_LW$Vo/0GZ"Zo^J,ciY3T+:tC3=MQT
%64eG1NPheVq_<#*XW3Ulg;]ftJR7Kn<bG$R2bbeGDh&&6CIVBWf79;\2"r_gFs"kG."iLK)W_dJLZOE9KCC(D^mS<%B0rIJ_MZeS
%,l'/uOt00pLdNcg<G[6Q:-]Dfj!!>?JH=9jK3(cm(p.V&.lFG`^Q31Id['pj[SEIJqW@,:T-)CJi0,QdEkihofOT8jpcO[Q7sWt5
%UL2"Q7>@*!Xn22[Ph`kMG(kq`Q_iMjdBSC&9;!d%9jL'SEeTg:'/+!*hOPWtOAVm2kPC-(ck)Y]Z3uN2Cr7$;eNDFt=+GLZQ\+"_
%2<Ce2?;;t&!KC*)?IhUcSn*-+D1cm_\+UU2?K?eo5bo4#dlRJiADj7(?O'Qo>0(Of6RP3Kno#e^4rUeqERjR#d7:pKBW;bhq\11n
%L;;Dc?O5j(r']i8&6bmJ4,kbF(?J8XU+TXL]F&pGqcsjn9;FD:F>2*tTTb\R[dltA6&-);WHf(VWNbU$2)OGN2B#!KOsg9E#=UVQ
%+gq!Y%j6B[dt_81J=].iEHn)Ffe]@C1on^oJ@nL#+paDYf5.B0B&oHe#[PT4Pc'TIFDlk*6Woj'.bD?RY.T<d3V&#ZmV%^F7AMOA
%>96.<5scFZ2CEiYclc+'-[16P\=g-?Y2T!/$-6#9%`2?1dEKsP4u9d=%tpo!<W$*&A<$;ZS'beu6\(>7$7eY**8G@Sg^-f%S*[cs
%BKpE.-hDUf7PgRD&A]MKNggTDgj>^Bj_KZD5-E3'!81b'oijjN[B@Hp>O6%$g:<E$CAVC>7(^gr5dUUoc<i583qk?o2ON;&WI3_C
%aE]=f/27Nro"r94Y#&Qid>8DYcN(M(gc10>-^[<5RR@Q,5JJq0.-kJ`f_KU!kGG,6^>?s5p!KGO"Vk0dC<@Pd'\l@t1Wg^T,3:p1
%nu3CU,+cVMZuh+6P`Z2X#8AaVS"'BAF*XqN!(Hq9aT1"-f]%hs];8hUDiLWb:und=!EX_(hN:1(>>ag]9U7n1B[KU]?.)TWkiA`3
%7PHk`ODWS<Y`Agj_4\U^%:5F0gele`Jl:(d\'P@?c#RWe_9<IGfEXU3qIPE)kOU_cSICU>B!mRo6C+G!"/Up?pRuV2C@VH6aCT:i
%bm?:c&^%,=hplW[KjrRkjd%,@02>[0Xec[r!=GN31c%NcCaQNLP"95CS3LBEG4&mkCc!ZJVaQ\Q=d)!NLre=bCH5TT%pKP&a8qV0
%40lZ`A1oKQ56#[O"4TiIHQ`2fo9V9?1TG0Unh*blSK(*U6';T"-K0kfqgb3XV192ES0omSF#U)T9"n$2.WWi]a%Ke?ja>3>R"k'd
%MBLMC)EIr\bBa0s=MN`)fcl(NGm\@=@"r5>N$=b<Z]OuTAAbTU$RW0EWXFW6f1OKrhJ-BcOBDIA$e_<lat\DrK^aPDMATsVJV!hJ
%.%nKCZIo?FGO1mL;(SO+qf;*-O:^&()RS_'X<S6t+8MM&6'$;`U9#.`[FM^3+oA\\Ed&%iMW))f+W0Og#6HIu9mC-gCbo)0PREsE
%j3o9WR*%#doRI\eGk.a>NHcFE$FEqZ^Ur#geRC#-q77T?jgnaE;.pip^/B#"b=^$S=fkZ>F"7%Z8gP>QRN%;HTY="Er<VYb,#>_C
%e1Wa!=a%[BZ;kC*;i3WQ7"\o.$sh+i5l5@1*fVZ[P/%RnC4bXi`ZCI*B-U*bQ>*`D:_S2j,-CrMA?Z4XAZud6)`DoGD!O3PebOb_
%/!\BN,H[ll<hG#RbHknF56<9P_YGWTeTaYl><,S',A4?IgiO(gF6_Ki!`u^2^ciVQG[29/R%W2P;r3ncIM.,S"bEn,Yj"`f+Jh]f
%3-5R][>_(cc[X10/<eh4_W*BeI=Vd<L"6uO]M<'$QICO\8Y0_MLDerQ_&0IROd%RWZ@]F<8nrRr%G+?K)o!HK51JQX1iu2ek)ors
%Q?V57kJiM%GH]kQF:CIkE2G^R`l'kLE2KLIj!pPZWEaPe@EK^N);\T6<Mnf.-OgKDN,WPA=s^,3;cVe!n),7J?3j(00"#ZbKeW@R
%P5upK=(V4N%e&MA#u^8(8ek;LQb%BC&fHp=Yt>u4VgeAJ,.Ot2k?m+,\</l!FHVE*U,]*MA:nG]7;ak18F@,1q1M1IL'<31'XqnP
%_Gh@"0b5L3JN53Z0J.rVFqT0t.\>CoftIio%O)YYWuU7ROI3,Q,Fu^U6+FX:E]#es0Jg^<1N#YM#FMX1"b:p,TnSG8%LHY/$17m0
%J*0,&<I)q@kF?2#<eE(h0S"/Go$^^7.iQta6:>hRo!)2p%`-\-R'!56;i#>A68E%/Yl\2^0mR;B*L+X?I0F-`-jgcHH2?fG:?4%X
%<R3m1(tTkjaIunUjFO]+^II7llP]&eMeC4`^p]k<>N#,F!(r=gM[45%N^S(Mi4+uT,(dY_`.;ap@WS1[\-f2EE5o*lhFBG`cKO*l
%9p9HO;(*aDdi*(OK0/FmigqPa"-Wss?"5'7$b>L%()Wp[Aql9W:/nN[*T\hnOTcSVe=lQ23kCn^'06K_s#-t%)P3;"_rFW&<Zrin
%0FI'QX>>gaQlu7oD8?,./j1ckHl:Fk7<ghnNXG(eMt!CtafcV5>>^E+e^8p#R+UU2j*WH5]"mq5RQF]5f.s/PnJYGNA.ZYY/hJV)
%\9,)cI8%6X++`VRct4se/fE.Pd*1?P__13&:7fC4=9i%L@:"=DX;2U].,W,3`Po/UNS7#-111sCh:U,*oeE`%"dY&hW=Qe#MBl8l
%fC*#'hU7$QhTcTXJi;RWRP>h^*'$'obV1!THZl.bH1e2/Ds:ncCd?_8Jr8n=N80kl@<a*8X<lLEX/CjdmnYL?h"q94bRj"GT!KlA
%"XUF2A<T@CUAB-E47Yea@kRr8#Gc4^Ye2++bh`OR:Q5q%_k`pKgO*BdbD84!7[N(pb\EO/gqp9<F&+$XA(k&4gsgtD6\TM5:`NTT
%niEghr&$3)D)ec!f!r_-O/m[51Ft($V6mV`iRe[ZdZ]J+#tj&o:`WKgS]S(QSTp,lk8"8RSpMA1)q;laW(h38ooZ1Li.)1EB5cbF
%b;!9YnU@@e4FB?k!u%<;`7!&K3Vo+d&*>[o3G/b^N2KMY^.U;NVqeM:+tp!%MS#t,.A)t</a-J@P1'd_5`\7Z]%!Hu$$RrofB*8G
%BB:a$Z]P`u[UA;0l88:7N8od]Qs30%ql?ahC%ILBq0K&`h1Dj,Vr<r=g-+^O!dCS!Se$nSX<KHB7G^d'PT=WsShEc*KJ3+7XKR`d
%B8BMF053fZ`&-<eCbgXr`cVC1CJ935NF6LqT1?ghgLNA1H2MInN6.@8is7k$F<qikUp_;YDb9]Nb-NC3l7uq9KV.LT"K3dt,KU($
%%aJA*.".n5RD=^75'VQ%chB`$Iau88Yp$=@R1DM;QW=_@gdY7?[E*+c2TfeC]TRk:\C8=Cdm=GcTN9PR!s0a2gGiRq^rBGWe._uf
%`b)<I<JR1(-.eZXHFX]*XLKd$dAnHZ3t*gIV:=t,"5rjj#'c^VXsTV$L1,oi`n7$Y]]:-rEc0)oG^i=)o9s'oE%;+-L^iAB!jBQ>
%!FBqhmV1>@Gu-$B&RC'jjJI<ca\HE"?D.49SR.P)@%gg7`m&OmU@#$u86&7"dh,A72Tr^lfC6W?C0h:\bR8l_:j\4t$Jj6E4g4hI
%i;#OM?`M-3S!u)/,9NX#ee$i).fV>5MuMQF67UQOc^-+L!Ih\sHYYTB<Ou"7'5<-&a3Y<A&)#G92%'g8PqlZH5Hf(lHK5qEL:_22
%P2!lg_fK_ued&(7D]MT?OghgE0YPBnEILDSJO9iRBn*I4RK>up=Iokl!kEdPL0F)sIZ4'77$'dc$$EX!,/-B\]<NH6$d6,VX8N;X
%pMR?hp_B,RH5j\?7g=@48ltnc`42R#_$r=!c)HZ:Ith0J\-goAqO5H@TpL_kla!^5aH$oD2`M@`TGkVFn;.E@_o<fPJ.X8'I11ht
%?R\mRo"k;D8oV:<]Kn(7i:lOT+!tC\MNSQ&Yl0pnCr,E_S1YL;U*C/g`"9AsmOCUb]HbG$<A<(h9j9GMV$<G>ZO.05#0uOI>bUHQ
%=Ob;,5e1rUl0kdAZbgis1<FNi-bW.ZergGOO<TJBUEbaXW7XaIhF>WQS3=_.m*3*=^-E=5VO^iC"rukr4RP(ue'M!r6$W6A]Zu'2
%o,#=p1:+Vh8pV9)aHJPP9bl6lAPUuUl3'U,G9@ts-dB/Oc--4j+s*CnJt<t-[$D(0MmUGG3$7*O9!3Uk/lWL]QM9EYO.AOF!g_8Z
%<'39j/%*66B+!LVi2i36(dL:F>qJXmq5TQV9[th?2hErrY*nYOC+^6FD,!OZIBE5%o>4P@C3*Tt!ULnAD?)aoM:=42pa/d>)B%2J
%dbP1hq`*LO:N@71Gm\ZdG4^RX11DYHg00K<K:SuTUre4,SA_7`iG^B^NM$_to-CK)H,Slk0>/qF1lQ7Yap4H&kPpA88Y7"5,'2&T
%UcGskK];<RY?"1r]22j;J["9(G2-?b$j)I2D(]maB*BpcZ+DPgH,W-i(tsqR@CR3(_10;SE0)Gkd]fREN=_q%T)(!+O@"+0+JS4s
%&bCM\O.Pk-g"XHG*q30R"j4ReRN'8t5rCh0NR&L34^3?F8^k6_f1[d5Q&C@Y]+Mu<EHu/l*H)Fr/8KOLUUmk7\na8f'3ZHsej6`L
%ChX)Y[?<3Wf6&#?MaD?fE,>]aU$]#YffYP59miQ,dbD&m_oPlZS0sR`2ck:?WsJh(n>r-Y\2Il+?60*Q;qk6)_cImFp)"BY=6k\.
%[=mS&lad\l&F$bcFuP#JJ26&R7e\h2R@o?'(=F;E[Q6WTR`t[4lgn%h:eBtB(-XpPecG,-HfHlK=i'63YjdXK]7IjNA"1<jK=TM'
%cWQ%RE/=-W79Sr4bG16k0-ku24p45F#oE8Hb^&a`dX+kN:j<Y-n18U_aLZQV/hk/F8q4>\XhaB-+\Ve%mp-8A$Ibg\@hZ)c'\6YK
%7IK;],:c==J+mTg"Dopch%-_)Z4.[UE6@1&O2N4Hpi%X?G*HD\GXogMma.=Oib>+t_/Q*`95sJg+ljohWn)U-Ot.H4[s9Ji3<rpG
%<He^m!^3a,#0g0WZ\W0k8U,?nEHspiP07=4+eis]+oF<986?19fm&0dY&YnbB2&3&l@pel4YWZVT60PP/fi/5MbE;%5Lfl(Wm]PV
%+mhD\LK,)G!tiWRl`/ju`$]u(%[(7PO&R5b09Y9&DTL]k^.B;;,6K)?]oAZoD1ak^Jm#eAa)Vj;S?^8p]O1_s8E62]hjU-f+G\E!
%+CX=.EH+(BjtL.-1[[bKm4u^>^<EkBX5T=/Dk/a$G:^_^$EaXdm2+`;Rg[<;1O4CE+o0Xr@g4ku(c/mT@16u],d?o!Ji9tF-A._n
%R):87_5nNN3\hS'54G+'-.QYmU/eiUoLUKmfP!>p%']Cn*c[R1]CpB7iYnGef\tBE":W]0%5>k%HeL^':63`m+[:]bI*Ad>6KNG]
%ZC\):*8r*a6'9E#L?0I0PW1gi\b$!k9G9B/R@NGT,@iuTh-d66SD2i`amp*6aP#(9i!tSedWsVc7IXVgp/=cQ[G[Gr\om]+&s>7D
%N1c+Vp2hDu\iSAQi/JCXieA\Z7YagC/!dK@QuAf,LN&*8`O`l://=)An"n,7qCj)5W_YP;N8ab\\4f#e=\)dc?-@[?Cs#Iu$[FNB
%75X7d/O>($n[D3Oe/*(e_&]a/?QDS7:qu&jrN1Bm.+cuQ=(DNr5%ldU1@Ucf6!&bTBF'sddc<-[k/LWb^Kt;;#GsP&[GZbT5R:N)
%#g!DrUd<#IN'$=copX#M9b[a%H4;nR#Xr&<Hn9/3<@c=7BHaWRjg1^)L4Z[E&-WoCm,1N(WrcOie[k&0[3`usP(9$p`oN?_HnB4D
%%kW&DWCBLUdO:p:FGaA]')2r%ll)U`kRAi/,=#=")N]M#kt.&Y'\0SJ*k^-P4V,A9Ua"Ib4`6+V,nEk;Gmf88$7egM&inCF[TR+:
%;7'Y:;S\09Q>l*Xa@ojL##>9^4NYI(F[r,G"Vf5Y'a'd9CAnotF*2mp)TF*'cLc^A=ol=X*uOUDd%g\egT\!EPRNk5Z4*,?pL'*:
%>3$O$+,6n#euk.20$K=?q[tRE>b$dOmKl96R+j9u\9q%?>gtdVM%*QhG^*:g\NAgV"VG.EWtfEJg!TutO9^@'R6QBSLmXgJ<.mr0
%>@hd/UeD1'"*;Nf1RCXeDT&oC_7Y]t1ol\j9?hnM8aS9b7ZWNuC*KNii@lXX'">umZOoZ_QFnSr+IIGSJ71bk957b+V]@+9'HiO^
%^I%s6PTm.ZZfg=C_6ggn^h5DD:q<Ha"S#0bdiMS!=#2=?/?k+g=c3o?kFE'Nmf2&4E/N$Y1$T\Ko;UVPJ6QLbRL14`>E`"9TWEQs
%AG9bO!'?H5ER.#kGiH^a,HlhqZRT%@CID3c$lGqK,XdUOD=)CG\.llH#BHdaUI$.jj[i9HYqJO,EE`^>.%qk,4!on?fsq*M>L>h&
%(_ahVXiT_E%$kqEWDU)HXH3*,Z:u)Ub"9PcI#Y@<\ebrQ84NlJ?0D9a"Sa@m[=_;9-;ZTnkFj:D:8)BA:)fB/PcE(E\ui&<.QpaQ
%=U?l?oE@cdUE&WY\:">\]t9rS#V$u"ot35`1Z]hodT%<[K89UGdV@IN'IostS((f`:cobO`mnpYOOplj;scf<lqOgGYY.cp>J[?\
%V'igj<!92+dje4?GQoSfP(V/p7^lGQ&nS<ZQgij#j%['-DD424IC,6;$>$n$4j8e/raCYZ.nt"M#`P4.%M/P0?:?N?SR9Pt%H^>t
%;Z;a/PLj`:mURl>GlWe<&V[.d_mq_03?g<Qb(+?3oSD#O($Tm!]e@c(4Z="1)='e!!fjt+oP4t9Ra[1OCtjI)<*(ROa^e,g9c,'S
%;K>ckI[^TP[Jm]E3_GH4%Xb4rq";@t6Ap:7_R&kEKf(gC[h0c6c5<6V(Q\BKbJ4]13NTrpBk/oS*f+[#YALf?3DV`hMpo"h(@flT
%").;0BKjr-(<U_T.Rt-L,j*C<8UQ2c[pcbq5HQu^Jtjro%`EDpMobgb2J>=uHJZ1`%SG,qV)m-Ggf63%M#`Ahb4Bh8+e^O5CF:JB
%d6:/V'W6gLd3k`ZYeA7O4+mTPGb28P8U$8[A*N_bF.1u!cg+Qm/]SM+eqH\pV+d>iU,:\LjmF:jf!R3mh<o3pYY3:ImGL!3KYd_'
%hEHfPSaQQ<^,'d73s,'06'^=/aU7hq&_O_F!N>5,!'eo%qmXX-L_WRbJ(iu7h]hmZIQ44)J]h/RWf)Cl`&P=^N^=JVh_O9pTItT1
%WlDZ0`0#GD_M<]2!'lb%"$'Lm?k=a!::;@98M9_=cYDLB\F!gHO\[DV`?TLL#(Q]njSI]"-^?V=r9Nj&Jm.YeNq;_tm/tam_D*4?
%h'&N::V@.IHQt;)IY/n/T+[j]<(oU%78t)@Lern!(T$BI,)'=pH5g:Yd?>JI<-E-+QeLoH<02]8`n=n"0"WH@M4k'5\R,Z-R.+gX
%*Gg6MU/WC3%2RK@8#D=uQ\c$#M3ugHdtt"?b.)[%IAo7HLce$++T>a@^+#8W=lFHKouZa$aTGVF3]10#4@%S?Do`"<=e^'VfuW=B
%Kjki4;JJo%[%cD^3YCmbY0#HBMk\86R(=Ng,U24`KkK<?TNI>$/GcZAT6inNR-o#`V]?m0GVo'nTZg\A6:kq%eIV89<??_&9un,$
%m#*#$lS9;Qloti'lAupS3YI$N%bI#NLB\h3KcG9Gcr6p2>Z@1B>JM[[m\5+uE2#T9!Ngc8gaGjZW"@iS,Xj^JY1;sB`3W8`dAbXS
%K5*4mhp'F>RTkSd?2)*t^!t'\J_$HS<UFn@s'iaq.A,nn<)lEXC6qYWF4^88&qWn(@7)S$Lj>t=H6s$@0o85gOWeiV&B#6^K`Lch
%Rifp.mfC\sBG;Rg7PQCX@B>]N%_+ispKPre$*Ma6d9`lalfDs#l)?o1jVhW&ekYJUjAm-"!ARd6)WA#%m!4.!OJ#KhW85,rqJ"Q,
%#k\90;M\ENe!u^NcrIKK.9n'm=6/5=p>Ua,-d6:n[3lmE#c5/VB"\OO2J"KZ,^+'h-A@0H!`'kFk%-te5dB[Pco9G:?3NK2:LM!c
%'[>A6H+c'BJ=$b"K5VI;]BI>cLCN;.^Z3cX/d<csk'30O;^gXQmO4GkjeJaHI\G2e0<jm`N/#Loh^2!J6A:@OZB>ZCS#Kc/nh(HC
%LSfj&=AbVL^eE.-F7blkR<UPlYmY$R=-t&@W@3:)B?7(;B5<2<W,?:E(!*hIhGh!`RlZm>H=KlHV!_X"1M,$caI;6",DNNi62b%?
%%8Nn*.g'7i/"taQ$8V)gnI4j=Tr)$iCOu9FR%$P_C@iF-Y:fG;P,bd.!8IVQl(km^+mXrR65Yij9uZ=6LX-RVO^8!dC_-Y,_3":%
%NChCL#9C-`bSntf$J4o&88pCZ(Z?sn%/k1r9E^>ed<SMj"8u%i`CIVCT`WQj&fX(rlFSB:I3Oc`Xm""6m?gRfMqQibh?=Zn:K:do
%%=$jZL"\PUQ_VZL</Braq=DlmeIkO4OJ8>17@f%7jD@eYQbj"/fQ,5Zi<:&u(r1g>ESccX\jo\O8m#.>Ra5q_oLp&R>a'k2]n\H/
%9cpV!PJ3le+RuJ#%g^RHUCBnmV.L\YR=nu^Bh:0'+CfI,K!U/fEDUc8gnSs^[2X9eM+D0FIb+Vd;Ltn,aYQUrLD)+!2Us56m1^;p
%D5"WG;j9@S0NZ@m"MTs00oAJuEX0`di+rmTHWe#$K.9"a:ZeNAB6*;/j,RsY+F<I+Gsm'&!UEAg3HAlJ,<VjpZJs5"O9m*#:DZ6m
%-2JV'^Htcbi/HJ84>E9?_5eN_j7C=`cX=oXQCa3iI-LbFo*N5G&YnZNM,lP\*bgfFq_>#R#bS#n]NjDHluEKd!n#*jd%i-hoJ2h9
%0oGcdhgNmTouZ0`U#IKU`@5C\>[Alq;uN6RZGnKZ])$`INu*tP(Xn1E7#Zc6jn'RaZ&P(,-2H6L!m:t;&<iW9H9"@+%;#cHGVZ,_
%7!f#;%2qsQ[NHK0c#WQRL$B5oiVcem+,u7`p*#o+"<Mkcp*$V6oSUITSuYs*\D4BH_qEgXOTSE[FojF:)GkG9Up#Lp5a51U8iCGZ
%$cWm^)[?\9FRRK7?B-+U[0qqWXj;\b^-!TNeik@H+5nc-pNY1<&;g<.B"??b]ST(TX?hl9*Xq-rl9'_681Jrg.r`HiLoihdr:mIS
%k!p<9:D1j(n2fTN#kXg]kq3LPZRSLB_+<$Y1!(Rf>gQD-s*b%d6!Dt/hR`['n?JN/p>sD5`$\9e[7hlD@8JKc)^nQ(VJ#h*W?9X8
%Z^p*cMQ<F;Y09(GNq=0XEP.F*3%rq##%)Z&[oj*(E5be9HX>YZc3FXi?o&"I&:5>^',XtQ!tf"o@^`<Op.7-5QCcWTO*ImNUVrY^
%KaLam2IXA"9mm13+V?9(HGkpabF.tb$MTuKFk%KHG;0_8`Wk7$2IE=i0!GTNU>3**Y_b`liB<^=LF'fu3TP25>#Tk2m`'9J;a9Vc
%i`1uc"@[91P8be-`atb<>l\i(kfJ&jpW0qI-7lSfr#QK0V,1JU%U+QuH8Q,4(OSm,+C`eO>KT5Wo/q@e;+H`k,mRaq\M\!+,FLnO
%D/DOX\@R,,(c*.j@%"AG*LC5c4lh0%3?R@rP?Q."iDWTPb!$ecU5.M1.o92&0B1ZYH)2<pe@W>&.fJK)A_V2_N4?"&f`mZk('M)<
%2M,MKnuV?2<00sV,F&eYD5B/KAQ8adL$Go?=\+G=h$*-"UhC$DLGtUBd_`j*L9:a;0PoYQdjVPpP=/?eXuK!pRPoO5f*q*$nLLV(
%R.8G]2`EL`W4BMTW'f<%IDbmkn3FBSB+&u<!uokdJFi;\_3p%fD&WqX,O6A?l<N[k``EP$qB+/j]?V]SqS*WgDIBIHN][VF3V1Z>
%oP&^<N+;1H4ucr$i^',T;B3=Ve@)Y>P#263W1SO7BrGm!Eq#Uf/MB*SX7dMt/%kOFjNq1I>'F[<[LOd('UAY&I*^B9n"-crYXGL,
%Fm1*AAns*G<BF5@goaT@/J!)*a88k\\EQuh(rk,mXp."F1fSY<\Jf]]Z6n,KaN0mom)Cu92R_EN:=eU6al2B=O52DR4H+,^k8a!Z
%hd#7HV*2099ba1_A4:J4AF3(lTtSAh/-i[!p^q";cJIUaXqsr8:\e!0Y4RPETskW@JSE:8hT9hW';&uak\d*j@;N!>__g1pFej-<
%RsKdi)At/Yq4s$Y5Lpd_^s!!@Y(;:>N8;b6AK4nZG7S+ZcTPVUVMuuF#EeiM->rMahMP%`RfKHNM-J@oo]W@2U[^S]FD[3&5l.#g
%N9g`g?<Y`c;29>#pM,ZNf=lA7>U-_th=:TXjg5&WPO.Ft,Nhhi`&-Jm>[g/O,8;qe?u0!HQ_6>^nU=1JYL[+*>]($GF@JC.UMb4F
%^lu9Eh"s&e<!dEu8MIPq,$j0Q_AgM_kh$*;ZXIO2q,VXcasN9$8lk<mXT1FIXl!gmq:Jo(E7(caKWCN$rg$qEd$P]N&2b5t"Wq@Q
%'a/GJM2.9LcNT)1brJ_-*73"&ITk9T0G$MWPOcMKB70:DmMs24J.*&-jh_nj&A2Y'P<@ts`Z:\`)o4_H:%F+='H-N)&PUTH0*p##
%'OWVQ(rfrA!.`lN`m'OoicnkKoPqTt3Y$jWc3p-+F'RbK*':kQ*\+)GD6sM<HDGK)Z'Z4'jrE@L(=QGe!K_;fX0Hedj+/rF)\7n(
%Oc^(7mT-!?D1g4]kXd+b%9>I<i2*Om%9A+1pDdBG1RP1R@RGgE=W%hZng;OX]##'T@QE/_3Nhj[NZDI9&,(mlTu-j^9p8-t#G%4E
%q4o)sdFhGt_.[duF\F7,#WlT@20a6_fWNm?q;%a=F#(c;9'B*?!N%dcPIi$ST9WsT*8'm(Y-s)t=gJ`?(_0@l(lmkO;_)NdTotW&
%'g@/#\GFHf6fB2t50G@qYENP77qaf]NncY)D=."l$>T$F<o`jr.Z;a,4*kpuRU@[`on_J<LN?LL7%SgX<`E^T5g)2h2/bR$rm#T!
%qh,@En7T;mORWpNXC-IiF)]TVJPKb'W54KEY58NjWUCn^q8%u4n1l!5nsso;eU<<lffXr&TFaW143s4p+`0:+lN3rY0d8]5Hl0nf
%+S*XHpq*&!;&`!t?jVtMeE`cn#RWH*!O-LHfp$/iA2LH&+BP8'%Gm=dK$,,)0LfU0[((dHPcoH=nT,AZ.UjWm-6@r3.1S-f280g8
%O;+(kCX';L(_]iWYYh9j,D"q;j[!!9jm\B%FP6_lnViiO@):pHGXrl5BG6j!M0L!XJq^UA5b!eaS'sCVC#ZWj[,UJ3(*\^$`9<W*
%hJ"?JX/LtElZI2IEsM$:G3pSZ@)PHg'A]h<);W&(H;3f@BDYl2TPobsnPQQ]D%$(O`mL=Vs)`]n+dd#LB6]W,D!)/0ej.?YV$i3"
%/+<o9`0sg=>%+VkY\4Q4(5q<\fLCPZX>+TIX"VbAD@f;hk.6,4(qp9c==md/RlYF(N'2&idY\`0N^Hle6?IK_%AXX(&]V"G\5Q6X
%Phm`;j9T!Jis33Jr#JJ)b+PA]&ApM&F6_$VN<RM3_+[Fuo7Ak@X+6:<RCLKL6$AMrDaQc+cJYW9fa/JIY)1Q5=(#?nGQS#QjLC"%
%Z`8L7i@5.N1K"qbF3e5gCg@Ta1=7`Z=jJnq`PPuo20OYkAkXca/=7t;GIS'ClN0Q`LrF0F[C9B/9Oip09mIpM;9Dsraaq9&OuGUY
%L8`\SoI-PJn*q`gf!#.EOVfSf#kZq@S?a[Q2C1aA\-%\D3Hb$ah2ZauGGuY5WaW;giL!A6mMZ!\C1VNsRX,[-<nCDph[t+i%kTb`
%;>CK\;H17X?p9[o!#[rb)MB-rhQ\nXO!OL(7HN4W0Si\VfZ4`=R?J1YVLRJ*$k`gSk(G5p6ZFGR,G.S@e.(ANFNA)/.ZCHpHqn([
%s"Z479K'%&Fp&:u(IQ'tj,99SP;RhgL'JS"`+G0'[=j'Z@TGJ8+Q+"m"XL"-I'aY#&4C2@'HSBZk.G.A230K";WmjkfLSK1Lh>LS
%:Gu4+fRrq>06'L$SQSuOZV;V@gl,\(VXI?kBj)K/q5Dcd0&-JMBdF110'WhCCCPV7'-S,IKrAGm"/K$5&'qo::jFs'L)duIV$8hG
%"0Jpa=Yq]i$R:5UWg[jWQ)W):*Y+.J"_sI="@Y"6/BWYn#Ygh)[-rXY+;<en$hKYg$Z'A8LrAr<nk1'NUJBj/#a:86Wkamlr!G-J
%SVUEhI=sbXoI_lk4[T]0\h*R^cn_j8.h`q[pC(X6KYRaW\d63l>T$D-l(Q]g"0X2$_pn!T.*u\.-\]7"O<\0hps<E8PuuS"c^o(h
%&Q>F@QpMlEGpj&;":DBPLojga]8C_;6UcC8V@?%qI-`nL>'3[T@[O76(\V2nSZE26qONDs.m/FK=96r`"6&jU;q?U&:b[-P9i];j
%-KEp7REb?J*p))%bD\5s6Iof,KEsGm.RZG;Cr,sN57n_qO,6`o`(F2jp>]$@Ht\,#(q=-Ke['S_n:4LQ4q5Ks#%a.E$u:Fs1gNp1
%$\=o3'Z_9hn9GdcZ=#_&^2lHMAZ2lrkHS3'!On@F$Bt&o;t;3a9Ve+bhK,KFjR%cOV*9(2mlQ:k).WN4dZ=q>S!_3'dN/Qa'.dA;
%$F-8X(dGi,"p>:n7BXU!8dQL=)2+\4&kp4``o<`oTminA`q,%2%SI/8;-<7l<=;&q&oA>3&q"(p%l4PZ$3lPk/PVGYL*r@p*%Sfk
%N-;r0&^.MWDJG<1(N0eN)1Ss$rC$ZaVZ1j?]h1:0pj=P5LCME^-Qg^To6h+J4n`t3<]NiJF/mc@P-8UL9=eI<qh1Fn\!IjLKYm7l
%RO\EY:*'`.);K?bCWKm6q>B&)3%$l"$uQZGV7/,8PjgITEtp61`a<+)W5M^=nm?Ik+g5'l!eDLe3,^KA$'7>Q$DP/&S9eW_SrGI]
%!2ei=OBb4S=Y9AB,8qQJLSB)Y*$YTG'Uck:UO70hj\gb;&Yiu%#!bsdcPRqY-Nc2n<.d0'83on8as88n&Na1&!J7PgYiYc(R55>W
%#rsl!M'ulXM2;5bW:QlL^mWGGm/t=-Q&6W$au@8)R\`\!`f[Q1L__PDW@q7Po-aoq6&)sOnE_c6@Ib>?iEBfqKF1HW9V'eAqM.#a
%eS<5!oH>&gX?Cul_TpFD80]g*-5m2.E\jfR$QN=m&Kn04+bmdo%"F0LBSm7,?D!2^S:Tktj<!9GHnrt&"Pl&%>mUQX$I.Bq^##n7
%8>o@ToHDg!hU0[\,a^o^VNGZ@i!3LU-tgg200q+)%>]1n(:#9+!X_k$`XNldU/[U7o'Xs;F$!i8U='$^_cY%t,eIi,5%+`u$C@\W
%`;D4^/_jFsE(%"-jHBJkCP:HN4M#\_[@&5IW3C`2kLHb6-sZ+SA;$SrJ[MFuNQb@fD?L.qbpSCu<#0-`:jkg(1)^diWkU];4u@CT
%D%%.h$j\Dh:@2['MG?#t+\pIR5:E=#=^5YXnXrX\:H(R>WZFVAL2BTD#n=6&W5'(aCS"X`+Lu<R-1FG^[,Cc*Hj\@]RQ:ug?!ZrI
%FD?@2N"jf9\\Os30kK[5M#m+o6C+U6H;RI+].fjK!-Qq4RE5h'EM07,XkY_lH("%K0UYi]F1(:W&U-sRqU,Z%e)J2144*f&dUkfO
%%DiF\A$o^d]`Y8/02+Dn/pO<WJM6\iqI\q0)3MKN,(^42TDK(;NK";Z]nT;j:UVBl5kkG17-+`5`V8q[%=sge9a-O>+Nmh`qCgm+
%AVi,E5??o_KZOeuLm[lD_9oYm!b^"c@Z+1u1F3MRVA?+qEJmPbUno$'hdp7"JuFjF<FOm>9ne#:\VL;5Xi<jZR$Irs>qJK14lZG$
%rJ$NY5(XOP"6@!j&OD+GFl6(TCFZIe[5[k:[*f@XOVJ-?rWNZD,VjonB,Ah;;s1Y@OXI*%"&^U<&eIWk`tp7g_b$+XE_5BC>#<Q%
%5(m$id:o=r5YOULM`j;XBh0"iNb:p\/4%km5Tb@Sd;d906APi2NLeS\K.G^jIg=%EGaW'h[7D^GqMD_5NCCo'jET16X2R9)(++qh
%Jb!uL:SFRq.P0(TA%%)KTKIu.J\o"Q[P0$6e6WHGf.*j6e5??VNX+2fe<q;<ZOFeq7H$70;-)mu;pQKfLhXj=2usrcK:<C,VBqZA
%PtBK&a\`<f0oqu1lc&tR?p?1RX(f&MV"6&S9oF#1A6IZ;1,Vorb%?^t4duON2tGR2O:OB)W'`H&%#Cr,fhMoeWof.j%RP<8r)$%c
%Xl-*fm^<L6o*m_&G]a.$+[F+lAASS#RoLiP+la3ONC[$IX,1qq6#f02;?<a\,p4b>l$EjfMfm/KELIRE&5q!Z$L44;%N=Bl"&24Q
%oReR0j9'udAb#T60I<n62>7qCF3tP.:+1Q!rGo:f"t2DKnujq<\*>KI+o7cB@-BPMCQV.3#`%R0SM]K10qhbn>rNK.!,9ekA19HC
%j/R<f?q%bE)a$6u%=i!J)_uj&rkN;;VQNrcXqO`t,su[<5s>rtP=DG7iYj&iP;`l.#IUaT<(.2J<Ij'KO="Zh01GlMel+^=`:Q(#
%J#hl<P]o23]@E!C%$?Md1UE\b@aqrj0l6H=1@n-0`GDlCeRKqrYbY$<gF1Sg]ZT:EN1UskJMLYtgc1`a@iK"AQlLVfV%?V$UV1&:
%,o-]Pa_i5-:<&%jIM7q+iSqludp,Zo_u!"A$<Z=H@U"r8Y9>fr4:INiUri_TaB9_3:&soePgU*QO*L@60`c)-g5f6p]1?F<O_U:]
%a=::m'I_i[%@S=&L02Q>$;ht[,bpb[phd:KM6%-n>:Z?qj3\H@NLb0sae:UP(hsU-?7WBQC)/t*KkUQaM\N&n(+]Y.D/1FtChI0u
%O&m_j[HUMY2hP9$+39/9FX0r%CRJF!KnqQUBK+#2,T1H\`SZbsJ]@`*FAdoQSrf^VE]W8A[5(V@hoKMa`ud$lEknD5^5;ME\D#V8
%cr1:i6m7#aCXn35.OmS."LC.#MHN,=%%R,:Lsj<R0+F&cm=t`<GA%Y0p*6Gci2>Ee'e.k@3:]U8,Wco'5nniYZ8)(nDaZaV)cB,@
%$ULI8k_.%[#Yh,\lnemLII$,S&83ji[tmOIG"2kJP"i-)43%h"'B;p\/Vi+YS0o.6i-N'6Y^rRu3(CuiE'j.5e+OABW\)qK@iksb
%PXM$JA/*sE[]I'jD\_"'!Qh+hX7R7j*DFO?!?#mp[krT7M1/nmN0&;Caf>7PG99<@&Dp0;8Tm'tL5[)?c1#8Z!i4iP&!=L,/#=[1
%k?i4kS_dG*qPG3rW"mog_"M"$%ue&f/s@]C8qGJ</=4^OiN$)]6t6i2j`TDWJW8/1,=Dp#@)FkRIu(1[d'%eEi,iX6hf-XHZMIub
%)_Jud>(.3D-FM=#UsfK'cNHf$cormH\IFiZ,dRPOQpq4&5*W\XgL?>]`&nGJM99[/*/<dB6fop\`9@IPUlGX#50l!uKKuS#\MZjo
%/E!)SKk_f`8;I=BTM\(,KI2Xh`73n5ah1K$ng;;daA&&pL[$Z.TO<EL$o(I=`>tR%IE7*>,$CNf2H.F'rBrMpVLN=@Pen/m64EUt
%j[(Ri6W*"eI$^"h6=)(K;:Mnk/<q6g%YVsVA^+*q/^r3ZpZM`E1-iu&0P4t'3mcl.^(V7if7XNX,a!epC`RJcXR@)g9$nn>h!J'D
%ga*@VVPtHWgaB=1cuMJ+!9\rq7c:U(mpm`]@EkJ!M\!%k+S.at)2r+"35jlX,+DT?Ig?h>]YMjgq0ql;;X<LR[NH5/QLS^3Yb.mD
%,>rr#I]Lh7BIn?qE`4CQ<9o\5OVfF0&"4UgnsLJ#Cqee2^7%t@U`qDf48E>l"P>"IOX8"OO&3%.25((TeQnd!UP%sdQ4bA[5"1;s
%g2hi;CrufL>@6$jEA8#6H>R,O!PlKK;>Or^$+bu(b5$]W=c,IJLYE[e`-CT.PQf))<+1Vf]k;pDbf#/a&2BXc0\)UjCdPQQ/u3e&
%&=Y5PR<F(X&k^ZtbhTKVUBE*O#mH34B<g0(1fO)N+5<U[fV%f0@*paqnajO)=if)ema"bm=CukP.ah.JJEmIu>+%O).2O>[6<6>+
%bBh6^PshMBb&q-Y!D^QWdfon)M)g*KdY3&WfGnoejdp[ei\>7^ls94SnusrC5PpM1*_$SnTWud@^?HO8mb5g`ME9,ILU9PrIZDRB
%62-BTAf;$ZhWksUL,LQS^.@h[83V8(0`No4#`aNrdX8S[r855c7Z!bt('p^,jO$QcVp%m'+8MAKBES?VT%V!iq@OQ6RJ."&[i5Jk
%BMsr:>d-7>7#GU%-0Ap9K0k7eLj#blK[19&,($^;#_^eHhZ\%;nQG=BYYC`1i!OS!eBb0b'FF-UE^7iZ$l"q8-7L3CUbk`)B!l2a
%lC^ECBQb'dRESb:X?ls5RCAgu#/*6ED*dg@:j'b8=em]\-lFaJ2-^Td=(2A[kd)h$YqV!*Xc=SsTg0%X-CoYU8ESTLYbRAb"?P]>
%[*MFXau'6j8bB7(d\&pcT$%dqJ+]+gWZKO5P?H35Es5t<;`-'b$D/-E`<fN.>!dYn"LiCL\=,???G+b*;U`$W)0r4mIC/_3Zl5A)
%`uH(,<@5'8.AjCGY\?;<aOc2ILTN`X;L@+]=B1QeH1"o@mc@;aJuji#@N#r3^16Om\q$.:Bn;Ph]2>e(1Gr+3isW3mj^J^$?s_&C
%V6$Cn:O'*Y=StS%8*+G[j]oWjnU7FcI-?1n//#%q1R4_meXN6:YSG-W-*IN=MXP$kR7]1Ln)U5-CEFD$5f=jF-gPFs7Xmafg8M3;
%W0S#cP<2En@,A&*12>E;Bs"aO\bG$HbUf08+U&EU5;-IP?NX4_,r+:'4(bW(9cmEX/"qTLOM0+'U9HCuZGaPGcbeNX?H>5/:n'A#
%ODkj*ZZ\3iHm'a",m4E^@J1NOdrgfg2<]gc@uZ&n[CYk?3f(C"9^i=/Rd']"A7YPBH-\P'/;jNtCS3'X'Tu@j;\L3^hOA^L+AHZ*
%'2i*R<N=p*],ku3S@@3_LM[uQ!L\#79e`Gb_dEp-TbL\4M4->'S;%4W9H)Ue6BnICTVY0_Ut2+YOq(>W@7./s"*XN%JValJF*Q>5
%]WNX*G=M7F1r$"T_)u,2aKi](J_j-&eIup:p0Gupi8H?q+7Dgk%9FgEPQ=\co2]e)RPBF=W:#C%HY#neq,9bTaGAq=`*4#>$-f)u
%,!ke:/ZPC4#-jh/Q8d))$HFjGLCe$G5R$S1m'aqd!nF3NLQMV(+7("[,stKWmSK?;a;@_meJnAfWfC2ekF,<b:goMg5VtUMU6'As
%H)RDodLL&cV8g/,gE5DV[-j/kM@DiJ.<.^F"iD>!+H2m%2J.bC9e8mUdB\Nu&M8cgR]*dTXmV*^?Nfq'DoOVW$d+nCNJX%1iX8^1
%0HC;V/KRJAF":O/*=<V)UDQd(*?-#EGsW]4i'MZ>SF5?(D:R",T!S)aQ?BaS4(Ns<mP=q*naN@pM(?g%iU$g1#jL-RXEL.(`^nA]
%*ss9UL>GeH&:/;1ILTt"[GDQnXtOnE<"'=I,"hVsk6-uN5fVld[#R*YC&rQaWIAWc]=[jhPW;(JWjuhl1VZ^8<3t:fI'JcGk]Jb3
%"%Bidj*&5p%PfMm&?4ks+GH!G4ES$5n-YCGdBK+=!Q2g&=;?ZlY01,qMh,T=ToKSjhA'HB:r97AJg,%%#=*5rKGG#LZ4tKAJX_JN
%n0+:P*4_9tV<XK()r6*Y1V]Vrno3(-0r&bid*n9^^E%&9!O3gcX?*@^!n9$pdbmB_18"f2VP%XkB%E_MUEuSc3!kiJ$u,Mqk\@H$
%6=Z<hA]U(T=uEF]`?ieJ.)Q&nO5hgQ-0DYRd4g\12/5=a)G-DW"*P^\bfuA?msBEf;&6(NYs8I)&K_P9eH<a6`^2Lf>\IqH;U%%h
%['DCo&053fR%SHRZ_WHB6;e8MK^;Br=1+QRU6Fh()9,.e_tUe%U9;I=UQqs^CZLj_K+hfjE1k&Op.<4E@OY=3l=h#_Odn7L]A`2!
%[in(`W/L/()5/1,QNCHTYo.WP"^hPEo'fT'T^&Q)XTGDm^>^!@]u[*c2C2;*)bVk!ILhFH0YXM5F&AX"1FYh5Mr=uNgI)2ibc%19
%#.R&BfOh\)!,;.<N4Qdn);h/VT.P%0+:XgX.^7::!P:IcIhYF]101S*oVc(YaYNK=$C,VK*QD\@bH32@PfSH&T^A`]OQndh"9SG_
%m/nt5VQ:,-TeXQ&n9edhqPSlN4E9$<7>-5jB.>N-HId)S'PA0Gb1uEAV'lHd>_L5D5HKtscd]HeJ3n/0TL/%'U8V)r2ep[k1(FIT
%#/X1Z$oqM)%%tg^MlB"6"d!FSiq.BR+XV/tYYO###F((JZ(?(;"GLM+-<]]r3F8+lZ$iRJVlrgQ>Nt;.U-dSkghMV7/^o#U%sl&f
%G[WD!\;s[2Lan;KXRq+Bc^j;-WQg[<B"ak:jC*WC1-iG/hk5uRm&89qP*uPB]Z([`.5c[O7`3_W%$prDEU)/cj*`VDAth0cRm>RU
%PmEm032lgSf`;[Pr"q:US['BNh\"$Y=6,B7]'IFCahIMqqhC[L]EC'@0'"C7E2ZMV>,`JMMe6S8locpNSsB)dSfDZgQ/!]dA*@\Y
%Qi[>R;Uj2"%i#:GTNjR,1fPL8W#XUk0pG+pVN46C?I%%`_1ikkZ'3B9l-#k(r3YMsKR:68k6B-&MjG$'@V[ln`A?JMd%*LS0do^[
%L]@*Z]Ss-OFb]a]`@tG<8:ROM[2&@\e$2t)9BkC^;u%\mNh"fPT-c-e6u;r<!nk.hU@S[/@2YsFfh^ZOO<&5VW0[i2^RD,n=>#,+
%Sopu>+Oi^H,o(ZW5g,>_L+@!N4D<>*20o&."KBfPEn=\.jmu0\9N?&ud40N4poI\"NVH3]93PnErFSJil$K9gF]NMAUS]d+5J6i,
%k_&)]n;L:DB1TUj9+[0;,2[86^0jia;O"GlTVA3)DA9r+Q#p&'NP#lL6mdR<*&M_"-sZr=/7#Ju:+s2j>s1Gc1/_aZ\j7lDO11cr
%A:t3Qa*_(M`IGc^1:6uFA$rTn5jh=>Yr53QKoAK?J]$H>h(X89<aamE\55V"i#G/$Z8g=U62b4\?KloGD-7]*:B#g[9*hr$NC%3T
%-[5;alKt)8NKIPi/."VRKAhLU;Tqrf?[8\V4nTF[gSi`J5V-p`FUR`(31>j:(BsI^T%B_"1n',mU5#uiZ(<@-nfGWLBO`8\+$P,H
%Pf]/8NiEZ'Zl'?B4eRo`0#l?+F8260IOSYsnZ%n\WsIFG\olBDDi@;PPGCjcoMdi7&Re2M"6_FA]82/1P!)h^G]*`jR$E9#(`6YN
%?qo*>M_c$P;)\N`GqA*J[pW<!jEp?lC^f0)_;P?@rn^eo[#"3Z(N=Q'XEh/Xbj37\SuW\$\[#PRIIZ=I>;mU/]D(W^>D#!fn@dTV
%FmJYVY5NA+il1Yqh7Isqeq9$eh7[BkXo"Q->8Q/0J,dgF]#fjHGOO>%nb[gnIb6kIrP?2I\p!91c&L#g0CD'7GO*']s+?>aI201C
%HuSQ%^7Tjnn+NO2fC"%[ptEstfBtfe?+b7WiVbj!+)Obdq!dSIa7jJo5A2^aJ,&R4#C!B-3Sr+0qe4]pE:qei"")=N?G1ORp>^oE
%0=m?hiW#X1GBDG3Yc`C6&XO!GkCYkkqY&0(^E'q=oqM.4*3,UIMLM(,l8(p-S%a^hq<HPE8%0OeHbuJ!We1+nK6$_E:>Wa.qq'^H
%SR`X77N6b8Pr8O0N]q4+hjfqRqk.9MGJ$/Rp>FZ\LPPg!PGJGDAQE?Z.25O&9Z18L0m/3SEu#aOpB:X;M0[f:+V^@iWJb^l1<"W@
%8+JfqeIsn8**X#k30\)i2o-_0Sq1a%S2ZCd`m1JpR#N9tK[6\'prpg!eIcnRN#8+@`('_'oW[lS)9TgTj%L'[P$*fm=V3&t-bWps
%A"sUH-qMT:>D3PZ-(:Y6>($18C@-u4A"4u\#IF%kfN0D<&K.qbl'`qN%C5oC_p.onBY/5K=8Tqa4]DrlDd,qD5>gdLrDaK)@1)6D
%S%@eN#4,@K7a)p%n<AM'S9b!+VWo#p9lpa5EIdf70Jk4Q6Z_11Dj@F`i24J6B9\LW+"NO^KJ`taZ9=]nQk(S%1Z/`sgqAflIdSU<
%.8XJDI7Q0&T%=CSk7qB*Jk/CV?CVJ7YN$$%lQ&fE##RT8XCs$,mV6NNId<t*#'`<^6Vm<A)@!T1Pk;&QUZUi<Z@(%6<i<7J?MDXB
%>d-C?D7.9Q^@9EPX"ujOp"[q[eFT&.6p8oPGU`shS6HiO\9BbpI7UsTT7bCP'!ph&:iaW74XW%APZ]Chl4O_UK[iq1<^$sJ?I&a-
%'';klcNH`:eEX%;Uf(fJX.cEpZQZU$"YEc`DJoVHAer&UOgM[(.(Cpr7t^X1[5?6hYuTQi0`!FV>:kcQI;T(NajnJDoJBre/q>t!
%#T_(:P'XORnDIq/<-\;.4rHe7)H.MsVh,drX7.uej"K(6SGr9`>JA-YX"o(eB>A=Sg1H*Bg^U#iZQEV6<+\W=>!&8C5,9(El1a_O
%)8nYfTn.J\L5lJ^`jB&O]\r%bWN?A'qej2U/+P<s@*[7c0T51"GJk&[O?*\lR#gO3oU6L&4DF`;ckB,)Lmo7d2.K7r1D+e4Bm?N,
%V1jW+Q_"E*#.6W4=@3;%XA;<QMc;<!E8[8XBjG`(j_V+[kJ@FX(-8oA3gua+UtpZJbm#iDd5'c6NAGo6,c_PJR&R]e\q;_J"a^QW
%AG*'<lA`0oc\&*_P/4)/*>;kmAh'!6&AF[!!.+eg<U8#YQ`I"K)TLjLoBC!9RE]'OCWD^ae*MLtZiD#?3b>jSn2jRadL.2i12F,g
%P&W2(Wi'>s_J-.\Qu$=85ieCm>MdSKOm1B!V(Gt'B21-2et&T)(9XJ;AA:hjYBkeIKZ[ja-8sSA[k9Jh1RJ>Ca2t(HnpK9JU+jD2
%SPN;0\t<*u#&RLtZ;OEH\S?f4(:EEF?Gk9cn`b>6-S&c@LA*X4GC[N)+>?Dn"NEr(JKliHC6qpN#UH!2H$VcrMgIopda3Tk/%0Q*
%XOo;"eVYMq6#A->NDA.V64YZPNb5]<`M8<%>AWCtFuGa5FG<qTl.frJpAH7&OO]-0_=22G"2'^^?)"E4;IC'ZVN;%ZQ/4$lo0jb6
%BsfX_;7:0b9b,f(j"9am`Z*jMJP/MNiTNX4T<?nsSukdic0@2K2S_$2IcB^9;8qfp^?f/\:q@"gdiE+j5?,*L=aGqBi,N'*4;0(>
%:?1W`ZQP=PRp=tRqVOAp;qm.NYKX\\l=lS9p_R(BI&lCBa<I/YC!o+L=]n3%5%;$a4fg+H'='Wc_HTf&K`(-Ldh6a>l[gCQEd-RF
%Ag1^UX[:`1)!2gnbKRR;`PJ%S@P/Nb&\:5G2.em[Tg]0\ZM_/<SLbA+\m+KfOJ:?^mVj0ub8Smia_;$=U)lM-beYciDq#HV3bXY!
%O%rZt'e#Mc!JX[[4m!cZr'[Cl4"+@Z4T-b"*Y,^S0oOQ2Mhu\g8+j6L(a;[f+V&7%^o["M!'r4$af$VB`rKW"9ui>_<1>-k)t4bV
%6"O3?=;Bt/RADu>TQjDZ;%o'qcsj;R*$ulSlHtLY`"75=dRLQ*PlpZ;h(r%/naV9AmG$:;:YVX\-VFuW3A[!lc'51Ti'^D:^>>M?
%Eo*[cB>ZBT+^7nYd,]QK.:[IVBefb^e=>u1eu\:&KpNsZT1P)[<S"1oE7F'<L9YAs=#r]g!t-^,=T<3o/m4C#llJh97qT)p)#W:N
%1WW)X`(_t[)_CU',uI^gq.f0#JcuoUp_:7Hl-uq!.b<[^rr#NsV$Z[CQ)"YQWVJBT%=U%=]'o<NQ&N#"8Bt.*(oK\L"MRL:B$C:P
%!?$EoB1as,3p%9JjVT/\C3J<Gl7(OeRn]C7U;(?Fjrt=pK'TOB%LCkNYcqm2)?PJ!CUNk(EU\=Pco]V]Y:&/m?M+=6I]VH6;n+82
%"h5qEC;5MD3qK0Kene(pI<C/?Pc'&!nLf'j9s3ZECRX"4!SW_`^&m!lB=s<5)e_Cq,JoGL?t.3q)Nr'L1GY&OHHZ"KemfHFQm+7\
%)K*J%Lrc%K2;s0QBZV]&(qGPE9R5o+:QpL)nq:Odj+Q__o-;[pY;(SJKCYH[2Q54A%,M&mlmDudgY?e^n^,F9eC<Z!:B#no3#If`
%R;.me$/%$*O/KJ6<-k>:%`.abBFA*]Grh?hdp!_[f@@h/edWm7L(?e$pu#WQ$jpFCBZM:?,%$__X=Kfu^?tZ^Gq<-e)35K\8DE6g
%he+^(Sh)Y0m"fB0=f>A+m>8lrV9OdHQ!#O//4l<<9*cn2E^'J#6`?Xt@ULP;e@_Kj68]hMH7ipsQ5HOG7M3fXJn_,,(qN3WPf=rB
%"XYJd)B2-,:,*PsD)HO_N>"'YRm04N-ifAf1:+&ZL/dRXe>89&gfS$D=Kj=ZRR3-^.Ijt8L9\CG=:0Ae$7r):l+Ugj#^@d#=G\c.
%=;e+"Ze&7B?[sYd&"5Y6'<A76c7"5(RDOTm!sl&?k$J6V0Q.p&bfi1'07X9(d`:,:"gEsHCm<IQ4lXB?8)?'<E(hQ9WDl=W#\i-H
%$KU9WTdRT$[Ac^78;GXf&F+sc^S[p#Y,onK/VIYrju39Ycb6BY;_Wm"e9dY6bEQ(_6NdM+f0lFE=q[%KZ>9,JKF"65.O7ZnhnZIX
%lmC14KABCd.7-16PS<)#iHO7M+t!/\Ro4R%H.Ed8Kr.#V`huss"!+:2Btau$Hs%f@qZe]uZA>>21N7T7BT/'TnWkH:3&T5O"au.]
%%I9`sTMmZB7+TV8"?:%+h8a3#CW;1SBpni*jVh'B0dS.dB,H[8=:Qt//#(g9&X#hIgnIQ45=]p*l6M<n%$^"/.s#HOO)jo./IbNp
%abguVk]G"hbAJ=EWbJF7rG@[5fte1r;bF#V3@Gi00r%j\2`9;#nCWcGT&'&7AZH)*eSP[pOd_Z6q*5W0`_A"Q]bLK--i7`P,Gt3>
%N^ha4-^^?[N])\"PYq)j1=*15kB3R=pC"&lc!fas5>G!)h<0An*[&1$Q9N(mP7js">W:\fZDJpbWb=f`PNsTnc$?@A=-p3UK@SF%
%+No2oYZdWT4).G1$dH3'gV0O#D5d?2jdB#UZRi3o!in3a3+csrR:6\B]%D_^!21M/atCU0<]d7BkP668ITd!c>2k)#O\M&*H&*7o
%QgQ_f;s#6[A-OBs"NU/kJ-tNXmbZ.t``IVpo\JS-eZ%sK8r%jbI9"0IJ#X54!X%d.TVuG;<Q^=?`T'76lLPsVrW"PPCc(ib\q'lh
%'eLOL-8bTKj7eC!;rAnbShl''MP:gXf:1pHPQDYBXp!O-Zl(!!Al\PcUj=@:beDX(Z@ET60m/c3j+,ADT",9.%#;h*.Jm'n!j?_r
%706EK.6Vri0cfA%`^G*r!\+N=Qj#BBS/H5'XFkOs(f&CeY<7F`@V4L\K/8^m@mqe=GXq45eT+I.EMZZ0j.LrccE:?s+E4Ug<Yi!j
%otnAcOd1JiPWs[Q[#-F<810#*6D1T9nE2XR$%hHOEn/[kHNk:-P-!qsXg%78*+Z#A'ICs+L)@hhOXHOq]c%I%N8P0!19_Ru0lbQ(
%VG:Ip%`7g`HB6Q?T"ITsU@='M9,0osNPn70=dCI>d(PHk%VAZ`VuelM3'oS#[pe1_^ect_!SGAH_;]=_6Wp*c':D1LW1"s()+A,)
%[f\"')au6U@i?Ip5KNRH"'eZuK'&W41fl'9X/E(r?U2j;jYtP`FYl&sMM(e'>V@nEXMb<r7@^%jis)T6aP-3S:`TAg*B/9ablQS6
%GOgW&Pu;[;QM;A4T^H]ljSO9h^"+#]->Fhmp7X2NW'Ystar*$qcjfk1J]k-E\EZGDS-B7g?'oMT4dHsr>1B3#5-p=%^W)Rgp7pYD
%QU.euc>JC5m'mHC5E'S([-D(Dgo^6W<iFjT/4]u@BJfqt2Y0L=On&[,i!Y4Fo5[Ujot@"H)FBkCg1&3OG]auk9"Rl!CN0<^h*$kt
%mu6K.gH,WtE9F1#i^n3Q+)9.f$/eW,/(HLCObf.OCo[4I"k6Y8\@>+?\H&JKRO\X[9r_&_cl=jZ"B'XEUu!jlR7]loXGTP""<ZhB
%RMfYjJG5#RjdmVPLiAgj?.Ot/6+&\^nT4%C,dX2*=>dBo)%9\ZoMI3X_"SOC=`ToRdX"g$=Or&F]0dJZ["p(ieK$Hg0m](+*>^Xh
%<KecUD]85;qNH]0iG4R^cBbf@5VY/S?,^E<Z1CbBC1]q"[TP-^h9^65]cbufnGW66Ul=ko]EUjfS!A-WTT"G[i8$8J1i78C"(G"9
%JJ]W'\);Oo$d#tIZ36T'(\#M;dCg9`-B1\#)U+O`%@4`+*R2Yg?*h#W5tOJZ&b9\]6g"gaF'"j4`<GAA[Y@!(Y7C;qALnj):SsoQ
%ahW?<eBqZ+NYOUY>=XJ!K`r:C91K980RA't.+A&hBl:2NFtT+Vk0pr$Ap*kfpp5ktLEDZ'e2Ak5*sr!O!LL\g5W0OhfMS04^4ueO
%T:rfZjUBD/):-[6Nl)_Qf!2!fU@h7cW/kQb5U(^':F0j=XJc1P-^<\9="#WfaENnXZC.%E=,#U4Fb?H$jM-N3dDM]E$#WLTA64J1
%DdjbK)5'0^?$n`/M!!3=!s;(II_Q&I%S`U'TEd`nIe\=N/)"YJ7L2N'`gTdG`O7#F128O66aPqT%nduH@RFRN$TMi@J@u]_R>">K
%L7VP+=a;@ZhLZur1rZsIBTMsu;d)FCLYteN3k,(Bim#YSl!T)=8D)dX<k;LNHOJI_!2"u<iejiH6g5/kGTQP!J!Sd4T.at6G;;EE
%R.Ue1"cCnU@45&&(IHqG/XP+AU3<6A0EP\uUCeuU$KAj6'X,'3XMk@Nlu#0<#pIq)/^C-U&8?3_Y`=l+B2\*[5d.kb&[KfcWP(4'
%JQCi<&P!5KZ5fit(!gN2AAu_P*EhoQTU4!f@m>/mE.U9Bh#k4-o?HE:7l)se1>09)K..dQ[(pOBJn(Y;TTBd//I-j]W$HN[/Z]&j
%b#u.9Q%3_')MpoT<a[TblJ-o`bdK4t6p4ipDoWK\lHiQnMIL6FppT&,ieeKX)*UR,/=J<UbI,\l+01DK=P!5`\9sQQTi'>A2*a#d
%4DXsdOe)r>'[_t8+070FfJ24bW4bXEnG43ijfF6`',5blN1Ic#"/UL6d@`q*+H([cq4==LJU3_nBiYm[=U;q`l_hWUm\bqT9?+=e
%TF*DJEFd5AoRcf#U<-o*,S/0m/u>Xu<,6T*$d\QeUHP<&/5#Hu(M\Z9l;U7CTH_Ke/;%oL+G4JfK;45`J@>8H#P4fF,8k^?C4<1q
%hYi>[C\0ep5)4,AW@47D>T4dr0.RN%pq)P_ZN2Caqq]/]^L0X#K@/4k#.2^3AH5cdRjGFB!s^QuR?0>9'i.*'K=%'W+O+T3*1-b1
%"RZF6"muEYgU2./*9qf+,>Y73j#1bqL<r%<);7=gbdlBZ"F1'A=L,X2Z^"dpI]bQLR)bqJ(c?m"+lG&D!M,&X;5mMe0>i@u7J1)!
%2Z!gYq)t$nPt5@T*q@A$fabfs/:c9U</61*C4RtJ0I*7tl\mp8Xf<)p(sW<\dF"E/*0#tM'<?D5ZA$L@Dm"B1+7CD*3a';<_<OW;
%Oc-:j`F_Ok<ei*3J4*(i[W%8h/,9*jk*3kL18?>:;5AiddP!<YDmggnef.P/Z*tL:g),k&bR*9rLC\P5q<,sY/uUlkbs'8[Ft252
%J6,Iq`F&*=F>2ISG4%Ys\9ep4_-bQEHL*D&(6j87]r@deIc8#gT2sK&%VAEe(<'i")'<"ROAJ$tpc/'@0FmN4j`,CC"Q+1jb$g-=
%LFV4=?TRti?n#2k:WjV9R-To@&e6hEa91hf5o8TQD^cFK=jf$m'G<8E1kR"hQq>+m$cg$[Fb*>;Otq'5Otht%.AP<,]jI+I`&b.S
%7^a;3S>2p5?C`9hNbi1B+\KH?l>VIh,rm,NH[UQf["?qRK#m:A,!WmCQNL2iYCtsuS=^.6'_PF[ir^'%W=ZMeK*8Q_+&7\jo'frI
%enV1-Fpd)T<\AVV3sVkAOZU2"e8;$&S!fj!Xj/([#-!M;%*KgK)NP^b7VUA1@BuV]YloB1#(hOo*jrp4QkN1HGa3!i'/RY'$3kW(
%81)$PFUE/q1rmGf1RLq#Q0jq?N:%8[`lpo"8_Ed'X:2Y4ki^U1b48bI^umf!L4m@(6]^!N0qs;$"l_D'.QK`b+ZWF7Y!S.))et/T
%=UgSW3ZXSa71QrjAeq0tTIMNo*2k&C*.7A_##n4h6<F/=\A1J?o9Z3[@%u_V`mHRg*!J&feJZ>J13YYn/ZaM,O6WG,e?9k&UW]HE
%;?SLf.@,eZJ^F$mS2=k]e]N>k0N&%W=%'$lMN;hI,unf7aL9+<LUaNUG,k+UCokaO9SR[)C@"C@M6V6(M=n/\SoE%]m$6*B42`t,
%fI7Si<32E3i`<VL%&W>aL$u_sJ%^,h*up[\;i3J&&NaTRUn7Mp*e/2;jeo?JX.4b[$Ec^-DO+m\Ri0=q;o]e+\rsm+"@3L=4Cu)=
%d+RBG>#84ccVJ"D<G\I_'OZf5<QU*Zg*/72F+P9)9e1uI`qg2c]@2Ah$8Y+rF\LRm$tGM10Werh$2qR!d.X]:2=;BhC(sr6RL31H
%Q>Y1e)@]^eF)[eJ\'2!=itsM.T,+Q6<078#C3RpQO(s93B"['b0rg^AAHD-_AqIl#&/[qmI)g$bIi^WR2:5l-N9)T]E)rQgB7Si]
%2+'d1_6E_7=*HPaOsEV>^+Z_Zd$Hb)_p-Ema,ab?#nTX8H/P51'RPT<\n6e%p(2UuqBr$&&Q'9Ch-Eq]k11uT'lNGWDEhm9U*:K\
%:ZfgOpOWA%kN5.+g"J3X'52]#N/(Kk[@:jt!0\eMDirAFrY]nD_f&3!\qTic9:3*1IDC+Y4iO/@>/B&#07I7k9]E2*p+V)A;ETF1
%P_o!\GRr]/$\Y`e?W8KuU5n>U'LTMn>L7eS'cI(^/Q/9mT%WlRg%=B5/P`hfNNlV#\Y_UK7bl&Y(+@EPPdoAU$#6KsLCq*:$B?\J
%(5uGAI#10Jhn?u9nsWaE&q_e<+i?rGBlL_11Q=WF/i7sCS4_rjcW.6'ojBAH0+=p8^j@$>`[D0r5ZbB3l<tAr-o>:-;&=QR&9ZjX
%Xa<a5e+$fNn]>F3#t6eVf!_qgfOB*1X_&]lkR%6E0m(>`3s'?u)VV0%5LKs$;X15eo9CZGKGkibiH8A;je:8VnR]-+$&;eQ5]uoT
%B<Y$;3bPpJLs`ePf@AQF/')"laEf[+4&K"`)TROKYcVQQ+/+6bi!lcP1*`0%))p5JTW`[m(;Dr4rl;T:+[M0]L:AYk!9V@cX]SaM
%9@\.Y5&Ybo9i]I7DUK%t!g&Yi'8'IdU;PGM95(9E(7.BHl=4M#Bbp<RH8biN:CrC!:!IB9cP].M.WLboQp_Rlpc\>PTl=!@#'s'd
%WD>RK_bcGr]WF_/dDO]UHX*\d*h.0&I[m1O<*:V*Ph=#E!@a/cUA[A_U8%8ZCit*fX"hSV1S/iYC[@h@FcG^07Bt)Don`"53>_`V
%[5G,;X7@KAXUTM-JGBL"-&0Fo'p1Bh;8':-W_1UW4X(H,:-L1tXV.FE5*<cA/!a3l%e&8$<AU5p5o#](SYe>$TkI3RBQ$k'Y%*/n
%>RWhsgPg;\/XWe'aI>OE9sr!LR8mo6fs'';886Y;O0II?=MtSTL98oNRnC<214Rok9Nfm\72NC188oL1NtL'-%ja,].D'hYPUO_;
%d],*V7W`%'R[T5T'8n'9+XZ/"<U[j1gQ/d\/aRh%U"V0%^3I0@oAf/Q-(qc'pP,r-8.=8;*d_j69FopsEp`Mq.FdHpm+:_"&C=NB
%`'%sLoYAV`99n8lPqjfA7#c+CgD9ZIFLfrF0;;DcejSe@IusVCqI6R//Ff3fh;VnMe"#RVU`1*6m+u,ZVa&&)$WE[k&;tLL^!(<+
%FN1lM*g^`)IOk"F,sAYX03=SgCUU'=FZ^3djYh:#,s6S?Q-$2'+kVJ8?HQr9!\N6qC3C5S_&2O_DIH>E[)g?kC-cmaoeK,fo.[!)
%ZFL(_6!6jmZUu(-q1mn\+Z?X.jS'L6k/H=!_-00=6oJs\<N:#()\jUu>EpC8?<u?cF`Zg9@B?;S)$E6SmWNO>b(El_mh9<T3(c3R
%[RG26VL@9KqEq(UP#m=t4>.Kj:<SC`Xa20;Qu22=8^OCjk,hZEquA]\LEquoD=l5BKBf^7Jd[.Mkta/*O&s)u>`K^<R$c]]AA5JF
%Z(29k@+j%H?+,jF5!-rA9f=61`Ia[O:i%]HaLd,k.`%WO0VI>?Agk88;L1^G<6$1IOVO'MFfgRo^'3<qk%<0P7`gD>_.IdG4)mgY
%C%$JUDnYV1<X2+[H-4=qkE4Z,Z"&JEPO.j;[:J_hHVl>%Z=OdO`Oq>mO%0^p3-B-kDP0KNLFD^Q=pVYZ&DMO@;,0Fe=Gn@>]+Dt]
%ag3(51`+Z_nM:)4`kFpD=<jYnf[rp9;G>a$n-Y%U0^M=t64t5\MJk90csoUm+C<@kmTUf0e.!AoL'9e#7qWF=\Ft:a?><-Fnm'T\
%YWe\=gThqg"Hr0+f%;];n+UUX-o>o2ZU^sZa]fSIC1qBDon'u"ab:]5O`%&tP['F!KZHEq&\po!<5LVr?YVMul^:qD.Fff4Pg*N3
%/?;1kaV@\ON.P6f/ugbuZ.J#,QZe^_qarIh2embC#)EDBiiArV/im'/oZ6G2EEmdk9bE.<D)AA]it4'_+9XATEIAn,E6q1jdktl(
%n.k&G&E')1&SE,PJRZ$M@Y(G7":mI#cg$5_#k:5MYEUAW12@aY?](Y7k8s=+_@"J*MWd[7.^]1s<drq[,e3kUFf*5$WG6$=rkCe5
%>@C*'i@9SY,Em=5Q"+TCBHDM>V%TD(R'C5i,K5;G>n"Y[oXC?c\U8)Imq%NPqd5pSFkM7b+JlS\$((4q:LE+0YI^TTX#T$Yq4uSH
%pSLV*6jhm]'$'(S;(,4V7g/7'l\*=rEPECL$"X>!SD*^rU["(K-nif<%Wr&Bpn^MIC1P+\,Y-/AFUO,?kg*NU"'eo.1X^DT`mA;/
%GUqQO/=]D(E8Zao=t2*rc!H2_0i=1^f$M+,*+YgrM2A(^3=F&`ET!cb,WBsMiX)LplF)#X]-AMmaG?Yc?BiCXGttt=oB:b9KB,UT
%a!u\O"`2:%ZCfc>^!,SohsTHhA!Gt*$mH:\Kg0qOZ!)6a2&tQ2_[2[eC\`1.F+eZf70HN9Kq!9A[nn(5ISo02H._*XF$&_Y,QtMu
%M6b%=gR?0S65\L$\Z5@Ej1mo:7c[uHjd_`0cn;$s1+d+MH--KR3CgcK\"YgV`])`_U5--H2bGMOr-RGIA>NK@O`ScVit57aIr$!j
%((liOTItG7:H>@9gAMN?G`2D'7g,0-Lk*@Yl1?3XUha_"[mg1jDH%)m@c#&(oI6[CUNaR<"CrsH.^Adh4qX@*,J`Sj?6rccF;S@!
%1G)Pc.)PbHZlQb'`-+]t,348*cE65]#uf,n>^g\=LVmSaiIMV$Q8'^#[cRm=>^9Y7,=QQ[Z&ejt9Tpcn`YNr7G1T8kaT4.)]N1Jc
%j2Tk0R8JCBQh+(7.heXU;trQeFch![Ad%;CIERk.PEVXD9Z?F!%"YU[/*$M4dD&O-k$(8`C1Y\h`k"\gZl)eH2j)9%M?*I*Ar9J@
%Ni^q_^.JH$iYIOiiX:=EFp5ETI<*HFWuH5ZOWubFOf&s**+]_A-9oPlSqfr&+gPDs:(<k:4;^ZF7RFmB\3`H7iR[(J]0T)@5+4Gm
%o!tbmgHY.].ubJY33VJ"O#<..M,4";Wbd%"E?;>3f`g?U+>U8.isP#:#;NpKm"]:RAK/m#lT*$$)\<[e73_,tir?"ZKO;^RENY:j
%_qAs:Y<I:lR"7+.*fS">nR!AfN0mKSL@1'dBBGb[L-E$/'5sN>_t3m'q/<:r/:[iIZ$QtM_kIS^0.'c&^MON+ALAL=mX&EEFPZaj
%LJ]eub]Le@4gpMW',DldWSNKl[o4q@r./i$J?V:(,8<h#ZNt@1qt+E)Keai+(aseFWA9+4.L(#$QM[j<D\m5?J;G,2Mk?Y-f6:?\
%BYV42[TSX]_\YAsX6$?t:Zlb&^4hU*Rjh/s.G&E7)U_L%m;<c.ArRYFi!YO+Q=io0O%.B_VGHtpf;sPS"s'm,:jC\N[EsLa4JpAB
%"!!^<NUa(VIOWagen`]IA[o&UPILPaiMW,"iqn;1_XrgBB6s6n,"+`BRId6Ri="K5eW9KPJSX.(pVc0'.6%d?HMX$.E9E?@+sW\+
%4\/[+L)P-:Z,H&d$#)9k#Tm]o#LGeYcb4L[?[2-Yc+Papj.(M1`i%^D$j6bVH(Vo'_J,YJFH*gY,+983V_Rp*:$U1N=e:Dbc)[3\
%C(?j@R",_nl%A,9V$X)5Gh,)drGke/5Guje:;:/"+'S?S3Gjpjm7M=4WpJb+Z&9*hXG\]*Lc'JXqPB$LF=<H\ST\E"C8.W;ZbWJY
%98!PD1r3u/g[m*T,3MDB@&a8&j.-:-dq40_.>!UB/0dJ$"Y!EN1lW=e4MM(B3&-q<^mXg.=muU?EUF403Q;5R0OS[#-KS),/(rik
%Qbr?.Cr,l,<XH!mbI&aq+*L$n^J$c\M#X5!XFlQN&!e#Jda_`Vca-7Td3:/9g+q.Z_FY5E9%F[JNIF!fNu_cAftbD=Rljt,hN;G(
%MTt/IKma3$;(0:94d_082c0r?m+OOpAHL1E*ODef63)&ka!7ht1a)1!lKi[9Z$=bkAfC#?!-/AJBYpbg:$AM(iBkQMr&@66qjb_.
%B?s*+YVI2r7+KW0Hd!GgA@DZJ[U<@_B8pHX\VbZ=3a&??NWt[[/KW64@P+TA.*fXba>8&If#m9[Z>[ZM:?.on:dp3UM0LqVhX@.(
%_=r"$5$rW^gol64+4IqG\I8fOEZ.:UoYocTI>l-P7lZpW`T_`@W3=!s+^p$nQhUu:o&$ms[4Trsj0p_"--iYU2&;3q9!=`o$*]ao
%02/&PLN/9U?rO^GjG=Jij&gZ^[A0<([[B\8lSD\C!r=.e-q0)$&N3qu3;,>TDAOODo3pCUWj^^&)(E10?d()YA'TK@(48Tk<IGS<
%X'n%E#1QFo8Ceci&=]9O(QtcZ\(M-]I$)TUWa[Sp$WZ'TI7je9'[L3o4aX%/du0/P;SS.N;0-qI1Obmo:4!t8$[XihqD?bRF2h?$
%(ljR;-.U+DGVsu,>=L2joR*fQBSh_+mV@V]fM1mf9KrSY%[;XjA>;r\SiHhZ)O?24Z%<3O7<So_L_^SSPY"d<51'+r0_PK**9#*&
%p$ULj5d)A<7Scfu-T,?TRPrITagb%>=dF$`CPCSqqZWOl`!*OJ8UfTFluU8_Ml^A!2'Y?d/6ru:H\3L)1q'@G<!rmN/BO6sSlQ8A
%Esq0(Qqi*/ed@q@J@62j44C0_2YH=sr4#o_K\*AaH1l#rj4t(SdEIKL@L'Iq0jm&L[><r+'+hC*`<I>iDsYE-@f)Wbi%\>511DS%
%]GX-2FT:dZ*&s@Z.Yj>hD2-H[AJl_U`WR\%?oZX^?J)2N+E/j+Fc)[t:iu'WdeM[#F"kef':"h>"mXEZi)!go['F%/h%T<J:/aRH
%"lNrD&c#d83FFl@Oc(Q0`S2[J&@`m"gu,O[kK!(o0TPXX%])DUeM,D`"di8>"XM\nnOmNqbhOH*&Rmi-([#k<Lf`m8=LSHh1m)Ma
%0ZKb2Y,MJQC`uE%PY#?g5)gsJc\*X$Er7b3;;lA%WR20n!cL:Un5'l#@(YI:126q:KQ,OpJC&$sbN;EE`!2KB+`#s;mnoCMd).gV
%".SB'[bGY2>85B;`o5,l<KeE*Cg8o$f">:<"Bm:`>CErggXSBOB?k5X)=k0i?:!dN0*IXkkn6*4JnaaR_I],bPATFiYWP>-'g!cO
%YdE/,%ZZ;_*fSR<U[\C?K14`9i83SL$5n&k`nJ`KNR'Mh%Z)IU<OX0aSK!12NrBDm*8.<FYH["$9_<%/J3!859r73b%nW<g$ZYsZ
%?j)"U52=".aBuLl0@69W0ap`^j(S>60A?OibY-Hj?_=SL:h2P'?t8r#+n^u"\uJmNU!#5U&2UT+/%anHa=d_X($"G%*no:+RiAlA
%-MP9oj`6diG%DETfk@i*=d-SU7adYFMB$HngXt^((L13FZ6"G#5*F8WrI-07lu.5]"S>gJR9V9;r>VQWIFu385Q"Os#ke$Kre,Ar
%@b\[Hj\%6U-+@[Cr<@<Aj*'7dco+@R:"kjm)`VDqb<6M_JW'p$!nmWX7/'m8$Ne6O,ptNb?ub?@<cSRYIiLho$]su@=`1.X`a#$\
%MFH75>7>-#cG1`mr$DlL1s3"$$T7T^jPZupn=4da_K$e/Wd7a*VY&JE-to^ud$;[]*4ZL3cFWV6WZ7Zqpt6GW^3A]11U^,cOI)h,
%XKj-#%XQC=c8m@X"HVb:+b*63Pf-f&T3C$l<,?mal.s)p]ms=Knj3PO`X-?d,2\DGqk#ef=W`7ogjNUt-Y=+HBGJt3lbA#>$f&gn
%Qcc7[5;LfBY#gg#77jNJ8D3P@GT]cE_^MT4f+%)$"6HT"DS/iSe1WIY'cQ:]AH>8cQ>a2S&r)ftEO8^WR3"B^c)nhcU0qRd$G*6g
%LOds!bnS2C"RO=aeE0XQrGmgD.9+EOW0`TB`.1CnC@fkHP].@&2mTSZUEs;qGbnQ(-2VeO"4('S<QVmU,Jfs+iQNd!V5'hAN]eWk
%>/-4edWfWaN]etWA1J#_1dkAF[r4IWX+`/Ujtus.o[GP@o+LD012Y?IJ?$e?q$h3DALfN3YSl:)7JN%g`m%K:oTq-+9u.sHj.*5:
%\*LLT!dVEN%BQ/M[QGbY5V#AD-6i@K,-dP/6c_gp\coFUdg>ho^c$Iem9\9J:QkAG(m7O/\"eJ<%ksn2/8Oc$Km%ra]8(p&bngDK
%PL[i.X:(T$*S\&]Yh7T%P((.;SlHjL1H7r%_t\$)%T`!lnHhQ^TuQ#1T>&5??>iPO%q6a0#+HCFURTH!pea#Ci4IY"7+j6$1WM/l
%P+Dp7[7+6:Ak9gTVuat$F:_M[JX%Ku'iE`&-IoLG*($f*RV!^u4\ks2I3,89nR\U1<*@[KYlVJt#3-aqN735>D2lWS&JN,+Q'FhT
%:b(G'-u6U8.Vi%XXErrG9cq]nW%L"qh@u^,BN[_nh;]b69bk@(""i60X/baGX:"mIoPc4:&9;J^TVVjWNLUk%,<I,SY[5DjWZ@6\
%%Lck&AkF1ChA.sMiL*=S-]8"-S%8c:qSa49*%)_>.0F9Dqq[L#Qa)dH`hQ-FArFT-oYOX<_'5f+Xrkh+YH"Yn3<CFR?58UZ,PBFN
%XM'AJbAik2-uo>hb2V]36bI8))3C197=s:r-c9ouS!23!0mLa4RE-$1fG#;^;GVFL\U>MF]8U-YA<HKoiIYj)5F3"A]<fL8?=&9p
%l2/\4H:-OcRR'H.2%a7]UtNU5N[buSZDV4=(tb7Q1ZZLMD9CPQ.'Af`GbkmpnN'95=/dGgMNX83r?U3_Qu%/=c&+$!8g!9d1Wu)Y
%/L`#S]0<'QA)Z3Qm%.--a^OP8DE4]m[GSI/oP.D2j,6D)ZGOcl"]R'>.U@3*.tMHXXDF&@@11tr*)*-A74WmT[ZRf)-A?]CpPe^B
%&4PS3P0'q*pu/-oj83-5Ij_tpQODU@NQH":W_BIEE^YZ0RR`Lf9tPt;NU4<YA'+T\IZelRq%$S5`PqA`=3#<--fpCSp<TYI?7Cb;
%i>OnJ;J^@WG&RskYZ=%"j><F&_9;S.kE#Ji[.9-3+kgk[.t8LuUF3Z>lchqL2IEcV`>gLl<Y5:r>)Q%8g+aTiH.Gt;XQ?ZJXpq1c
%<(R1sRu;+h6iN?Xp-_7[1D*H\&R:0&4j\-4[04cg="6bqhhS+*s(d%?B'&k9jc3]^I@S"kbD[An2f.R.c&<QaOGlrR3m=R2q=)gn
%d(fYdIGT<?#:PaTG/+JuSkZkaKmj\Xa3V,o%%l,IG1>I7+=UmuJFhFgUGFstQp*q+7<A]Jp;uq*$@:ghVe2QNf<P/rKt6GVM<f8N
%C["9TAeX^)V\Nis?;tCm5U.Zl9t7+WV/@ioku!Vm1SH;8,mUA``/t#AmE"*FqkbhjkKOmEOi*gbi93U.lampH(`W,>21>^;Eh7;I
%kM]W7XWaL"FA0L3`%FuYDr>PRCEaPaj2"RsWKj?eM8Z]iR+X&!l3@e66B.PujCm(]mA*%iJnAJOMXS9LK@-3e;3^07S\8YoRDWOE
%FmH%7@VNWoA*t_4'gbf/^0"o\8e`[sf-l&4,V_9T=Mc?Fr9VtK^4H:?7H0ZkK&_,:O(W>).#E7J2/gPD['NW?L0<cV#,EZ1jFkm^
%1mJV#*/ukW]'tCfib#bC;;Rh6:#'p7Rl^"XhNNC1gQ-?5JEf+=6XE1$@_SVDZ]n^*;TpB]NeH#6Th`lQA$W@slY9m\G);&E$NMt]
%^Y(MVl@>jPhKZ#`BWc<#+`pT$AJTZDr1C_\:UDBmXc0U'Lk*!5^$\<o573!AifTi'">iWn1<jkrnKq`6nO9\^@lHYXp12aicSIV=
%3boh=Q')F:8ocp_no%Zlq*i>hi%?2Q&HI:`a0($P9h6b!`KVmG4Rs4j;EqZfQ5/AW))Nfeqdm`2;J=IM5)QFKepc.T%064hl#KdI
%pkU?kg?%?EV3rRBh69<"9,)sHk:!h9llP`!'Wc+:Og9@8jmp^H*''<:)Fe2P[J!;7o7VP#7-SmaaC#,+V*Rb%09Q@l8%0:kH1]:W
%/a:BAH,$L8PFk!GM^moS6HP:o-6NmtFKE?CNup+cGre4f70.r'3k7#diWu;ih=1U?K"G)OBUW'0Wp9b(.7*_44MtM9((eWifla#q
%A-OcE%YRo'C!GYT+D-p:jnSo0O/l_['&ei2VYS0uOCYKh=D03\"l(kj\^BSO+QNJ+OT<?mH!t6Sb;#QT7LRN*#.EnbW3ongf,WI6
%Es3^W_Ra;D6t\GhrO+s<*iAeN=04?mI35G:ZAm&+6/uIB]2Zj=H)>V%',!'+>eh`lI2$D`.QSmCUQh>&onBs/;i`Jr,LjqOcM$\f
%fFr%Y)H1<iQ_.)C3r$t$+^X<,o]IcT9ANBHQ+pj@34qrQ_QpW1impJQ&Kf1t#+q:4+e^+oNLSs*,\02c;#)6uJC??YrIV&Mku^+4
%HX;QrC")jnUflGu-8@5$R0QuXZ*4H5iM@ra<oYO`5L<VVnHPIL.-@,X=VA&DoUONdEkq>u?(Q&$WL9GPE8P%RibIA3m81'NHE09"
%=)C@R"Dai,Xs0;.CFANgTQ"MO>dg+c_n<6n%YlY"0,7u(qZE*V7#>,%hC^%cG#H:LL<\:'AMSsQGGGq+_C.e<:*]@afnN$6"`r:%
%YFUMcpI(qH!/\u9BL[,P%mGju9@`oG>=l_Z;&Y!SKk>JNo=(al#dct$PF]XbJVg@O704\fS^pkuXLWh)"03]^fs<_BQocafYF\b8
%Z$VW[MBK:C_3CIhqD%1@3i<FiL5drc!^mFuVcm_fC)MI]\.A_bN:GUQ1]Sja=*e=D/\j(PSX0=0X?[^<4:F/f*=fQ@gBe'!f&t7C
%PLSFE5mf!%ZS1^;Q9jfUdOjoZnYHZ5X7u^g.k"hlK8$GaN_ZT^`tlH(d"PP(4M]daAO]f/DJX[#\LVMHs)jRX^T/uHe`A"^Pc0BI
%?B@=4]RVL^#U88u(1<@S1Ma5#S5.=X,[Z<6SH*<JSlg22OTgKjQtIfjMHq"EFjl.B+P8rF<XF&[E0h-M4*T>#A85N`%>o;Q;/kpc
%RhFr35nS6>EFcp_ja'Me&4,\irP,GaTpZ9GA9U@KDa>V[P5hD:g<lYukdIsj4_U;Z2Nb"Naar,<@NeLr8eT6R>]?peKt3"Nr1M4$
%4`@$M(*!]tp"4/8O69DC.os[B"Jn=qPrr)*6q/\rm(j0>PNO?\?;;-Q%F!jlNt^DNCdfX7XM!4WEIk[p!=u4k.9COrW2t\hkrQ,5
%K`f5OPjg_sK=@-X.Aj9%kuG0=Ll]@8p+,N8%1mSpdKo<[`.o)KWU%_<6c-VL8,`'gC>P=II79kT5tN>XSGpFg4>nA'\ha50's,:f
%'O8Re7D\\\kHW=:;luj1q;"&/1FL]G,A[:X<q"Gdnr3XUm/`a=7-]ZcOVDP1HdA!(cCF_Oh)dPni[Q2c";-+qnZHgA`s$F6m!>dr
%'.K*/FTeVp\Ir""5UP_*ZW]8J,KfLW%5kiG3B=4ljAs5!MNKRe/rW>]^P_^*M+T6s.P0Rn$42d"pM_g\Nh&aK:c\DpMg=2aU<qQA
%]a6Y)U-OtJD95s^M(4D\?u9!8g+%:&Ci_O6$D()jbp4K82kO-UNNR=W&RB6ghPWJp.'VJs'S8#cK/#AW+N2fO3$-se%kd]']hY\+
%>R`HlRtH!&Xp8Br4mFn:"@EnaNU^[>M.F+9<OeJ4HE'[g=qj,H.8_I)TKIP]#:RGOlo,6Tk1WZb(O9>,gnhrK<%5[rI110hK6kTO
%R+`R^[b61.O<JW_l,umYJ/caG$qP"titlp9m2)2c&lV,HUt/qc.=)?u1IR"2^nl>7i"Mpi((cTB&!Dr0l_n\8(q;!q)CBA=Cc2"S
%ro?SJ8"#dicq>ecNWb2Pjr%4kA"5aaG*&d<qS%t?gW9q5>>Mi62J69sHtVI#8^(RWbmTk7&KT4$iEUT<)"049]-SG_\l%ST[J0su
%D:q;.R;t@eYQumMq3Z3)4u.r':GjWfarus]FTpT6oBboG6QlVp+NkM$X:!B2HYVQ;49V?:Y<E4Z2$jSSYS!!]LG^=(T4>F@?GtVP
%]Ffe[-tS(LTe_#XF%!'335sqKlA&!b$qf-*PuRiN(,IA@oBb/fpYmXo8V<hEDA`_TIRFK1;SY/<2UtPprF>.0Y5i%mABAU`R!0A9
%.qU"ihjQ>=$p!?%GbR%Zq)0ce_:d6pF89l7$WhCe+Lnj^G[^ZG-(tT&.uZ<GrOWGOLb!5cJqb4p_nfq&!SFi+dH)3n\4@Yd?EbPl
%OrhfC\eJ^4p_:)i>6tH^4!93^RGP1i\"Fp<qe0=3B2EP5UouS/=+3R<8_S%))[EcWbO@]1Jg:/P=g^?D/AGd9%Z^>\\$0`+b&qtS
%:Hi8U;<1/UgSDd[QYI7S9V]h9!d+r_"3"s!E7?,[)'g/Y<ue6&=bpk,fUSurL5ps4h6HclTgj$(jMhr?@#h/cQg[eB"GXP`0NTXT
%Vs)Hln3N-ORqEtD4Q[;A.pdZT#JqVHAQn67<?E"5Z@lmpi@6"43CJP7!S]j`UG4,(N8uM"3ub!I^`m&NJ18#-5oJK2jt-@TZ`?Qj
%JnHS0'"Hn.mU.hHl8)hI_03`C/DbS_&:.BD30?O[4Ttd<M#-4d<1fj%kH24o,)[HAcSJOMC5%t?%Nd3@j-$k'@u>jXpXdEq&:TWQ
%Rn7Err%G#!3"g"Y/W6*u.'l(8lS=*_p''KXWebRhB1X0t8j1g+&r37BGg2n^0X(/ZlKhY;'b"U%X>+`e4aNbKaj$u)Pc&#s#.0_/
%LbCqrfA>t:r-M6bT4[0a<Zs"(K.\'3?O($q.?dTNJZEf/h]gCZBoRBlM]tLCU6"GV7':feH6O\g)=_F*:1)A'Cr>P86JY<1q!P%U
%*mN,Ej_n(Od_5KsGI*?;IU'bBIE.O=:K1ZlS,N!0E/Pg>T==_66o!RC`PXj=Zo8r-^\jVe5Lsc;">I&uO"")Sr:-QXZ_pmJc`Qq9
%r6)9VFo_ih"\$.<8,>cLKU]Q$RUn"4i%+T!_`Lcs0[T_[p(hX\ij6NXU!6P"Ddbgg]S.5;H+@nkN96J_#Q[%QY,)W'Che*GK)3`n
%<[g-LFZm+Id]AV;]/rkg]W>cb&#E;-S0-k\%Gnr_XA42Wle2D!GLn,s.+N2n5O"&GK?NU/%:,=t('YBd/acRX,)8V3Wdb0Q8c,eH
%/urI]Q..4=(&'33_YsJcBm-$.Y2R&RF*DhXEMW)rO)OO@W-H(gK+.2bZ)9$`>[t,:ph2fAP5N2%;Bl:;;mUeoPWQBKcB'su%,T3H
%O(NL"Ei#Iml<pN>ZiYrJTO_4\[4S49cTSm&R!'4n"i;C@_hk"p8)oCTle="Q0!pAsodjhRjF,JSanlW24RFo]qW,J=F^A8?\eo;o
%iD&c7k_(pmHaAT>V,uRRcC,F>]#eeQ?Vg:'+Af8QN_e7/Z)N`VYT@Je=qA*Q\&AH[d53YMC<.)RR'5arh<Af@jYK%nVd")rY6VPn
%]IpsAh0#&G;`rCle+*F_-R^F$->dg!/(>McI'?Y%:5@U9o'?n1/:"6NlR/7W+uJoDWO9^Mp3r8R!n?XVE\lh+khBIqo/rn[gY8KG
%:Ik`c*;)MKLo0[h@G^C@8^Fn8-NCBoM^kV&]Xo-hR_n^+S(sFkC"2-RD7aj:Di`IY`VPo/]"ml:Pr:"A,0\PJ$:)eFQcqNA/`J>h
%JpFtU(E#lZ^WE#qSjk;<f%"%Bs7U,3"OGE&d0EQOm'`M@SgI18`h156h_.L/=1g0#Fi8Ed4&`noo^Am"M-#)jQC9Ri<^LgF!GQtE
%>/T'2.a"^I9E_KWFF7`gSEI5&Dq9"0(['?9-7EsDdr9Z&1dtG07Ts!_Z/h"Z0#%kNlR$hQGacZmc_7H&P':&cPNXf.PO#Za?F0-0
%Bte3G_pWp,mG$a3"lQu6c'2#qqK2[\h[<cFm6Fs\.VO<.87+h/5qD[U5p-_*'kh)k@ifW+N`*e%R2-p`oApL*_u=>&?[)*ij)Q$,
%X%]_/:^&Mbp@T[V>"(aHn/Xe'D9&R3ECFljm5)W;X0C/lIpIqE(I(K*:>[Kp-nT:4-bIDO"^)2uZXb/n5`5r4DJM34V7kaSZjLB[
%gjee(Epd10r,W_fjB1fPF^]4/\9eMA:0*1Va5`bN5rTs)QKts"-'%lK.Zf/WjK.q*a8`k`eH'koA[=?mr(eJe37TTmE%Xeqa`6MW
%1t^"AB`.f!pH>-B-'&1h2TP^DWiEiGe[lbRPdL+/mmu9(DN<5kHLI0V>N<WYDK:0TgXFr-HU*._I.Hfg8C-1P^^6hT-[rq-<rj5Z
%N![tb9GiI3&'kEkRr&!s`bgkKI;6EEOZR'c#MJ?N90<OOQtqZ$\*,"OIs_P;"L\,P0*0]%l#AN7>jA]PqpRK.I%@>*lP&Cogs:43
%RL7?scZi$*5?nQ]fJ_mJPb51*[29BOE$h+d<)+s]5S_IX-(.,_C-4H3]u-Bq?:%NZm='//Z`%G!^;Z:5r-mhcYD"o"-2RV\>.>$k
%VR8k)i.HF^Vpqr<m:iI.Fu,i^SU#umI5A@>964A[q-\^'r7Ch9?m#DtCHk*19@R.#$Uc!p$CdK-VNfj[\HX#NS!#ZmBf3V8T0i6h
%5lghYrNEt&&bN!IhcpPP3n`CgMYHI[5!I\I$W4p95I$Pecpf<S(\Pi#kGpj3U0.7IIe`KCro2R,/[)CeAW/UZJ)s%F7ks`kC2I$K
%SPdAZ-e/q9h,f+KXU5ZfB5jloBEHa;,.+0bh3Ko7*NH]]#?ckm>a7YqV7HNNST)t"@MeQ)'q_NU*G!qnaUjhcgU8[4(&skfi<*'q
%!,HIs9*FN&Ve[Eo\sSfg($P^0e:M580nPgLg1]&(o=8u<5fcH08lHmCE*2Ru6!Z5uF-:#AIK`It-J[h1lt(dS-.?eq,_RQD(A=N5
%iT[@:gLgA,qG.u]Gdd@Y6l`jKh40nr%W3E,>81e,PZ7r^_bY(Z&U3T2s/`Adg+FUp;"H5?J;"d2s0#cH0>B8CJH27iof(L[I;STN
%rJgcM9Mc6LQVjbC!R-\2S&E<i.6kum`,uuA7>)&a<h#COI]:2ef-%U0%>Bf\f'ni)X_+MpW3I@4q7T5UH2ra*0_u'EWL[e?%[cfU
%Mt!]Cm&Fr3M\O&\!AB19'=\KN8g3&=$[_*g@[GH!b3DFoqInYh>[q7MFXU*s*6n;;1;+0D<id":;'STF3H,;4U7fo*"0\-1eon%7
%R:<u)-j-,?%k`IH^3dom;iFDL&$\OA33N<<4hX:>eel!+>9V`jiLaZi;6k"'m/lP)iiN`XDnLceWb7'HDc@f@(l<Elm"#q:C-%@'
%b&jiWWG<=BUPi`pQ"pY-+gNaEPl7;.VrVFlk$\as0(#$VGlWO/3a1)eAb=O>]ZQUDkk#Pe3.SXYp#ffmj,u*B2G*lg9^J%CoKhjp
%Qp]-bR:dgAi[KbM)&V?<,PB2[+LkTODi!7\o>C[Fh'8nHXH_0NTL8nl.Cj5(S-Fk_"Tq5Kb4B(P'S2W$6VmTb8BY5iUI]k7d[@_>
%c3`-MgMToP]B_U8N[3apMMVtj,@b#c*L/,GQ688%5*Z/#KmEOI64kWn&)7SckO!lKcO\eOf/V%2gZ='i)>*iO4_`:hf)`Hf<_T"c
%Gc%*W-3kJQ0@etf'IM151-u.AJbBt5Ho7!A0<ci,i:<J3%W9n_`E.o^U%NN'^qpXor!8acX+bZu8\l/_/3a5I9rkOH;d*sJ_#[Z)
%_,>iV#18Nk^gom6<6`d7[IAKZ7:X<CM*&s!#'^TiY4q5POL0di`YoZNDj2fIa&pR2U_[FmPNUp%9l!@Jl-8>^S5-6._C0jsfn-?F
%7a]D<i*O)LcOUr<3HVq!a5=b*RhIWP]8'SJoeD;VkOJCg7p:P,BQLJ*L<eLW0N:c5X:5AnWLQAhR5Tohl6CM6b.R`H,,,[8QnL;n
%D6F9o$(W&Qp5d3/Zu>[JUi-+r(RCol^Qq3uBaFBrf^oS!0rV5A&7HC&dt;KS">"&-^N0cS>-B#!5[GIN;L@`]_N_)JleH0_;4.&%
%(ujC]b`8-(<H-(rd(t(haScf_X"tf-Can*r<p7JI*$)lLY3.K5=MJ\gi4Gm,!;Q:of7bq6_Nd_=6\eg@p#U=(VUiX'/(d3IKaQmN
%k)[L:<5C'';@!K3>%$YY&7!`8/5A"pAD,F56YZ__R+'\$RYam7W.*uoIYMn6rR\?8'Yc_R5t[]C-RaJ.dm'i/VmN@*J69i9N:L,P
%Q01UpT[;]a(C&92*r4q<PU>&qbG[\C+(Gi;IHD5AU#i/2PhBsO1m?qRdmi3k/2cZ6Yg+(<OK?rnV8I[#3h)[%Q4_Z>)YN8\"&Oa=
%3KB/"I[OSGEQ$[//(k5""\W)g@AVX1PK3AjAjp!tq^-8e.@d#R%\*@.omcH]9KW]YOCSbT:Q0<1e3^Ej($PdjKfqe28C@sVW*FWV
%o.4<Mpf^_Fg@k2ONL"E7H!8*<[aHWd<*(KjLu2QF0;7e*C;JcdDYdE#5sUk@0;qU]oLZ[Td0N7AG1=,>3*A\9\5M.c!ucMfF,!63
%9Z=Si$%'!T?P^2MZ%ULEZ"d[cq4tTT=\FBL=)4a'i?c#EB8B2\?u3KO>t[9!#sY>Hh1Bj'QjiJ55Ot,HN<M\Ql:3JKDEuiWgjZR'
%Mc4m@dCAQg<?JH'5Y/m+#/[;`>u_'@eK(e.?D#Q-pH69a7Co\Dh*4+5hhbsmE?S1EFJ"%2=KJCB`id#7dC;\sbRMXX^<;XZ9LOMt
%>(6p,<"KWQC7sn#<<keed3r"g],&hS'/AW`LN8+?fj!*/Q!q;hR:S4C9uf1nCuE#.8d^0:=DZomU>X!m%rsH^eqU]<.f%Q+\Uq>D
%K<`HM&e7>d0M5VF7K_@>A'h+7CbJgVn#QSTC:o7KRZaYf'CM:mC0OA`.jJV2eZ-qG)N]Eblgq=UCH7"<o\PW$4bi:kDX/*%nKm&B
%.<jX#o,HBp;-.6<fokXSdJ[#(1.,BV&<*4qKnM-AYuE]j]X$GSP2mYbQp)AWnL1K"#.+al>39Y3<ZfFOf]Ci*YWti5T(n*B=fDZ4
%!_OCHTiDre+jamF?(XrX;o"1;NSWB0[6]>uD;6*)GiJT9jq]3$oD\^&6c/7*V0k;Z<1]C4_SW,#$s-#`<q@nV`\9ki;A=iX^&`0N
%,;iRb*%*$ZVijrIC:f=9:Ci.@gN:*tYlUl[7lK/*cR8gKbYj!WQk<<$0pCugoLBiHj6"=o)T^r28=jsW.'D455VDTKU9q^*fCtCS
%#tEMC(2e^H:HSB#cgPg3@H*(DY?dg>,R5e54TZu6#bO`>=NJS>)>B<2(fq+0KNt"k/qsr+r0J+gVi9>knVW.Bl>bDU1tUKpXWB3^
%L*^N@d)=BC`Y9S^=H^ZO7[.I.?rcJL&#3TkTW&]j[oc>pHMID[rLL3ONCcolCOr=X[=$?IqtBJ5_)\6%8.11J@R-<@UVfu=]U8K&
%2<R:X91I23l9DV@>n+H$,:^aiT1*iep*7&r@UbJ(%.1`FMo<M]"#FtPDKt#=_dSVSDC""\:<1V@Pa%PXs2<?KJ)Rt$cQ[WrfJVf?
%*C]]"Ak.s*@ruS+q9E-WH.Tin$sION:O;fn`U!fN^ILW!3%Eq:A2X/jG*iht#)ZO0#G?ERahWiRfM^(>VP('SN)(\I\HV`6R+BeQ
%W:>th<5S>rS.(^O?+L:r'[kpMB'E`'A!Q>u@[96d:nrSE;@#a9j2kl6VPW:_<[A:GX;='Jf<88T;B-Ha*?58fi\Pg:D\jZ&X8D-0
%aXeq_FA`T`+V0!W6AE49`d1,G`T<Z5^S5oC:k`(jC&C:TCon)(,&>TZb`r<G@I.%uC-)1PPZLm`l$sd\/[9M6T3r&D-=ZUaB_rR+
%Rh'N6b/BOpY`rdkcr9QfNp,O7HAo&`MRG:/C(d"Fi0BJp./Cf+$T1'2jM/laW]\#5.\#p7YpZ7lB&ZIc%Qqn/EVEVJRa-!#konZq
%K74!oV=4p\>$!2(YE`et\9o3QTk)hCM\\;G3XTi<RuYAR7'0WCVG\!&q^(MK%:"*eg/K0gGqKoRh]"fKL@73@Efn5N<!W,Al&YA-
%UH&(,F,8aCV,TX=@<Y1ls#h+&"YWb:V)3tgK=&S`QQY)9iD//qFh<VXdpV/NnFsd3[AuT>X1Q!Q'O8Zq*mEgs*2+/5ot@Z&>'GUP
%6ako@jgdiXSE'3IpqE;i@s^u]&+Y5XV14F_h>C#9pQTL/\&"LfX6%2c3-O5P&`L?fo4)@o;rLjg.jKdc<6Q6J_iP@QCdDNLF$AGU
%EcMY;MjhY4dU<oi]6D?LFkpqn6?O@9&2*supj"N?hqn@(qtY.q8STUNbn]+LWe'r$1R=r"0N478i[]p15pG<$GfdlRK6;o$gs==$
%q"\]2bJVTR6hp$Ol/.3s?0dYdga19`VKncBRjk!-J]M,Gro-#CFfBK,h3ou]5B$B[^[jCW-;T[M^I6s.@5@b!*E6iS'=1K2KYI4j
%K\WTFg#pZI=O,7=>Q1eoqo`&KNBj7je74Su"Teha,o!W/!T=X7HIuh?l'J/91,U0=Ae9HCrN=ML/>kUf6dK[Z[X8ZY%j`(^j!%BX
%9iP<+,JfjA`['lbLX$_<Ki32o'EP<;)`(,NB'&<u[S0D.RqQ&]1m^go<g="+HG1Ygbn,8$DB%/J%'!NDn73p[@@"!g_peE.7Nk30
%*Ngj#M4Zi!)$""WTq&8*D9\l/7"mY[QH2.V7SBUU7c$YkUt77k@o%*?'12b]6@N?6hpL:(k-7FWS%X*/4Mg<WDoF^MLG5B&fH`0H
%qKu-;8if5%\EE/W?.&bg]<QEj%pT2aC5:(i4u6U':$MqW6'D[\n<IFGbWG82Z#7:8:e^M7paU\uR,c4P+:1bQO8=[2,M(7J.</OL
%eOX4FNGP['nH3J88nPBs3auJi+N2[O0D"JLh^m8:ECRtaNM9)4o\nBfQLP1.V\O$3nP-(IEgen['5=jiNDh`tF'X!9+1T=*Rr`cM
%Q$2*)X3'H?GY1ZO4Hm%19V-@e"=/h:W%eO]KcnYDLDf=i;JDh'6^_=t-!EHj$Gm3A]irCI>\R.5GlW[\S:GJDU7LCm<Ju6#Lub&I
%2$BATgOa^BKBic8?`VEKB`l5,D%&?a9c$Ht,X2?;/LJ1+#]P8(j'P5EH&`qNf]n0G%t=TGiU"'ST1./tWQl[YGN<3;H=_YIVl@o%
%6*sZL?tXMq@abEe9A^a5`FXqtB@Gep:L0\iJ]=F?$HtS1QW!_e1l*@MoIq-i-,<m2OC\9JZ2(mrAQ"T[,?Q[Z9'H@VH(t?Gi+YjB
%eTQs*:`4P3&PT2F5ELka9JA;fc.,Z@*h%PNfrnsa]H];bi*d(#d^BJC'&2n9U1s7%2/UkfQV>1F'>;WNU'L'/&:miHf9;(g#DoB.
%TJdK_$h&QLKs]QM(<?*R5,1f''dSo&N+50YV#<(`Tk3IN14XI;.,B[cXY-`TdlWf=1g88JARg-YjK\u[r2,1r!tab9er-HL$m/<J
%NndY!+AJ(ZRmXW-QI*e7\Un(Oii\$]iY5mP9AASgO5O*qlWslWY<(UOh5a`b@,b2Q7uR8&\K>$i_nQTHE4*8T_4BO2IeYkrp0RZ!
%O@P=ZAT.$lKBj\;>"m&^DJ9bqfb=U]-Sj)$=S_dm=ECF.O.?OA[QCJ'Ue<Mn"ThD.>K1$ske?k512k.(:gLUoXO](O?6a\5mJ8#3
%Q_LtKfK"n2-B6&6=c#aYcIHlW=O_P1Hq]@VNY^`80G9`-*X9n8Ir#n)T/Afj3nQ`L$"8*:_^\q(3aNB71_'O)(;,tm4pW+7afW@F
%\-9tu!'1M)hC0Lo1E&J^C#8aP#_,N5g\ad7*1Nr!@Opu'b-GN0pF^nE'HFNC&K+V8AJ@$t(n*!gX@6[+j+t1W9lIdC5ZU73Vc<,%
%(6u=,(G`&BgY4l5K\/VE#2?s[(=,1%3>a>PnrC%2)U?35)9Zn'H[H)JBb979iZe"5_kD@D'"^E`p<0^[hEpiMe(\`sDDenjSJ2/d
%\GGFk!0@Q4;/B,q"%fo&$Zm45Re+$(UkH[R&e?uCkSdmdcp#KnbUn=E)"g9Q+Q0i(?UISAg;(T-el/U#7dEAY'd=`'V)YG`gItqS
%?&6DKK\q4%>U!+Hl.L=Wc=:+q08<*9SO(QO,".ENApZ(l-rW3M/#itQI=1/qd.h75]_;`3kR\!o/^=>e'03"N28o0lC.']]hKk8S
%T&\W#YYC%'%*DknBj(,_@;u\)d[SME?p%mrWce`=A0>0(\cYu<[05ZWCc]&P.XD#&!2B6-N9ORu]N_%/2sUNQ4*QZ"2Gl$sXAML,
%ri#qC0I+K`0!nlSY$.>,h-6^A^q+FIg*B?Ih$=S4)!T'pbf<qC'S`m3i=)2*%d)/;YQf#?a8d94]kSYR3bT>W,O?;C`%2oNC]Q4*
%?5KU8.;@JlUXc#>SODA8dn,EPfZT[D4??0O+b<HM[YQ];NeEA\K^Ga,e?hid<_pknFkjAahkLEFNkodG%kUCia#7_cjQcX$pC,eW
%n)Y`!l&NfVrh.>qhJ<[!H_%en__j``R]CajdAHXpLPjABaQFNFR&or'd$,"EKJ2NbRDX.XfCd6*GgCI*pO`Z39]&UYos*jiJ&G#@
%V^m3bZFiJS0N3QERj@$u:$\>Mn(V"cr4q2ZjW4_q@ZCL;_4km%p2#1=9EV@p$oo-08!u.5f@A-+d;c]-O'>0-QQ_k]_moq]eW)V"
%Z*i^?)Ff,Z'XhK5I8WAqgjp)ofq>AS;WeJk\&rP&]Td]12;Dg&l8uV?F8]C+q/]!@G!>1'N=&%r]g+&.nHM<NRS@]Ya+D+ULf1p!
%R8>#eW&10taE)rp;)\1Aq)A6:-tS)p-d?RiY'sr@rpHY4nLt7.1BNRdrK.*-QASGq8#8d%nAL"nD$96W)JlRgl<ljZYO9W@lR!?3
%#dPV1^_k[G-q^>!e%gHmh2AsU@)KL[\NAWH+O[eK#<2_?Z,>L27SbG"%k/`oNDbgKV./Pbb3>N3s4nn5'pZLZcJubW3(E"#$S8Is
%m\VT#'+iI5;`EKBa=%WEm7pEmaB^B#n>o-plNiS6`#Uci!(/S+RtDR+g2\MQj:0."Pmg,/<>*]t+-k//ZJi<VoY[hN_Ri8m7l@8.
%H2%o^[9OKI,tnVRQGF0O9%1a*h'5%s\_tgJ9jpijo#u,I+nV.$5eVIdNYR9&kkQ+/Do+#]5$P/_HY>j'DH]>UYRId.FA"m!r7AJN
%]HetJLIfe0U2\?Bo0.TKF'"sl&;-I'TK6RX#GPAMUN`E@/XdMHl;)Nt`rn:L(lZiL^U\XI-lW^D6f9`C*lm5SkOD!r$9Q-p;3E0F
%)=Rh!+@Of>eRS5U5RUTMR"[E9(_mOj_/+XHPHn)VfVPHElk?)3]dN7d^4XcZHIP+.$KT#_ZqPAtnt)@u+?!N"fQA(*WgK`k6%EWJ
%d.[=K9E,JX)#!kmN_gRR]H\MYH4tXnR+nK>ms4OFS6VJKfHBLHD6l]n\mqPI'Ma0n@btob>sE7#dl^FuSEZRORi0tdb!d:4a!;Y_
%X$`Z$ilPK^=<'/mAi!7kPQhcC*+H>>H%.E!j'n<PIqJX&"Y1o:eltQc%[ip+os7>'B)=Qc]p=6d@@Dj*(b-&7=cBFLb3SXoIJ6Zb
%p(G2C5k:r(iageZa@s2nR@7'klG3aHQtoL*=KCS5UXR?j!b1!5Q^;`(%AtJL98`sWph5A<"/n;9Ks/%W0Qk_da[$m/h2s3<$$fU6
%O/SG/+kWa54R^/;CdW:8:ME?sRH#2;P0+nDn_&hM(!,olH^GINZEpq+!&$JcCq,6VHn=3?@$EM6k@kkfMW8nmQ99$-Z%WV3,kPtF
%^eLMVS*+!C!u"mpNak.1aRBKLI#7,Xe?5`p/jcDUIiRV6+D*Kp^nA46N.=nP&DLg-3.?)FEo(*,i]LL-3nB"WEP:t.Wfds(XG%d.
%Z"7nd'Jjjc<#u"QLJ<$XfB:udrRXOSpD*Ede1\eZ^r0LD1'DKJQ7\k.\[RqU,d@Wj($eBu^J/*4,Eqs-:CE0t&;4`(*jP##)2<"e
%n$.AJ\+oNZJfdr^N3YlSYIE:fX/6&/8+.Q`4=8<EV=TjOBEo*FE^cVYR04"o5'chi3\_hU[/2]T,37_99?faKl8i\NNG*8'M;3m*
%)Cf&#^!)n6P+6pV&]`:^5chbd/S'`0Y[:WV<"D9K)gO96-Op1!LaFbOC4O*j`L+mV24s+kQM2g7/(_h(*$E/Aji=J7%;[L_ODCnb
%=V)d/,k/-As/mC/&\N"L&ocEkf6-Vh7g29`]bGL$[:c+uc)XVC_+1NfkS77\UG%Ol'"rIu918-B(J@nq^EPLtA*^jtf"7'D`S=`C
%e(nZ[50$Y>+`^Q+*J[4s4ufcGU:,i9#si/eptD5>-4pNug64JqY2/sqGN%F(ddm)RcYNNtJ+!@(TDncGhu<D#J,7@3bA$ahJ,/,s
%Iep6tq;_MQq5;"*j$3J+hu<E&T76RqTE!-kIemF7J,Sl7^\m_Bs8-1'o$\-Lp-8QLs'Xf[l[hA!iLg,F5Q0V,r',g69hk~>
%AI9_PrivateDataEnd
